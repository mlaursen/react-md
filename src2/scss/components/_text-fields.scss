////
/// @group text-fields
////

/// The error color to use on text fields. This will be applied to the
/// any icons, text field error message, floating label, and the text
/// field divider when there is an error.
/// @type Color
$md-text-field-error-color: $md-red-500 !default;

/// The text field divider's active height. This is the bar that
/// gets colored with the primary color or the error color.
/// @type Number
$md-text-field-divider-active-height: 2px !default;

/// A Map of custom sizes for text fields. Set this to null if you do not want any
/// custom sizes by default. This is a key value pair of String and List. The key will
/// be used to generate a `--suffix` class name to apply to floating labels and text
/// fields. The list must have a length of 4 where it is the:
///   - custom font size
///   - the transition duration modifier
///   - the y position of the label when inactive on mobile devices
///   - the y position of the label when inactive on desktop screens
///
/// @type Map
$md-text-field-custom-sizes: (
  title: ($md-display-1-font-size, .25s, 42px, 36px),
) !default;

/// Boolean if the multiline styling should be included by default.
/// @type Boolean
$md-text-field-include-multiline: true !default;

/// Boolean if the floating label styling should be included by default.
/// @type Boolean
$md-text-field-include-floating-label: true !default;

/// Boolean if the block styling should be included by default.
/// @type Boolean
$md-text-field-include-block: true !default;

/// Boolean if the icon styling for text fields should be included by default.
/// @type Boolean
$md-text-field-include-icon: true !default;

/// Boolean if the message styling for text fields should be included by default.
/// @type Boolean
$md-text-field-include-message: true !default;

/// Boolean if the password text field styling should be included by default.
/// @type Boolean
$md-text-field-include-password: true !default;

/// Boolean if the minimal styling for inline indicators for text fields should be included by default.
/// @type Boolean
$md-text-field-include-inline-indicator: true !default;



/// The font size for the text field messages.
/// @type Number
/// @access private
$md-text-field-message-font-size: 12px;

/// The font size for the floating label when it is floating above
/// the text field.
/// @type Number
/// @access private
$md-text-field-active-font-size: 12px;

/// The padding below the text field divider on mobile devices.
/// @type Number
/// @access private
$md-text-field-mobile-divider-bottom-padding: 8px;

/// The height for a single-line text field on mobile devices.
/// @type Number
/// @access private
$md-text-field-mobile-height: $md-height;

/// The height for a floating-label text field on mobile devices.
/// @type Number
/// @access private
$md-text-field-mobile-floating-height: 72px;

/// The font size for a text field on mobile devices.
/// @type Number
/// @access private
$md-text-field-mobile-font-size: 16px;

/// The padding above a floating label on mobile devices.
/// @type Number
/// @access private
$md-text-field-mobile-top-padding: 16px;

/// The padding between a _floating_ floating label and the text field
/// on mobile devices.
/// @type Number
/// @access private
$md-text-field-mobile-floating-label-padding: 8px;

/// The padding above the text field divider for mobile and desktop.
/// @type Number
/// @access private
$md-text-field-divider-top-padding: 7px;

// The padding above and below the block text field on mobile devices.
// @type Number
$md-text-field-mobile-block-padding: 20px;

/// The height for a single-line text field on desktop displays.
/// @type Number
/// @access private
$md-text-field-desktop-height: 40px;

/// The height for a floating-label text field on desktop displays.
/// @type Number
/// @access private
$md-text-field-desktop-floating-height: 60px;

/// The font size for text fields on desktop displays.
/// @type Number
/// @access private
$md-text-field-desktop-font-size: 13px;

/// The padding from the top of the text field container to the _floating_
/// floating label on desktop displays.
/// @type Number
/// @access private
$md-text-field-desktop-top-padding: 12px;

/// The padding between a _floating_ floating label and the text field on
/// desktop displays.
/// @type Number
/// @access private
$md-text-field-desktop-floating-label-padding: 4px;

/// The padding between the text field container's bottom and the text field
/// divider on desktop displays.
/// @type Number
/// @access private
$md-text-field-desktop-divider-bottom-padding: 4px;

// The padding above and below the block text field on desktop screens.
// @type Number
$md-text-field-desktop-block-padding: 16px;


/// Creates the styles for text fields on mobile devices. The floating labels, blocks,
/// icons, or password styles can be ommitted by disabling the defaults or passing
/// false here. This should normally be used within a media query for mobile devices.
///
/// > Note: If the password is included, icons will automatically be included since they
/// > share styles.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-fields-mobile;
///   }
///
/// @param {Boolean} include-multiline [$md-text-field-include-multiline] - Boolean if the multiline
///     styling of text fields should be included.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the `block` styling
///     should be included.
/// @param {Boolean} include-icon [$md-text-field-include-icon] - Boolean if the minimal styling for
///     using icons should be included.
/// @param {Boolean} include-message [$md-text-field-include-message] - Boolean if the text field message
///     styling should be included. This is the css for the counter and/or help/error text.
/// @param {Boolean} include-password [$md-text-field-include-password] - Boolean if the styling for password
///     text fields should be included.
/// @param {Boolean} include-inline-indicator [$md-text-field-include-inline-indicator] - Bolean if the styling
///     for inline indicators should be included. If the `$include-password` param is `true`, this will automatically
///     be included as well.
/// @param {Map} custom-sizes [$md-text-field-custom-sizes] - A map of custom sizes to apply. If you do not
///     want any custom sizes, set the global or this param to null.
@mixin react-md-text-fields-mobile(
  $include-floating-label: $md-text-field-include-floating-label,
  $include-block: $md-text-field-include-block,
  $include-icon: $md-text-field-include-icon,
  $include-password: $md-text-field-include-password,
  $include-inline-indicator: $md-text-field-include-inline-indicator,
  $custom-sizes: $md-text-field-custom-sizes
) {
  @include react-md-text-field-container-mobile($include-block);
  @include react-md-text-field-mobile($include-floating-label);
  @include react-md-text-field-divider-mobile;

  @if $include-floating-label {
    @include react-md-text-field-floating-label-mobile;
  }

  @if $include-password or $include-icon {
    @include react-md-text-field-icon-mobile;
  }

  @if $include-password or $include-inline-indicator {
    @include react-md-text-field-inline-indicator-mobile;
  }

  @include react-md-text-field-custom-sizes-mobile($custom-sizes, $include-floating-label);
}

/// Creates the styles for text fields on desktop screens. The floating labels, blocks,
/// icons, or password styles can be ommitted by disabling the defaults or passing
/// false here. This should normally be used within a media query for desktop screens.
///
/// > Note: If the password is included, icons will automatically be included since they
/// > share styles.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-fields-desktop;
///   }
///
/// @param {Boolean} include-multiline [$md-text-field-include-multiline] - Boolean if the multiline
///     styling of text fields should be included.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the `block` styling
///     should be included.
/// @param {Boolean} include-icon [$md-text-field-include-icon] - Boolean if the minimal styling for
///     using icons should be included.
/// @param {Boolean} include-message [$md-text-field-include-message] - Boolean if the text field message
///     styling should be included. This is the css for the counter and/or help/error text.
/// @param {Boolean} include-password [$md-text-field-include-password] - Boolean if the styling for password
///     text fields should be included.
/// @param {Boolean} include-inline-indicator [$md-text-field-include-inline-indicator] - Bolean if the styling
///     for inline indicators should be included. If the `$include-password` param is `true`, this will automatically
///     be included as well.
/// @param {Map} custom-sizes [$md-text-field-custom-sizes] - A map of custom sizes to apply. If you do not
///     want any custom sizes, set the global or this param to null.
@mixin react-md-text-fields-desktop(
  $include-floating-label: $md-text-field-include-floating-label,
  $include-block: $md-text-field-include-block,
  $include-icon: $md-text-field-include-icon,
  $include-password: $md-text-field-include-password,
  $include-inline-indicator: $md-text-field-include-inline-indicator,
  $custom-sizes: $md-text-field-custom-sizes
) {
  @include react-md-text-field-container-desktop($include-block);
  @include react-md-text-field-desktop($include-floating-label);
  @include react-md-text-field-divider-desktop;

  @if $include-floating-label {
    @include react-md-text-field-floating-label-desktop;
  }

  @if $include-password or $include-icon {
    @include react-md-text-field-icon-desktop;
  }

  @if $include-password or $include-inline-indicator {
    @include react-md-text-field-inline-indicator-desktop;
  }

  @include react-md-text-field-custom-sizes-desktop($custom-sizes, $include-floating-label);
}

/// Includes the media queries for text fields on mobile devices and desktop screens. The floating
/// labels, blocks, icons, or password styles can be ommitted by disabling the defaults or passing
/// false here. This should normally be used within a media query for mobile devices.
///
/// > Note: If the password is included, icons will automatically be included since they
/// > share styles.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-fields-media;
///
/// @param {Boolean} include-multiline [$md-text-field-include-multiline] - Boolean if the multiline
///     styling of text fields should be included.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the `block` styling
///     should be included.
/// @param {Boolean} include-icon [$md-text-field-include-icon] - Boolean if the minimal styling for
///     using icons should be included.
/// @param {Boolean} include-message [$md-text-field-include-message] - Boolean if the text field message
///     styling should be included. This is the css for the counter and/or help/error text.
/// @param {Boolean} include-password [$md-text-field-include-password] - Boolean if the styling for password
///     text fields should be included.
/// @param {Boolean} include-inline-indicator [$md-text-field-include-inline-indicator] - Bolean if the styling
///     for inline indicators should be included. If the `$include-password` param is `true`, this will automatically
///     be included as well.
/// @param {Map} custom-sizes [$md-text-field-custom-sizes] - A map of custom sizes to apply. If you do not
///     want any custom sizes, set the global or this param to null.
@mixin react-md-text-fields-media(
  $include-floating-label: $md-text-field-include-floating-label,
  $include-block: $md-text-field-include-block,
  $include-icon: $md-text-field-include-icon,
  $include-password: $md-text-field-include-password,
  $include-inline-indicator: $md-text-field-include-inline-indicator,
  $custom-sizes: $md-text-field-custom-sizes
) {
  @media #{$md-mobile-media} {
    @include react-md-text-fields-mobile($include-floating-label, $include-block, $include-icon, $include-password, $custom-sizes);
  }

  @media #{$md-desktop-media} {
    @include react-md-text-fields-desktop($include-floating-label, $include-block, $include-icon, $include-password, $custom-sizes);
  }
}

/// Includes the css for text fields. The floating label, block styling, icon, password, and
/// messages are all optional. These sections can be enabled or disabled by modifying the params
/// on this mixin or modifying the default values. If the `$include-media` param is true, the
/// mobile and desktop media queries will be included for all included parts of the text fields.
///
/// Also if the `$md-text-field-custom-sizes` map is defined, each custom size will be created.
///
/// @example scss - Basic Usage SCSS
///   @include react-md-text-fields;
///
///   // or
///   $md-primary-color: $md-light-blue-500;
///   @include react-md-text-fields;
///
///   // or
///   @include react-md-text-fields($md-light-theme, $md-light-blue-500);
///
///
/// @see {mixin} react-md-text-fields-media
/// @param {Color} primary-color [$md-primary-color] - The primary color to theme text fields with.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text fields should be styled for
///     the light or dark theme.
/// @param {Color} error-color [$md-red-500] - The error color to use with text fields.
/// @param {Boolean} include-media [$md-media-included] - Boolean if the media queries should be included.
/// @param {Boolean} include-multiline [$md-text-field-include-multiline] - Boolean if the multiline
///     styling of text fields should be included.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the `block` styling
///     should be included.
/// @param {Boolean} include-icon [$md-text-field-include-icon] - Boolean if the minimal styling for
///     using icons should be included.
/// @param {Boolean} include-message [$md-text-field-include-message] - Boolean if the text field message
///     styling should be included. This is the css for the counter and/or help/error text.
/// @param {Boolean} include-password [$md-text-field-include-password] - Boolean if the styling for password
///     text fields should be included.
/// @param {Boolean} include-inline-indicator [$md-text-field-include-inline-indicator] - Bolean if the styling
///     for inline indicators should be included. If the `$include-password` param is `true`, this will automatically
///     be included as well.
/// @param {Map} custom-sizes [$md-text-field-custom-sizes] - This is a map of size names and font sizes
///     to apply as custom sizes for the text field.
@mixin react-md-text-fields(
  $primary-color: $md-primary-color,
  $light-theme: $md-light-theme,
  $error-color: $md-text-field-error-color,
  $include-media: $md-media-included,
  $include-multiline: $md-text-field-include-multiline,
  $include-floating-label: $md-text-field-include-floating-label,
  $include-block: $md-text-field-include-block,
  $include-icon: $md-text-field-include-icon,
  $include-message: $md-text-field-include-message,
  $include-password: $md-text-field-include-password,
  $include-inline-indicator: $md-text-field-include-inline-indicator,
  $custom-sizes: $md-text-field-custom-sizes
) {
  @if $include-media {
    @include react-md-text-fields-media($include-floating-label, $include-block, $include-icon, $include-password, $custom-sizes);
  }

  @include react-md-text-field-container($light-theme, $include-multiline, $include-block);
  @include react-md-text-field($light-theme, $include-multiline);
  @include react-md-text-field-divider($primary-color, $error-color);

  @if $include-floating-label {
    @include react-md-text-field-floating-label($primary-color, $light-theme, $error-color);
  }

  @if $include-message {
    @include react-md-text-field-message($light-theme, $error-color, $include-icon);
  }

  @if $include-password or $include-icon {
    @include react-md-text-field-icon($primary-color, $light-theme, $error-color);
  }

  @if $include-password or $include-inline-indicator {
    @include react-md-text-field-inline-indicator;
  }

  @if $include-password {
    @include react-md-text-field-password($light-theme);
  }

  @include react-md-text-field-custom-sizes($md-text-field-custom-sizes, $include-floating-label);
}


/// Themes all parts of the text fields if they are included.
///
/// @example scss - Example Usage SCSS
///   .my-subtheme {
///     @include react-md-theme-text-fields($md-blue-500);
///   }
///
/// @see {mixin} react-md-theme-text-field-icon
/// @see {mixin} react-md-theme-text-field-divider
/// @see {mixin} react-md-theme-text-field-message
/// @see {mixin} react-md-theme-text-field-floating-label
/// @param {Color} primary-color - The primary color to theme text fields with.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text fields should be styled for
///     the light or dark theme.
/// @param {Color} error-color [$md-red-500] - The error color to use with text fields.
/// @param {Boolean} include-multiline [$md-text-field-include-multiline] - Boolean if the multiline
///     styling of text fields should be included.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the `block` styling
///     should be included.
/// @param {Boolean} include-icon [$md-text-field-include-icon] - Boolean if the minimal styling for
///     using icons should be included.
/// @param {Boolean} include-message [$md-text-field-include-message] - Boolean if the text field message
///     styling should be included. This is the css for the counter and/or help/error text.
/// @param {Boolean} include-password [$md-text-field-include-password] - Boolean if the styling for password
///     text fields should be included.
@mixin react-md-theme-text-fields(
  $primary-color,
  $light-theme: $md-light-theme,
  $error-color: $md-text-field-error-color,
  $include-multiline: $md-text-field-include-multiline,
  $include-floating-label: $md-text-field-include-floating-label,
  $include-block: $md-text-field-include-block,
  $include-icon: $md-text-field-include-icon,
  $include-message: $md-text-field-include-message,
  $include-password: $md-text-field-include-password
) {
  @include react-md-theme-text-field-divider($primary-color, $error-color);

  @if $include-floating-label {
    @include react-md-theme-text-field-floating-label($primary-color, $light-theme, $error-color);
  }

  @if $include-icon or $include-password {
    @include react-md-theme-text-field-icon($primary-color, $light-theme, $error-color);
  }

  @if $include-message {
    @include react-md-theme-text-field-message($light-theme, $error-color);
  }
}


/// Creates the styles for the text-field-container on mobile devices. This
/// should normally be used within the `react-md-text-fields-mobile` mixin.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @import react-md-text-field-container-mobile;
///   }
///
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if block styling should
///     be included.
@mixin react-md-text-field-container-mobile($include-block: $md-text-field-include-block) {
  @if $include-block {
    .md-text-field-container--input-block {
      padding-bottom: $md-text-field-mobile-block-padding;
      padding-top: $md-text-field-mobile-block-padding;
    }

    .md-text-field-container--multiline-block {
      margin-bottom: $md-text-field-mobile-block-padding;
      margin-top: $md-text-field-mobile-block-padding;
    }

    .md-text-field-container--padded-block {
      padding-left: $md-text-field-mobile-block-padding;
      padding-right: $md-text-field-mobile-block-padding;
    }
  }
}


/// Creates the styles for the text-field-container on desktop screens. This
/// should normally be used within the `react-md-text-fields-desktop` mixin.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @import react-md-text-field-container-desktop;
///   }
///
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if block styling should
///     be included.
@mixin react-md-text-field-container-desktop($include-block: $md-text-field-include-block) {
  @if $include-block {
    .md-text-field-container--input-block {
      padding-bottom: $md-text-field-desktop-block-padding;
      padding-top: $md-text-field-desktop-block-padding;
    }

    .md-text-field-container--multiline-block {
      margin-bottom: $md-text-field-desktop-block-padding;
      margin-top: $md-text-field-desktop-block-padding;
    }

    .md-text-field-container--padded-block {
      padding-left: $md-text-field-desktop-block-padding;
      padding-right: $md-text-field-desktop-block-padding;
    }
  }
}


/// Includes the media queries for the text-field container.
///
/// @example scss - Example Usage SCSS
///   @import react-md-text-field-container-media;
///
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if block styling should
///     be included.
@mixin react-md-text-field-container-media($include-block: $md-text-field-include-block) {
  @if $include-block {
    @media #{$md-mobile-media} {
      @include react-md-text-field-container-mobile($include-block);
    }

    @media #{$md-desktop-media} {
      @include react-md-text-field-container-desktop($include-block);
    }
  }
}

/// Includes only the `md-text-field-container` css. This should normally be used from
/// the `react-md-text-fields` mixin. The placeholders will also be styled accordingly.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-container;
///
///   // or
///   $md-primary-color: $md-orange-500;
///   @include react-md-text-field-container;
///
///
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if currently using the light
///     theme.
/// @param {Boolean} include-multiline [$md-text-field-include-multiline] - Boolean if the
///     multiline text field css should be included.
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the block styling
///     for text fields should be included.
@mixin react-md-text-field-container(
  $light-theme: $md-light-theme,
  $include-multiline: $md-text-field-include-multiline,
  $include-block: $md-text-field-include-block
) {

  .md-text-field-container {
    @include react-md-theme-text-field-placeholders(get-color('secondary', $light-theme));

    display: inline-block;
    position: relative;
    vertical-align: bottom;

    // scss-lint:disable VendorPrefix, PseudoElement
    :-moz-placeholder {
      opacity: 1;
    }

    ::-moz-placeholder {
      opacity: 1;
    }

    :-ms-input-placeholder {
      opacity: 1;
    }

    ::-webkit-input-placeholder {
      opacity: 1;
    }
  }

  .md-text-field-container--input {
    line-height: 1;
  }

  .md-text-field-container--full-width {
    display: block;
  }

  @if $include-block {
    .md-text-field-container--input-block {
      display: flex;
    }
  }

  @if $include-multiline {
    .md-text-field-multiline-container,
    .md-text-field-container--multiline {
      transition-duration: $md-transition-time;
      transition-property: height;
    }

    .md-text-field-multiline-container {
      position: relative;
    }
  }
}



/// Includes the css for the input / textarea tags for text fields. This is normally
/// used only within the `react-md-text-fields` mixin.
///
/// @example scss - Basic Usage SCSS
///   @include react-md-text-field;
///
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text field should be styled
///     for the light-theme.
/// @param {Boolean} include-multiline [$md-text-field-include-multiline] - Boolean if the multiline styling
///     of text fields should be included.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the floating
///     label styles should be included.
@mixin react-md-text-field($light-theme: $md-light-theme, $include-multiline: $md-text-field-include-multiline) {
  .md-text-field {
    background: none;
    border: 0;
    line-height: inherit;
    padding: 0;
    width: 100%;

    &:focus {
      outline: none;
    }

    &:-webkit-autofill,
    &:-webkit-autofill:focus {
      box-shadow: 0 0 0 50px $md-white-base inset;
    }
  }

  .md-text-field--margin {
    margin-top: 13px;
  }

  @if $include-multiline {
    .md-text-field--multiline {
      padding-bottom: 0;
      padding-top: 0;
      resize: none;
    }

    .md-text-field--multiline-mask {
      overflow: hidden;
      position: absolute;
      visibility: hidden;
      z-index: -1;
    }
  }
}

/// Creates the css for styling text fields on a mobile device. This should
/// be used within media queries.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-field-mobile;
///   }
///
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
@mixin react-md-text-field-mobile($include-floating-label: $md-text-field-include-floating-label) {
  .md-text-field {
    font-size: $md-text-field-mobile-font-size;
  }

  @if $include-floating-label {
    .md-text-field--floating-margin {
      margin-top: 37px;
    }
  }

}

/// Creates the css for styling text fields on a mobile device. This should
/// be used within media queries.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-field-desktop;
///   }
///
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
@mixin react-md-text-field-desktop($include-floating-label: $md-text-field-include-floating-label) {
  .md-text-field {
    font-size: $md-text-field-desktop-font-size;
  }

  @if $include-floating-label {
    .md-text-field--floating-margin {
      margin-top: 33px;
    }
  }
}

/// Includes the media queries for text fields on mobile and desktop devices. This
/// is really only helpful if you do not use the `react-md-text-fields` mixin.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-media;
///
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     floating label styles should be included.
@mixin react-md-text-field-media($include-floating-label: $md-text-field-include-floating-label) {
  @media #{$md-mobile-media} {
    @include react-md-text-field-mobile($include-floating-label);
  }

  @media #{$md-desktop-media} {
    @include react-md-text-field-desktop($include-floating-label);
  }
}



/// Includes the styles for the text field's floating label.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-floating-label;
///
/// @param {Color} primary-color [$md-primary-color] - The primary color to theme text fields with.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text fields should be styled for
///     the light or dark theme.
/// @param {Color} error-color [$md-red-500] - The error color to use with text fields.
@mixin react-md-text-field-floating-label($primary-color: $md-primary-color, $light-theme: $md-light-theme, $error-color: $md-text-field-error-color) {
  .md-floating-label {
    color: get-color('secondary', $light-theme);
    cursor: text;
    line-height: 1;
    pointer-events: none;
    position: absolute;
    top: 0;
    transition-duration: $md-transition-time;
    transition-property: transform, font-size, color;
    white-space: nowrap;
  }

  .md-floating-label--disabled {
    color: get-color('disabled', $light-theme);
  }

  .md-floating-label--floating {
    font-size: $md-text-field-active-font-size;
  }

  .md-floating-label--active {
    color: $primary-color;
  }

  .md-floating-label--error {
    color: $error-color;
  }

  .md-floating-label--icon-offset {
    left: 40px;
  }
}


/// Modifies the styles of the text-field-floating-label ONLY if:
/// - the `$primary-color` is different than `$md-primary-color`
/// - the `$light-theme` is different than `$md-light-theme`
/// - the `$error-color` is different than `$md-error-color`.
///
/// In most cases, you should use the `react-md-theme-text-fields` mixin instead.
///
/// @example scss - Example Usage SCSS
///   .my-subsection-styling {
///     @include react-md-theme-text-field-floating-label($md-light-blue-400, true, $md-orange-500);
///   }
///
/// @see {mixin} react-md-theme-text-fields
/// @param {Color} primary-color [$md-primary-color] - The primary color to use.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if using the light theme.
/// @param {Color} error-color [$md-text-field-error-color] - The error color to use.
@mixin react-md-theme-text-field-floating-label($primary-color: $md-primary-color, $light-theme: $md-light-theme, $error-color: $md-text-field-error-color) {
  @if $primary-color != $md-primary-color {
    .md-floating-label--active {
      color: $primary-color;
    }
  }

  @if $light-theme != $md-light-theme {
    .md-floating-label {
      color: get-color('secondary', $light-theme);
    }

    .md-floating-label--disabled {
      color: get-color('disabled', $light-theme);
    }
  }

  @if $error-color != $md-text-field-error-color {
    .md-floating-label--error {
      color: $error-color;
    }
  }
}

/// Creates the styles for the text field floating labels for mobile devices.
/// This should be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-field-floating-label-mobile;
///   }
@mixin react-md-text-field-floating-label-mobile {
  .md-floating-label--inactive {
    $text-field-size: floor($md-text-field-mobile-font-size * $md-line-height);
    $distance: $md-text-field-mobile-top-padding + $md-text-field-active-font-size + ($text-field-size / 2);

    transform: translate3d(0, $distance, 0);
  }

  .md-floating-label--inactive-sized {
    font-size: $md-text-field-mobile-font-size;
  }

  .md-floating-label--floating {
    transform: translate3d(0, 16px, 0);
  }
}

/// Creates the styles for the text field floating labels for desktop screens.
/// This should be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-field-floating-label-desktop;
///   }
@mixin react-md-text-field-floating-label-desktop {
  .md-floating-label--inactive {
    $text-field-size: floor($md-text-field-desktop-font-size * $md-line-height);
    $distance: $md-text-field-desktop-top-padding + $md-text-field-active-font-size + ($text-field-size / 2);

    transform: translate3d(0, $distance, 0);
  }

  .md-floating-label--inactive-sized {
    font-size: $md-text-field-desktop-font-size;
  }

  .md-floating-label--floating {
    transform: translate3d(0, 12px, 0);
  }
}

/// Includes the media queries and styles for the text field floating labels..
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-floating-label-media;
@mixin react-md-text-field-floating-label-media {
  @media #{$md-mobile-media} {
    @include react-md-text-field-floating-label-mobile;
  }

  @media #{$md-desktop-media} {
    @include react-md-text-field-floating-label-desktop;
  }
}


/// Includes only css for the text field dividers. This is really used if
/// you do not use the `react-md-text-fields` mixin.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-divider;
///
/// @param {Color} primary-color [$md-primary-color] - The primary color to theme text fields with.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text fields should be styled for
///     the light or dark theme.
/// @param {Color} error-color [$md-red-500] - The error color to use with text fields.
@mixin react-md-text-field-divider($primary-color: $md-primary-color, $error-color: $md-text-field-error-color) {
  .md-divider--text-field {
    margin-top: $md-text-field-divider-top-padding;

    &::after {
      background: $primary-color;
      content: '';
      display: block;
      height: $md-text-field-divider-active-height;
      transition-duration: $md-transition-time;
      transition-property: width;
      width: 0;
    }
  }

  .md-divider--text-field-expanded::after {
    width: 100%;
  }

  .md-divider--text-field-error,
  .md-divider--text-field-error::after {
    background: $error-color;
  }

  .md-divider--expand-from-left::after {
    left: 0;
  }

  .md-divider--expand-from-center::after {
    margin: auto;
  }

  .md-divider--expand-from-right::after {
    margin-left: auto;
    right: 0;
  }
}

/// Modifies the styles of the text-field-divider ONLY if:
/// - the `$primary-color` is different than `$md-primary-color`
/// - the `$error-color` is different than `$md-error-color`.
///
/// In most cases, you should use the `react-md-theme-text-fields` mixin instead.
///
/// @example scss - Example Usage SCSS
///   .my-subsection-styling {
///     @include react-md-theme-text-field-divider($md-light-blue-400, true, $md-orange-500);
///   }
///
/// @see {mixin} react-md-theme-text-fields
/// @param {Color} primary-color [$md-primary-color] - The primary color to use.
/// @param {Color} error-color [$md-text-field-error-color] - The error color to use.
@mixin react-md-theme-text-field-divider($primary-color: $md-primary-color, $error-color: $md-text-field-error-color) {
  @if $primary-color != $md-primary-color {
    .md-divider--text-field::after {
      background: $primary-color;
    }
  }

  @if $error-color != $md-text-field-error-color {
    .md-divider--text-field-error,
    .md-divider--text-field-error::after {
      background: $error-color;
    }
  }
}

/// Creates the styles for the text field dividers for mobile devices.
/// This should be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-field-divider-mobile;
///   }
@mixin react-md-text-field-divider-mobile {
  .md-divider--text-field {
    margin-bottom: $md-text-field-mobile-divider-bottom-padding;
  }
}

/// Creates the styles for the text field dividers for mobile devices.
/// This should be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-field-divider-desktop;
///   }
@mixin react-md-text-field-divider-desktop {
  .md-divider--text-field {
    margin-bottom: $md-text-field-desktop-divider-bottom-padding;
  }
}

/// Includes the mobile and desktop media queries for the text field dividers.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-divider-media;
@mixin react-md-text-field-divider-media {
  @media #{$md-mobile-media} {
    @include react-md-text-field-divider-mobile;
  }

  @media #{$md-desktop-media} {
    @include react-md-text-field-divider-desktop;
  }
}

/// Includes the styles for the text field message / counter component.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-message;
///
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text fields should be styled for
///     the light or dark theme.
/// @param {Color} error-color [$md-red-500] - The error color to use with text fields.
/// @param {Boolean} include-icon [$md-text-field-include-icon] - Boolean if the styles for text fields
///     with icons and messages shuld be included.
@mixin react-md-text-field-message($light-theme: $md-light-theme, $error-color: $md-text-field-error-color, $include-icon: $md-text-field-include-icon) {
  .md-text-field-message-container {
    color: get-color('hint', $light-theme);
    display: flex;
    font-size: $md-text-field-message-font-size;
    justify-content: space-between;
  }

  .md-text-field-message-container--error {
    color: $error-color;
  }

  .md-text-field-message-container--full-width {
    width: 100%;
  }

  .md-text-field-message-container--count-only {
    justify-content: flex-end;
  }

  @if $include-icon {
    .md-text-field-message-container--left-icon-offset {
      margin-left: 40px;
    }

    .md-text-field-message-container--right-icon-offset {
      margin-right: 40px;
    }
  }

  .md-text-field-message {
    flex-grow: 1;
    transition-duration: $md-transition-time;
    transition-property: opacity;
  }

  .md-text-field-message--counter {
    display: block;
    flex-grow: initial;
    flex-shrink: 0;
    padding-left: $md-default-padding;
  }

  .md-text-field-message--inactive {
    opacity: 0;
  }

  .md-text-field-message--active {
    opacity: 1;
  }
}

/// Modifies the styles of the text-field-message ONLY if:
/// - the `$light-theme` is different than `$md-light-theme`
/// - the `$error-color` is different than `$md-text-field-error-color`
///
/// In most cases, you should use the `react-md-theme-text-fields` mixin instead.
///
/// @example scss - Example Usage SCSS
///   .my-subsection-styling {
///     @include react-md-theme-text-field-message(true);
///   }
///
/// @see {mixin} react-md-theme-text-fields
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if using the light theme.
/// @param {Color} error-color [$md-text-field-error-color] - The error color to use.
@mixin react-md-theme-text-field-message($light-theme: $md-light-theme, $error-color: $md-text-field-error-color) {
  @if $light-theme != $md-light-theme {
    .md-text-field-message-container {
      color: get-color('hint', $light-theme);
    }
  }

  @if $error-color != $md-text-field-error-color {
    .md-text-field-message-container--error {
      color: $error-color;
    }
  }
}







/// Includes the styles for using icons with text fields. This is really only useful if you did
/// not use the `react-md-text-fields` mixin.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-icon;
///
/// @param {Color} primary-color [$md-primary-color] - The primary color to theme text fields with.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text fields should be styled for
///     the light or dark theme.
/// @param {Color} error-color [$md-red-500] - The error color to use with text fields.
@mixin react-md-text-field-icon($primary-color: $md-primary-color, $light-theme: $md-light-theme, $error-color: $md-text-field-error-color) {
  .md-text-field-divider-container {
    display: inline-block;
  }

  .md-text-field-divider-container--grow {
    display: block;
    flex-grow: 1;
  }

  .md-text-field-icon + .md-text-field-divider-container,
  .md-text-field-divider-container + .md-text-field-icon {
    margin-left: 16px;
  }

  .md-text-field-icon--disabled {
    color: get-color('disabled', $light-theme);
  }

  .md-text-field-icon--active {
    color: $primary-color;
  }

  .md-text-field-icon--error {
    color: $error-color;
  }

  .md-text-field-icon-container {
    align-items: flex-end;
    display: flex;
  }
}



/// Modifies the styles of the text-field-icon ONLY if:
/// - the `$primary-color` is different than `$md-primary-color`
/// - the `$light-theme` is different than `$md-light-theme`
/// - the `$error-color` is different than `$md-error-color`.
///
/// In most cases, you should use the `react-md-theme-text-fields` mixin instead.
///
/// @example scss - Example Usage SCSS
///   .my-subsection-styling {
///     @include react-md-theme-text-field-icon($md-light-blue-400, true, $md-orange-500);
///   }
///
/// @see {mixin} react-md-theme-text-fields
/// @param {Color} primary-color [$md-primary-color] - The primary color to use.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if using the light theme.
/// @param {Color} error-color [$md-text-field-error-color] - The error color to use.
@mixin react-md-theme-text-field-icon($primary-color: $md-primary-color, $light-theme: $md-light-theme, $error-color: $md-text-field-error-color) {
  @if $primary-color != $md-primary-color {
    .md-text-field-icon--active {
      color: $primary-color;
    }
  }

  @if $light-theme != $md-light-theme {
    .md-text-field-icon--disabled {
      color: get-color('disabled', $light-theme);
    }
  }

  @if $error-color != $md-text-field-error-color {
    .md-text-field-icon--error {
      color: $error-color;
    }
  }
}

/// Creates the styles for text field icons on mobile devices. This should be included within
/// a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-field-icon-mobile;
///   }
@mixin react-md-text-field-icon-mobile {
  $text-field-height: 19px;

  .md-text-field-icon {
    margin-bottom: 16px - (($md-font-icon-size - $text-field-height) / 2);
  }
}

/// Creates the styles for text field icons on desktop screens. This should be included within
/// a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-field-icon-desktop;
///   }
@mixin react-md-text-field-icon-desktop {
  $text-field-height: 15px;

  .md-text-field-icon {
    margin-bottom: 12px - (($md-font-icon-size - $text-field-height) / 2);
  }
}

/// Includes the media queries and styles for the text field icons.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-icon-media;
@mixin react-md-text-field-icon-media {
  @media #{$md-mobile-media} {
    @include react-md-text-field-icon-mobile;
  }

  @media #{$md-desktop-media} {
    @include react-md-text-field-icon-desktop;
  }
}


/// Includes the styles for having a password text field.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-password;
///
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the text fields should be styled for
///     the light or dark theme.
@mixin react-md-text-field-password($light-theme: $md-light-theme) {
  .md-password-btn {
    background: transparent;
    border: 0;
    color: get-color('hint', $light-theme);
    height: $md-font-icon-size;
    padding: 0;
    width: $md-font-icon-size;

    &:focus {
      outline: none;
    }

    .md-icon {
      color: inherit;
    }
  }

  .md-password-btn--active {
    color: get-color('secondary', $light-theme);

    &::before {
      background: get-color('secondary', $light-theme);
    }
  }

  .md-password-btn--invisible {
    &::before,
    &::after {
      content: '';
      display: block;
      height: 2px;
      position: absolute;
      top: 50%;
      width: 100%;
    }

    &::before {
      transform: translate3d(-1px, -50%, 0) rotate3d(0, 0, 1, 45deg);
    }

    &::after {
      background: get-color('background', $light-theme);
      transform: translate3d(1px, -50%, 0) rotate3d(0, 0, 1, 45deg);
    }
  }
}


/// Modifies the styles of the text-field-password ONLY if the value of `$light-theme` is
/// different than the `$md-light-theme`. This is only useful if you have a part of your app
/// that is `dark-theme` while another section is not. In most cases, you should use the
/// `react-md-theme-text-fields` mixin instead.
///
/// @example scss - Example Usage SCSS
///   .my-subsection-styling {
///     @include react-md-theme-text-field-password(true);
///   }
///
/// @see {mixin} react-md-theme-text-fields
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if using the light theme.
@mixin react-md-theme-text-field-password($light-theme: $md-light-theme) {
  @if $light-theme != $md-light-theme {
    .md-password-btn {
      color: get-color('hint', $light-theme);
    }

    .md-password-btn--active {
      color: get-color('secondary', $light-theme);

      &::before {
        background: get-color('secondary', $light-theme);
      }
    }

    .md-password-btn--invisible::after {
      background: get-color('background', $light-theme);
    }
  }
}

/// Creates teh styles for the text field's inline indicator. This is is for showing a password button
/// or some other icon within the text field.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-inline-indicator;
@mixin react-md-text-field-inline-indicator {
  .md-text-field-inline-indicator {
    position: absolute;
    right: 0;
  }

  .md-text-field--inline-indicator {
    padding-right: $md-font-icon-size;
  }
}

/// Creates the styles for showing inline indicators in text fields on mobile devices. This should
/// be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-field-inline-indicator-mobile;
///   }
///
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the block styles should
///     be included
@mixin react-md-text-field-inline-indicator-mobile($include-block: $md-text-field-include-block) {
  .md-text-field-inline-indicator {
    bottom: 14px;
  }

  @if $include-block {
    .md-text-field-inline-indicator--block {
      bottom: 16px;
    }
  }
}

/// Creates the styles for showing inline indicators in text fields on desktop screens. This should
/// be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-field-inline-indicator-desktop;
///   }
///
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the block styles should
///     be included
@mixin react-md-text-field-inline-indicator-desktop($include-block: $md-text-field-include-block) {
  .md-text-field-inline-indicator {
    bottom: 9px;
  }

  @if $include-block {
    .md-text-field-inline-indicator--block {
      bottom: 11px;
    }
  }
}

/// Includes the media queries for showing inline indicators in text fields.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-inline-indicator-media;
///
/// @param {Boolean} include-block [$md-text-field-include-block] - Boolean if the block styles should
///     be included
@mixin react-md-text-field-inline-indicator-media($include-block: $md-text-field-include-block) {
  @media #{$md-mobile-media} {
    @include react-md-text-field-inline-indicator-mobile($include-block);
  }

  @media #{$md-desktop-media} {
    @include react-md-text-field-inline-indicator-desktop($include-block);
  }
}


/// Creates the styles for a custom sized text field for mobile devices. This
/// should normally be used within the `react-md-text-field-custom-sizes-mobile`
/// mixin.
///
/// @example scss - Example usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-field-custom-size-mobile('title', (34px, .25s, 46px, 34px));
///
/// @see {mixin} react-md-text-field-custom-sizes-mobile
/// @param {String} name - The custom size name.
/// @param {List} list - A list containing the font size, the transition-time, the mobile y position
///     and the desktop y position.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if floating label
///     styles should be included.
@mixin react-md-text-field-custom-size-mobile($name, $list, $include-floating-label: $md-text-field-include-floating-label) {
  @if $include-floating-label != null {
    .md-floating-label--inactive-#{$name} {
      transform: translate3d(0, nth($list, 3), 0);
    }
  }
}


/// Creates the styles for a custom sized text field for desktop screens. This
/// should normally be used within the `react-md-text-field-custom-sizes-desktop`
/// mixin.
///
/// @example scss - Example usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-field-custom-size-desktop('title', (34px, .25s, 46px, 34px));
///
/// @see {mixin} react-md-text-field-custom-sizes-desktop
/// @param {String} name - The custom size name.
/// @param {List} list - A list containing the font size, the transition-time, the mobile y position
///     and the desktop y position.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if floating label
///     styles should be included.
@mixin react-md-text-field-custom-size-desktop($name, $list, $include-floating-label: $md-text-field-include-floating-label) {
  @if $include-floating-label != null {
    .md-floating-label--inactive-#{$name} {
      transform: translate3d(0, nth($list, 4), 0);
    }
  }
}


/// Creates all the styles for all the custom sizes for text fields for mobile devices. This
/// should normally be used in a media query or the `react-md-text-fields` mixin.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-text-field-custom-sizes-mobile($md-text-field-custom-sizes);
///   }
///
/// @see {mixin} react-md-text-fields
/// @see md-text-field-custom-sizes
/// @param {Map} custom-sizes [$md-text-field-custom-sizes] - A map of custom sizes to use
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if floating label
///     styles should be included.
@mixin react-md-text-field-custom-sizes-mobile($custom-sizes: $md-text-field-custom-sizes, $include-floating-label: $md-text-field-include-floating-label) {
  @if $custom-sizes != null {
    @each $name, $list in $custom-sizes {
      @include react-md-text-field-custom-size-mobile($name, $list, $include-floating-label);
    }
  }
}



/// Creates all the styles for all the custom sizes for text fields for desktop screens. This
/// should normally be used in a media query or the `react-md-text-fields` mixin.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-text-field-custom-sizes-desktop($md-text-field-custom-sizes);
///   }
///
/// @see {mixin} react-md-text-fields
/// @see md-text-field-custom-sizes
/// @param {Map} custom-sizes [$md-text-field-custom-sizes] - A map of custom sizes to use
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if floating label
///     styles should be included.
@mixin react-md-text-field-custom-sizes-desktop($custom-sizes: $md-text-field-custom-sizes, $include-floating-label: $md-text-field-include-floating-label) {
  @if $custom-sizes != null {
    @each $name, $list in $custom-sizes {
      @include react-md-text-field-custom-size-desktop($name, $list, $include-floating-label);
    }
  }
}


/// Includes the css for custom sizes for text fields. This will create some class names with the
/// components they modify and a `--#{$name}` suffix.
///
/// @example scss - Example Usage SCSS
///   @include react-md-text-field-custom-sizes;
///
/// @example scss - Example Usage CSS Output
///   .md-text-field--title {
///     font-size: 34px;
///   }
///
///   .md-floating-label--title {
///     font-size: 34px;
///   }
///
/// @param {Map} font-sizes [$md-text-field-custom-sizes] - A map of size names with font sizes.
/// @param {Boolean} include-floating-label [$md-text-field-include-floating-label] - Boolean if the
///     custom text field size should include the styles for floating labels.
@mixin react-md-text-field-custom-sizes($font-sizes: $md-text-field-custom-sizes, $include-floating-label: $md-text-field-include-floating-label) {
  @if $font-sizes != null {
    @each $name, $list in $font-sizes {
      $font-size: nth($list, 1);
      $time: nth($list, 2);

      .md-text-field--#{$name} {
        font-size: $font-size;
      }

      @if $include-floating-label {
        @if $time != null {
          .md-floating-label--#{$name} {
            transition-duration: $time;
          }
        }

        .md-floating-label--inactive-#{$name} {
          font-size: $font-size;
        }
      }
    }
  }
}





/// Applies a color to all the browser placeholder psuedo elements.
///
/// @example scss - Basic Usage SASS
///   .md-primary.md-toolbar {
///     @include md-theme-text-field-placeholders($md-dark-theme-help-text-color);
///   }
///
/// @example scss - Basic Usage CSS Output
///   .md-primary.md-toolbar {
///     :-moz-placeholder {
///       color: $color;
///     }
///
///     ::-moz-placeholder {
///       color: $color;
///     }
///
///     :-ms-input-placeholder {
///       color: $color;
///     }
///
///     ::-webkit-input-placeholder {
///       color: $color;
///     }
///   }
///
/// @param {Color} color - The placeholder color to use
@mixin react-md-theme-text-field-placeholders($color) {
  // scss-lint:disable VendorPrefix, PseudoElement

  :-moz-placeholder {
    color: $color;
  }

  ::-moz-placeholder {
    color: $color;
  }

  :-ms-input-placeholder {
    color: $color;
  }

  ::-webkit-input-placeholder {
    color: $color;
  }
}

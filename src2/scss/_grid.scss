////
/// @group grid
////

/// The number of columns to use for mobile devices. This _should_
/// probably not be changed.
/// @type Number
$md-grid-phone-columns: 4 !default;

/// The margin to use for grids on mobile devices. This should be
/// one of the values in `$md-grid-available-margins-and-gutters`.
/// @type Number
/// @see md-grid-available-margins-and-gutters
$md-grid-phone-margin: 16px !default;

/// The gutter to use for grids on mobile devices. This should be
/// one of the values in `$md-grid-available-margins-and-gutters`.
/// @type Number
/// @see md-grid-available-margins-and-gutters
$md-grid-phone-gutter: 16px !default;


/// The breakpoint to use for modifying the grid for tablet devices.
/// @type Number
$md-grid-tablet-breakpoint: 600px !default;

/// The number of columns to use for tablet devices. This _should_
/// probably not be changed.
/// @type Number
$md-grid-tablet-columns: 8 !default;

/// The margin to use for grids on tablet devices. This should be
/// one of the values in `$md-grid-available-margins-and-gutters`.
/// @type Number
/// @see md-grid-available-margins-and-gutters
$md-grid-tablet-margin: $md-grid-phone-gutter !default;

/// The gutter to use for grids on tablet devices. This should be
/// one of the values in `$md-grid-available-margins-and-gutters`.
/// @type Number
/// @see md-grid-available-margins-and-gutters
$md-grid-tablet-gutter: $md-grid-phone-gutter !default;


/// The breakpoint to use for modifying the grid for desktop / larger
/// screens.
/// @type Number
$md-grid-desktop-breakpoint: 840px !default;

/// The number of columns to use for grids on desktop / larger screens.
/// @type Number
$md-grid-desktop-columns: 12 !default;

/// The margin to use for grids on desktop screens. This should be
/// one of the values in `$md-grid-available-margins-and-gutters`.
/// @type Number
/// @see md-grid-available-margins-and-gutters
$md-grid-desktop-margin: $md-grid-phone-margin !default;

/// The gutter to use for grids on desktop screens. This should be
/// one of the values in `$md-grid-available-margins-and-gutters`.
/// @type Number
/// @see md-grid-available-margins-and-gutters
$md-grid-desktop-gutter: $md-grid-phone-gutter !default;

/// The possible margins and gutters that can be used in a grid.
/// @type List
$md-grid-available-margins-and-gutters: (8px 16px 24px 40px);


$md-grid-default-columns: $md-grid-phone-columns !default;
$md-grid-max-columns: $md-grid-desktop-columns !default;

%md-cell--right {
  margin-left: auto;
}

/// Creates the styles for grids in material design. This basically
/// creates a main flex container `.md-grid` that will style cells
/// with appropriate margins and widths.
///
/// The following classes will be created:
///
/// `.md-grid` - The main flex container. You should use this along with the `.md-cell` to get
/// the correct gutter and margins for a material desing page.
///
/// `.md-grid--no-spacing` - An optional class name to use with the `.md-grid`. When they are used
/// together, all the margins and spacings will be removed from the grid.
///
/// `.md-cell` - The main container for a column or cell in the grid. If this is used alone, the default
/// behavior is to display 1 cell per row on mobile devices, 2 cells per row on tablets, and 3 cells per row
/// on desktop / larger screens. For more fine tuning, it can be used along with one of the following.
///
/// `.md-cell--NUMBER` - This is will allow a cell to span this many columns on all media sizes. When the `NUMBER`
/// is greater than the number of columns allowed for a media device, it will span the entire row. This basically means
/// that if you are using the base configuration options and following the material design specs, mobile devices only
/// allow 4 columns per row, tablets 8 per row, and desktops 12. So specifying `.md-cell .md-cell--6` would span an
/// entire row on mobile devices, 3/4 of a row on tablets, and 1/2 of a row on desktops.
///
/// `md-cell--order-NUMBER` - This is an optional class name you can apply if you want this item to appear in a different
/// order on the grid.
///
/// `.md-cell--NUMBER-offset` - This will offset the cell by the given number of columns. If the `number` is greater
/// than the maximum amount of columsn allowed for the device's screen size, an entire row will be blank.
///
/// `.md-cell--right` - This simply applies `margin-left: auto` to a cell. This is basically the same as applying
/// `float: right` in a row.
///
/// `.md-cell--top` - This aligns the cell to the top of a row.
///
/// `.md-cell--middle` - This aligns the cell to the middle of a row.
///
/// `.md-cell--bottom` - This aligns the cell to the bottom of a row.
///
/// `.md-cell--stretch` - This aligns the cell to stretch the entire height of a row. This is the default behavior.
///
/// `.md-cell--NUMBER-phone` - This will set the cell's size only for mobile devices.
///
/// `.md-cell--NUMBER-tablet` - This will set the cell's size only for tablet devices.
///
/// `.md-cell--NUMBER-desktop` - This will set the cell's size only for desktop / large screens.
///
/// `.md-cell--order-NUMBER-phone` - This will set the cell's order only for mobile devices.
///
/// `.md-cell--order-NUMBER-tablet` - This will set the cell's order only for tablet devices.
///
/// `.md-cell--order-NUMBER-desktop` - This will set the cell's order only for desktop / large screens.
///
/// `.md-cell--NUMBER-offset-phone` - This will offset the cell's position only for mobile devices.
///
/// `.md-cell--NUMBER-offset-tablet` - This will offset the cell's position for tablet devices.
///
/// `.md-cell--NUMBER-offset-desktop` - This will offset the cell's position for desktop / large screens.
///
/// @example scss - Example Usage SCSS
///   @include react-md-grid;
///
/// @param {Boolean} include-media [$md-media-included] - Boolean if the media queries should be included as well.
///     If this is false, you will manually need to call the media mixins to get any useful grid.
@mixin react-md-grid($include-media: $md-media-included) {
  .md-grid {
    align-items: stretch;
    display: flex;
    flex-flow: row wrap;
    margin: 0 auto;

    &.md-grid--no-spacing {
      padding: 0;
    }
  }

  .md-cell--top {
    align-self: flex-start;
  }

  .md-cell--middle {
    align-self: center;
  }

  .md-cell--bottom {
    align-self: flex-end;
  }

  .md-cell--stretch {
    align-self: stretch;
  }

  .md-cell--right {
    @extend %md-cell--right;
  }

  @if $include-media {
    @include react-md-grid-media;
  }
}

/// Creates a grid for mobile devices. This should normally be used in a media query
/// or the `react-md-grid-media` mixin.
///
/// @example scss - Example Usage SCSS
///   @media (max-width: $md-grid-tablet-breakpoint - 1) {
///     @include react-md-grid-mobile;
///   }
///
/// @param {Number} columns [$md-grid-phone-columns] - The number of columns to use.
/// @param {Number} margin [$md-grid-phone-margin] - The margin to use.
/// @param {Number} gutter [$md-grid-phone-gutter] - The gutter to use.
@mixin react-md-grid-mobile($columns: $md-grid-phone-columns, $margin: $md-grid-phone-margin, $gutter: $md-grid-phone-gutter) {
  @include react-md-make-grid('phone', $columns, $margin, $gutter);
}


/// Creates a grid for tablet devices. This should normally be used in a media query
/// or the `react-md-grid-media` mixin.
///
/// @example scss - Example Usage SCSS
///   @media (min-width: $md-grid-tablet-breakpoint) and (max-width: $md-grid-desktop-breakpoint - 1) {
///     @include react-md-grid-tablet;
///   }
///
/// @param {Number} columns [$md-grid-tablet-columns] - The number of columns to use.
/// @param {Number} margin [$md-grid-tablet-margin] - The margin to use.
/// @param {Number} gutter [$md-grid-tablet-gutter] - The gutter to use.
@mixin react-md-grid-tablet($columns: $md-grid-tablet-columns, $margin: $md-grid-tablet-margin, $gutter: $md-grid-tablet-gutter) {
  @include react-md-make-grid('tablet', $columns, $margin, $gutter);
}


/// Creates a grid for desktops and larger screens. This should normally be used in a media query
/// or the `react-md-grid-media` mixin.
///
/// @example scss - Example Usage SCSS
///   @media (min-width: $md-grid-desktop-breakpoint) {
///     @include react-md-grid-desktop;
///   }
///
/// @param {Number} columns [$md-grid-desktop-columns] - The number of columns to use.
/// @param {Number} margin [$md-grid-desktop-margin] - The margin to use.
/// @param {Number} gutter [$md-grid-desktop-gutter] - The gutter to use.
@mixin react-md-grid-desktop($columns: $md-grid-desktop-columns, $margin: $md-grid-desktop-margin, $gutter: $md-grid-desktop-gutter) {
  @include react-md-make-grid('desktop', $columns, $margin, $gutter);
}

/// This creates another custom grid with a suffix. This is really only useful if
/// you will have different grid layouts in your application depending on the page.
///
/// @example scss - Example Usage SCSS
///   @include react-md-custum-grid('24-40', 24px, 40px);
///
/// @example scss - Example Usage CSS Output
///   .md-grid--24-40 {
///     ... styles ...
///   }
///
/// @param {String} suffix - The suffix to apply to the end of `.md-grid--`.
/// @param {Number} margin - The margin to use. This must be unitful number.
/// @param {Number} gutter - The gutter to use. This must be unitful number.
/// @param {Number} phone-columns [$md-grid-phone-columns] - The number of columns to use on mobile
///     devices. If this value is less than or equal to 0, the phone media query will not be created.
/// @param {Number} tablet-columns [$md-grid-tablet-columns] - The number of columns to use on mobile
///     devices. If this value is less than or equal to 0, the tablet media query will not be created.
/// @param {Number} desktop-columns [$md-grid-desktop-columns] - The number of columns to use on mobile
///     devices. If this value is less than or equal to 0, the desktop media query will not be created.
@mixin react-md-make-custom-grid(
  $suffix,
  $margin,
  $gutter,
  $phone-columns: $md-grid-phone-columns,
  $tablet-columns: $md-grid-tablet-columns,
  $desktop-columns: $md-grid-desktop-columns
) {
  @if $phone-columns > 0 {
    @media (max-width: $md-grid-tablet-breakpoint - 1) {
      @include react-md-make-grid('phone', $phone-columns, $margin, $gutter, $suffix);
    }
  }

  @if $tablet-columns > 0 {
    @media (min-width: $md-grid-tablet-breakpoint) and (max-width: $md-grid-desktop-breakpoint - 1) {
      @include react-md-make-grid('tablet', $tablet-columns, $margin, $gutter, $suffix);
    }
  }

  @if $desktop-columns > 0 {
    @media (min-width: $md-grid-desktop-breakpoint) {
      @include react-md-make-grid('desktop', $desktop-columns, $margin, $gutter, $suffix);
    }
  }
}

/// Creates the grid with the given params.
///
/// @example scss - Example Usage SCSS
///   @include react-md-make-grid('phone', $md-grid-phone-columns, $md-grid-phone-margin, $md-grid-phone-gutter);
///
/// @param {String} media-type - The media type to create additional overrides for.
/// @param {Number} columns - The number of columns for this media type to create.
/// @param {Number} margin - The margin to use for this media type.
/// @param {Number} gutter - The gutter to use for this media type.
/// @param {String} suffix [null] - An optional suffix to apply to the `.md-grid`. This is really
///     only used when using the `react-md-make-custom-grid` mixin.
/// @see react-md-make-custom-grid
@mixin react-md-make-grid($media-type, $columns, $margin, $gutter, $suffix: null) {
  $index: index($md-grid-available-margins-and-gutters, $margin);
  @if not $index {
    @warn 'The given `margin` is not a valid margin for a material design grid.';
    @warn 'A valid margin is one of the following: #{$md-grid-available-margins-and-gutters}';
  }

  $index: index($md-grid-available-margins-and-gutters, $gutter);
  @if not $index {
    @warn 'The given `gutter` is not a valid gutter for a material design grid.';
    @warn 'A valid gutter is one of the following: #{$md-grid-available-margins-and-gutters}';
  }

  $grid-padding: $margin - ($gutter / 2);
  @if $suffix {
    .md-grid--#{$suffix} {
      @include react-md-make-cells($columns, $margin, $gutter, $media-type);

      padding: $grid-padding;
    }
  } @else {
    .md-grid {
      padding: $grid-padding;
    }

    @include react-md-make-cells($columns, $margin, $gutter, $media-type);
  }
}

/// Creates the cells in a grid. This should normally only be used within the `react-md-make-grid` mixin.
/// @param {Number} columns - The number of columns for the given media type.
/// @param {Number} margin - The margin to use for the given media type.
/// @param {Number} gutter - The gutter to use for the given media type.
/// @param {String} media-type - The current media type.
/// @see react-md-make-grid
@mixin react-md-make-cells($columns, $margin, $gutter, $media-type) {
  .md-cell {
    @include react-md-cell-size($md-grid-default-columns, $columns, $gutter);

    margin: $gutter / 2;
  }

  @for $i from 1 through $md-grid-max-columns {
    .md-cell--order-#{$i}.md-cell--order-#{$i}-#{$media-type} {
      order: $i;
    }
  }

  @for $i from 1 through ($columns - 1) {
    .md-cell--#{$i},
    .md-cell--#{$i}-#{$media-type}.md-cell--#{$i}-#{$media-type} {
      @include react-md-cell-size($i, $columns, $gutter);
    }
  }

  @for $i from $columns through $md-grid-max-columns {
    .md-cell--#{$i},
    .md-cell--#{$i}-#{$media-type}.md-cell--#{$i}-#{$media-type} {
      @include react-md-grid-full($gutter);
    }
  }

  @for $i from 1 through ($columns - 1) {
    .md-cell--#{$i}-offset,
    .md-cell--#{$i}-#{$media-type}-offset.md-cell--#{$i}-#{$media-type}-offset {
      @include react-md-cell-offset($i, $columns, $gutter);
    }
  }
}

/// Includes all the media queries and styles for grids.
///
/// @example scss - Example Usage SCSS
///   @include react-md-grid-media;
@mixin react-md-grid-media {
  @media (max-width: $md-grid-tablet-breakpoint - 1) {
    @include react-md-grid-mobile;
  }

  @media (min-width: $md-grid-tablet-breakpoint) and (max-width: $md-grid-desktop-breakpoint - 1) {
    @include react-md-grid-tablet;
  }

  @media (min-width: $md-grid-desktop-breakpoint) {
    @include react-md-grid-desktop;
  }
}

@mixin react-md-cell-size($size, $columns, $gutter) {
  width: calc(#{percentage($size / $columns)} - #{$gutter});

  .md-grid--no-spacing > & {
    width: percentage($size / $columns);
  }
}

@mixin react-md-grid-full($gutter) {
  @include react-md-cell-size(1, 1, $gutter);
}

@mixin react-md-cell-offset($size, $columns, $gutter) {
  margin-left: calc(#{percentage($size / $columns)} - #{$gutter});

  .md-grid--no-spacing > & {
    margin-left: percentage($size / $columns);
  }
}

{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Transition Example - Configurable Collapse Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/card/dist/mixins\";\n@import \"~@react-md/dialog/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n@import \"~@react-md/transition/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Transition Example - Configurable Collapse Example",
      "description": "Example from https://react-md.dev/packages/transition/demos#configurable-collapse-example",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/card": "latest",
        "@react-md/dialog": "latest",
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/transition": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "import React, { useState } from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@react-md/card\";\nimport { DialogFooter } from \"@react-md/dialog\";\nimport { Fieldset, Form, Select, TextField, FormMessage } from \"@react-md/form\";\nimport { Collapse } from \"@react-md/transition\";\nimport { Grid } from \"@react-md/utils\";\n\nimport useNumberInput from \"./useNumberInput\";\n\nimport styles from \"./ConfigurableCollapseExample.module.scss\";\n\nconst options = [\"undefined\", \"true\", \"false\"];\n\nconst Demo = () => {\n  const [collapsed, setCollapsed] = useState(true);\n  const [\n    minHeight,\n    minHeightProps,\n    minHeightError,\n    resetMinHeight,\n  ] = useNumberInput({\n    min: 0,\n    max: 200,\n    defaultValue: 0,\n  });\n\n  const [\n    minPaddingTop,\n    minPaddingTopProps,\n    minPaddingTopError,\n    resetMinPaddingTop,\n  ] = useNumberInput({\n    min: 0,\n    max: 80,\n    defaultValue: 0,\n  });\n\n  const [\n    minPaddingBottom,\n    minPaddingBottomProps,\n    minPaddingBottomError,\n    resetMinPaddingBottom,\n  ] = useNumberInput({\n    min: 0,\n    max: 80,\n    defaultValue: 0,\n  });\n\n  const [temporaryBehavior, setTemporary] = useState(\"undefined\");\n\n  let temporary;\n  if (temporaryBehavior !== \"undefined\") {\n    temporary = temporaryBehavior === \"true\";\n  }\n\n  return (\n    <>\n      <Form\n        id=\"configurable-collapse-form\"\n        onReset={() => {\n          resetMinHeight();\n          resetMinPaddingTop();\n          resetMinPaddingBottom();\n          setTemporary(\"undefined\");\n          setCollapsed(true);\n        }}\n      >\n        <Fieldset legend=\"Collapse Options\">\n          <Grid columns={1} desktopColumns={2} largeDesktopColumns={4}>\n            <div>\n              <TextField\n                id=\"collapse-min-height\"\n                name=\"minHeight\"\n                label=\"Min Height\"\n                {...minHeightProps}\n              />\n              <FormMessage id=\"collapse-min-height-message\" error>\n                {minHeightError}\n              </FormMessage>\n            </div>\n            <div>\n              <TextField\n                id=\"collapse-min-padding-top\"\n                name=\"minPaddingTop\"\n                label=\"Min Padding Top\"\n                {...minPaddingTopProps}\n              />\n              <FormMessage id=\"collapse-min-padding-top-message\" error>\n                {minPaddingTopError}\n              </FormMessage>\n            </div>\n            <div>\n              <TextField\n                id=\"collapse-min-padding-bottom\"\n                name=\"minPaddingBottom\"\n                label=\"Min Padding Bottom\"\n                {...minPaddingBottomProps}\n              />\n              <FormMessage id=\"collapse-min-padding-bottom-message\" error>\n                {minPaddingBottomError}\n              </FormMessage>\n            </div>\n            <Select\n              id=\"collapse-temporary\"\n              label=\"Temporary behavior\"\n              options={options}\n              name=\"temporary\"\n              value={temporaryBehavior}\n              onChange={(nextValue) => setTemporary(nextValue)}\n            />\n          </Grid>\n        </Fieldset>\n        <DialogFooter>\n          <Button\n            theme=\"primary\"\n            themeType=\"contained\"\n            disabled={\n              minHeightProps.error ||\n              minPaddingTopProps.error ||\n              minPaddingBottomProps.error\n            }\n            onClick={() => setCollapsed(!collapsed)}\n            type=\"submit\"\n            className={styles.submit}\n          >\n            Toggle\n          </Button>\n          <Button type=\"reset\" theme=\"secondary\" themeType=\"contained\">\n            Reset\n          </Button>\n        </DialogFooter>\n      </Form>\n      <Collapse\n        key={`${minHeight}-${minPaddingTop}-${minPaddingBottom}-${temporary}`}\n        collapsed={collapsed}\n        temporary={temporary}\n        minHeight={minHeight}\n        minPaddingTop={minPaddingTop}\n        minPaddingBottom={minPaddingBottom}\n      >\n        <Card>\n          <CardHeader>\n            <CardTitle>Example</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>\n              Donec lacinia velit ac est finibus malesuada. Mauris arcu dui,\n              euismod quis erat et, iaculis molestie orci. Nullam efficitur\n              felis non feugiat tincidunt. Etiam sed tellus eu nunc fermentum\n              vestibulum. Integer maximus iaculis fringilla. Donec tincidunt\n              mauris quis iaculis volutpat. Ut tempor dui a nisl eleifend, non\n              tempor ipsum condimentum. Morbi ultrices lectus a feugiat\n              fringilla. Morbi ornare vehicula lorem, eu consectetur augue\n              tristique sit amet. Vestibulum fringilla auctor eros, at\n              consectetur libero hendrerit id. Interdum et malesuada fames ac\n              ante ipsum primis in faucibus.\n            </p>\n          </CardContent>\n        </Card>\n      </Collapse>\n    </>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/useNumberInput.jsx": {
    "content": "import React, { useState, useCallback } from \"react\";\nimport { InfoSVGIcon } from \"@react-md/material-icons\";\n\nfunction withinRange(value, min, max) {\n  let nextValue = value;\n  if (typeof min === \"number\") {\n    nextValue = Math.max(min, nextValue);\n  }\n\n  if (typeof max === \"number\") {\n    nextValue = Math.min(max, nextValue);\n  }\n\n  return nextValue;\n}\n\n/**\n * This is a pretty hacked together first implementation for a `useValidity`\n * hook I'm planning on making for simple form validation. Needs a lot of work\n * right now though.\n */\nexport default function useNumberInput({\n  min,\n  max,\n  defaultValue,\n  onBlur,\n  onChange,\n  fixOnBlur = true,\n  errorIcon = <InfoSVGIcon />,\n}) {\n  const [value, setValue] = useState(`${defaultValue ?? \"\"}`);\n  const [number, setNumber] = useState(defaultValue);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleChange = useCallback(\n    (event) => {\n      if (onChange) {\n        onChange(event);\n      }\n\n      const { value } = event.currentTarget;\n      event.currentTarget.checkValidity();\n      setValue(value);\n      setErrorMessage(event.currentTarget.validationMessage);\n    },\n    [onChange]\n  );\n\n  const reset = useCallback(() => {\n    setValue(`${defaultValue ?? \"\"}`);\n    setNumber(defaultValue);\n  }, [defaultValue]);\n\n  const handleBlur = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event);\n      }\n\n      const { value, valueAsNumber } = event.currentTarget;\n      if (fixOnBlur === \"none\" || fixOnBlur === \"zeros\") {\n        const isValid = event.currentTarget.checkValidity();\n        if (fixOnBlur === \"zeros\") {\n          const fixedValue = value.replace(/^0+([0-9]*)$/, \"$1\");\n          setValue(fixedValue);\n        }\n\n        if (!isValid) {\n          setErrorMessage(event.currentTarget.validationMessage);\n          return;\n        }\n      }\n\n      setErrorMessage(\"\");\n\n      const number = withinRange(valueAsNumber, min, max);\n      if (!value || Number.isNaN(number)) {\n        reset();\n        return;\n      }\n\n      setNumber(number);\n      setValue(`${number}`);\n    },\n    [fixOnBlur, max, min, onBlur, reset]\n  );\n\n  return [\n    number,\n    {\n      min,\n      max,\n      type: \"number\",\n      value,\n      error: !!errorMessage,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      rightChildren: !!errorMessage && errorIcon,\n    },\n    errorMessage,\n    reset,\n  ];\n}\n"
  },
  "src/ConfigurableCollapseExample.module.scss": {
    "content": "@import \"~@react-md/utils/dist/mixins\";\n\n.submit {\n  @include rmd-utils-rtl-auto(margin-right, 1rem);\n}\n"
  }
}

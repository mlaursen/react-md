{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Tooltip Example - Hover Mode</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Tooltip Example - Hover Mode",
      "description": "Example from https://react-md.dev/packages/tooltip/demos#hover-mode",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/layout": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { TooltipHoverModeConfig, Tooltipped } from \"@react-md/tooltip\";\nimport { Button } from \"@react-md/button\";\n\nimport Container from \"./Container\";\n\nconst Demo: FC = () => (\n  <TooltipHoverModeConfig>\n    <Container>\n      {Array.from({ length: 8 }).map((_, i) => (\n        <Tooltipped\n          id={`hover-mode-button-${i}`}\n          tooltip={`Tooltip ${i + 1}`}\n          key={i}\n        >\n          <Button>{`Button ${i + 1}`}</Button>\n        </Tooltipped>\n      ))}\n    </Container>\n  </TooltipHoverModeConfig>\n);\n\nexport default Demo;\n"
  },
  "src/Container.tsx": {
    "content": "import React, { FC, HTMLAttributes } from \"react\";\nimport cn from \"classnames\";\n\nimport styles from \"./Container.module.scss\";\n\ninterface ContainerProps extends HTMLAttributes<HTMLDivElement> {\n  stacked?: boolean;\n}\n\nconst Container: FC<ContainerProps> = ({\n  className,\n  children,\n  stacked,\n  ...props\n}) => (\n  <div\n    {...props}\n    className={cn(\n      styles.container,\n      {\n        [styles.stacked]: stacked,\n      },\n      className\n    )}\n  >\n    {children}\n  </div>\n);\n\nContainer.defaultProps = {\n  stacked: false,\n};\n\nexport default Container;\n"
  },
  "src/Container.module.scss": {
    "content": ".container {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n\n  :global .rmd-button {\n    margin: 1rem;\n  }\n}\n\n.stacked {\n  flex-direction: column;\n}\n"
  }
}

{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Tooltip Example - AdvancedAPI And Gotchas</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/tooltip/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Tooltip Example - AdvancedAPI And Gotchas",
      "description": "Example from https://react-md.dev/packages/tooltip/demos#advancedapi-and-gotchas",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "next",
        "@react-md/layout": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/tooltip": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "cnbuilder": "^2.3.0",
        "marked": "latest",
        "prismjs": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { Text } from \"@react-md/typography\";\n\n\n\nconst BrokenButton: FC = () => <Button>No go</Button>;\n\nconst AdvancedAPIGotchas: FC = () => (\n  <Fragment>\n    <Text type=\"headline-6\">Broken Tooltip</Text>\n    <Tooltipped id=\"broken-tooltip\" tooltip=\"I will never appear :(\">\n      <BrokenButton />\n    </Tooltipped>\n    <Tooltipped\n      id=\"keyboard-broken-tooltip\"\n      tooltip=\"I am inaccessible to keyboard users :(\"\n    >\n      <Text>\n        This text will have a tooltip, but it will be inaccessible for keyboard\n        users.\n      </Text>\n    </Tooltipped>\n    <Text type=\"headline-6\">Children Renderer</Text>\n    <Tooltipped\n      id=\"toolip-children-renderer\"\n      tooltip=\"This is a tooltip!\"\n      defaultPosition=\"above\"\n    >\n      {({ tooltip, ...props }) => {\n        // add \"air quotes\" to typed\n        const typedProps = Object.keys(props).reduce(\n          (obj, propName) => ({\n            ...obj,\n            [propName]: propName.startsWith(\"on\") ? \"function\" : \"string\",\n          }),\n          {\n            tooltip: \"ReactNode\",\n          }\n        );\n\n        return (\n          <Fragment>\n            <Button {...props}>Button{tooltip}</Button>\n            <codeBlock language=\"json\">\n              {JSON.stringify(typedProps, null, 2)}\n            <codeBlock>\n          </Fragment>\n        );\n      }}\n    </Tooltipped>\n  </Fragment>\n);\nexport default AdvancedAPIGotchas;\n",
    "isBinary": false
  },
  "src/Code/CodeBlock.tsx": {
    "content": "/* eslint-disable react/no-danger */\nimport React, { forwardRef, ReactNode, useMemo } from \"react\";\nimport { cnb } from \"cnbuilder\";;\nimport { bem } from \"@react-md/utils\";\n\nimport { highlightCode } from \"./utils\";\n\n\nimport LineNumbers from \"./LineNumbers\";\n\nexport interface CodeBlockProps {\n  className?: string;\n  language?: string;\n  children: ReactNode;\n  highlight?: boolean;\n  lineNumbers?: boolean;\n}\n\nconst block = bem(\"code\");\n\nexport default forwardRef<HTMLPreElement, CodeBlockProps>(function CodeBlock(\n  {\n    className,\n    language = \"markdown\",\n    children: propChildren,\n    highlight = true,\n    lineNumbers = false,\n  },\n  ref\n) {\n  const children = useMemo(() => {\n    if (!highlight || typeof propChildren !== \"string\") {\n      return <code inline={false}>{propChildren}<code>;\n    }\n\n    return (\n      <code\n        className={block()}\n        dangerouslySetInnerHTML={{\n          __html: highlightCode(propChildren, language),\n        }}\n      />\n    );\n  }, [propChildren, highlight, language]);\n  return (\n    <pre\n      ref={ref}\n      className={cnb(\n        block({ block: true, counted: lineNumbers }),\n        `language-${language}`,\n        className\n      )}\n    >\n      {typeof propChildren === \"string\" && (\n        <LineNumbers enabled={lineNumbers} code={propChildren} />\n      )}\n      {children}\n    </pre>\n  );\n});\n",
    "isBinary": false
  },
  "src/Code/LineNumbers.tsx": {
    "content": "/* eslint-disable react/no-array-index-key */\nimport React, { FC } from \"react\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface LineNumbersProps {\n  code: string;\n  enabled: boolean;\n}\n\nconst block = bem(\"code\");\n\nconst LineNumbers: FC<LineNumbersProps> = ({ code, enabled }) => {\n  if (!enabled) {\n    return null;\n  }\n\n  const lines = (code.match(/\\r?\\n/g) || []).length;\n\n  return (\n    <span className={block(\"lines\")}>\n      {Array.from(new Array(lines)).map((_, i) => (\n        <span key={i} className={block(\"line-number\")}>\n          {i + 1}\n        </span>\n      ))}\n    </span>\n  );\n};\n\nexport default LineNumbers;\n",
    "isBinary": false
  },
  "src/Markdown/utils.ts": {
    "content": "import Prism from \"prismjs\";\nimport * as marked from \"marked\";\nimport { cnb } from \"cnbuilder\";;\n\nimport { GITHUB_URL } from \"./github\";\nimport { DEMOABLE_PACKAGES, PACKAGE_NAMES } from \"./packages\";\n\nexport function getLanguage(language: string): string {\n  switch (language) {\n    case \"\":\n    case \"markdown\":\n      return \"markup\";\n    case \"sh\":\n      return \"shell\";\n    default:\n      return language;\n  }\n}\n\nexport function highlightCode(code: string, lang: string = \"\"): string {\n  const language = getLanguage(lang);\n  try {\n    return Prism.highlight(code, Prism.languages[language], language);\n  } catch (e) {\n    if (process.env.NODE_ENV === \"development\") {\n      /* eslint-disable no-console */\n      console.error(\n        `Error trying to parse code with the following language: '${lang}' as '${language}'`\n      );\n      console.error(e);\n    }\n\n    return \"\";\n  }\n}\n\n/**\n * The custom markdown renderer. This just adds some additional styles to\n * existing elements, and does some fun stuff with code blocks.\n */\nconst renderer = new marked.Renderer();\n\nrenderer.code = (rawCode, language) => {\n  language = getLanguage(language || \"\");\n  const code = highlightCode(rawCode, language);\n  const lines = (rawCode.match(/\\r?\\n/g) || []).length + 1;\n  let lineNumbers = \"\";\n  if (lines > 3 && !/markup|shell/.test(language) && language) {\n    lineNumbers = Array.from(new Array(lines))\n      .map((_, i) => `<span class=\"code__line-number\">${i + 1}</span>`)\n      .join(\"\");\n    lineNumbers = `<span class=\"code__lines\">${lineNumbers}</span>`;\n  }\n\n  const className = cnb(\n    \"code code--block\",\n    {\n      \"code--counted\": lineNumbers,\n    },\n    `language-${language}`\n  );\n  return `<pre class=\"${className}\">${lineNumbers}<code class=\"code\">${code}</code></pre>`;\n};\n\nrenderer.codespan = code => `<code class=\"code code--inline\">${code}</code>`;\n\nrenderer.heading = (text, level, _raw, slugger) => {\n  // if it is over 60 characters, it is probably not really a title\n  const isNoMargin = text.includes(\"<!-- no-margin -->\");\n  const isNoMarginBottom = text.includes(\"<!-- no-margin-bottom -->\");\n  const isForcedHeading = text.includes(\"<!-- force-heading -->\");\n  // replace comments since they will be slugged :/\n  text = text.replace(/<!-- ([A-z]+(-[A-z]+)*) -->/g, \"\");\n\n  const isValidHeading = isForcedHeading || (text.length <= 60 && !isNoMargin);\n  // `'t` gets slugged as 39t\n  const id = slugger.slug(text).replace(/39t/g, \"t\");\n  const className = cnb(`rmd-typography rmd-typography--headline-${level}`, {\n    heading: isValidHeading,\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    heading__toc: text.includes(\"Table of Contents\"),\n    \"rmd-typography--no-margin\": isNoMargin,\n    \"rmd-typography--no-margin-bottom\": isNoMarginBottom,\n  });\n\n  return `<h${level} id=\"${id}\" class=\"${className}\">\n  ${isValidHeading ? `<a href=\"#${id}\" class=\"heading__link\">#</a>` : \"\"}\n  ${text}\n</h${level}>`;\n};\n\nrenderer.blockquote = quote =>\n  `<blockquote class=\"blockquote\">${quote}</blockquote>`;\n\nrenderer.link = (href, title, text) => {\n  title = title ? ` title=\"${title}\"` : \"\";\n\n  return `<a class=\"rmd-link\" href=\"${href}\"${title}>${text}</a>`;\n};\n\nrenderer.paragraph = (text: string) => `<p class=\"markdown__p\">${text}</p>`;\n\n// ///////////////////////////////////////////////////\n// MARKDOWN TRANSFORMATIONS\n\ntype Transform = (markdown: string) => string;\nconst joinedNames = PACKAGE_NAMES.join(\"|\");\nconst packagesList = `\n${PACKAGE_NAMES.map(\n  name => `- [@react-md/${name}](/packages/${name}/installation)`\n).join(\"\\n\")}\n`;\nconst whitespace = \"(?=\\r?\\n| |[^/])\";\n\nconst transforms: Transform[] = [\n  // #package-name -> [@react-md/package-name](/packages/package-name/demos|installation)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})${whitespace}`, \"g\"),\n      (_, pkg) =>\n        `[@react-md/${pkg}](/packages/${pkg}/${\n          DEMOABLE_PACKAGES.includes(pkg) ? \"demos\" : \"installation\"\n        })`\n    ),\n  // #package-name -> [package-name page](/packages/package-name/page)\n  md =>\n    md.replace(\n      new RegExp(`#(${joinedNames})/(demos|api|sassdoc)`, \"g\"),\n      \"[$1 $2](/packages/$1/$2)\"\n    ),\n  // #packages -> markdown list for all react-md packages\n  md =>\n    md.replace(/#packages(\\/demos)?/g, (_, demos) => {\n      if (demos) {\n        return packagesList.replace(\n          /^(?!layout)(.+)\\/installation/g,\n          \"$1/demos\"\n        );\n      }\n\n      return packagesList;\n    }),\n  // create links to github issues/PRs with #ISSUE_NUMBER\n  // the regex below tries to make sure that hex codes aren't switched to links\n  md =>\n    md.replace(\n      /(: )?(#)(\\d+)(?=\\r?\\n| (?!!))/g,\n      (match, invalid, _hash, ticket) => {\n        if (invalid) {\n          return match;\n        }\n\n        return `[#${ticket}](${GITHUB_URL}/issues/${ticket})`;\n      }\n    ),\n  // create github commit links for git sha's of length 7 (should be first 7 of sha)\n  md => md.replace(/(\\b[0-9a-f]{7}\\b)/g, `[$1](${GITHUB_URL}/commit/$1)`),\n  md => md.replace(/(:tada:)/g, \"🎉\"),\n  md =>\n    md.replace(\n      /#customizing-your-theme/g,\n      \"[customizing your theme](/guides/customizing-your-theme)\"\n    ),\n];\n\nrenderer.image = (href, title, alt) => {\n  return (\n    `<a href=\"${href}\">` +\n    '<div class=\"rmd-media-container rmd-media-container--auto\">' +\n    `<img data-src=\"${href}\" alt=\"${alt}\" title=\"${title || alt}\" />` +\n    \"</div>\" +\n    \"</a>\"\n  );\n};\n\nrenderer.list = (body, ordered) => {\n  const tag = ordered ? \"ol\" : \"ul\";\n  return `<${tag} class=\"markdown__list\">${body}</${tag}>`;\n};\n\nconst transform = (markdown: string): string =>\n  transforms.reduce((updated, fn) => fn(updated), markdown);\n\nexport function markdownToHTML(markdown: string): string {\n  return marked.parse(transform(markdown), { renderer });\n}\n",
    "isBinary": false
  },
  "src/github.ts": {
    "content": "export const { COMMIT_SHA } = process.env;\n\nexport const GITHUB_URL = \"https://github.com/mlaursen/react-md\";\nexport const GITHUB_FILE_URL = `${GITHUB_URL}/blob/${COMMIT_SHA}`;\nexport const GITHUB_DOC_PREFIX = `${GITHUB_FILE_URL}/packages/documentation`;\nexport const GITHUB_DEMO_URL = `${GITHUB_DOC_PREFIX}/src/components/Demos`;\n",
    "isBinary": false
  },
  "src/packages.ts": {
    "content": "/** this file is generated from `yarn dev-utils docConstants` and should not be updated manually */\n\nexport const PACKAGE_NAMES = [\n  \"alert\",\n  \"app-bar\",\n  \"autocomplete\",\n  \"avatar\",\n  \"badge\",\n  \"button\",\n  \"card\",\n  \"chip\",\n  \"dialog\",\n  \"divider\",\n  \"elevation\",\n  \"expansion-panel\",\n  \"form\",\n  \"icon\",\n  \"layout\",\n  \"link\",\n  \"list\",\n  \"material-icons\",\n  \"media\",\n  \"menu\",\n  \"overlay\",\n  \"portal\",\n  \"progress\",\n  \"sheet\",\n  \"states\",\n  \"table\",\n  \"tabs\",\n  \"theme\",\n  \"tooltip\",\n  \"transition\",\n  \"tree\",\n  \"typography\",\n  \"utils\",\n];\n\nexport const TYPESCRIPT_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/elevation|theme/.test(name)\n);\n\nexport const SCSS_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/autocomplete|material-icons|portal/.test(name)\n);\n\nexport const DEMOABLE_PACKAGES = PACKAGE_NAMES.filter(\n  name => !/layout/.test(name)\n);\n",
    "isBinary": false
  }
}

{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Dialog Example - Full Page Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/dialog/dist/mixins\";\n@import \"~@react-md/media/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n@import \"~@react-md/transition/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Dialog Example - Full Page Example",
      "description": "Example from https://react-md.dev/packages/dialog/demos#full-page-example",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "latest",
        "@react-md/button": "latest",
        "@react-md/dialog": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/media": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/transition": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "/* eslint-disable camelcase */\nimport React, { FC, useState } from \"react\";\nimport { AppBar, AppBarNav } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport { Dialog, DialogContent } from \"@react-md/dialog\";\nimport { ArrowBackSVGIcon } from \"@react-md/material-icons\";\nimport { MediaContainer } from \"@react-md/media\";\n\nimport AppBarTitle from \"./AppBarTitle\";\nimport styles from \"./FullPageExample.module.scss\";\n\n// just grabbed some \"large\" images from https://picsum.photos/list\ninterface FullImageData {\n  format: string;\n  height: number;\n  width: number;\n  filename: string;\n  id: number;\n  author: string;\n  author_url: string;\n  post_url: string;\n}\n\nconst IMAGES: Record<number, FullImageData> = {\n  277: {\n    format: \"jpeg\",\n    width: 5616,\n    height: 3744,\n    filename: \"0277_pElM4yerF5Q.jpeg\",\n    id: 277,\n    author: \"Taylor Leopold\",\n    author_url: \"https://unsplash.com/@taylorleopold\",\n    post_url: \"https://unsplash.com/photos/pElM4yerF5Q\",\n  },\n  278: {\n    format: \"jpeg\",\n    width: 5616,\n    height: 3744,\n    filename: \"0278_6QQqqvq4R9A.jpeg\",\n    id: 278,\n    author: \"Taylor Leopold\",\n    author_url: \"https://unsplash.com/@taylorleopold\",\n    post_url: \"https://unsplash.com/photos/6QQqqvq4R9A\",\n  },\n  279: {\n    format: \"jpeg\",\n    width: 5616,\n    height: 3744,\n    filename: \"0279_OHS0yA7OkrQ.jpeg\",\n    id: 279,\n    author: \"Taylor Leopold\",\n    author_url: \"https://unsplash.com/@taylorleopold\",\n    post_url: \"https://unsplash.com/photos/OHS0yA7OkrQ\",\n  },\n  280: {\n    format: \"jpeg\",\n    width: 5491,\n    height: 3661,\n    filename: \"0280_yIDqQ15KgRI.jpeg\",\n    id: 280,\n    author: \"Jay Wennington\",\n    author_url: \"https://unsplash.com/@jaywennington\",\n    post_url: \"https://unsplash.com/photos/yIDqQ15KgRI\",\n  },\n  281: {\n    format: \"jpeg\",\n    width: 4928,\n    height: 3264,\n    filename: \"0281__poRbNNfcE8.jpeg\",\n    id: 281,\n    author: \"Victor Erixon\",\n    author_url: \"https://unsplash.com/@victorerixon\",\n    post_url: \"https://unsplash.com/photos/_poRbNNfcE8\",\n  },\n  282: {\n    format: \"jpeg\",\n    width: 5616,\n    height: 3744,\n    filename: \"0282_9dw0xLlxw1s.jpeg\",\n    id: 282,\n    author: \"Taylor Leopold\",\n    author_url: \"https://unsplash.com/@taylorleopold\",\n    post_url: \"https://unsplash.com/photos/9dw0xLlxw1s\",\n  },\n  283: {\n    format: \"jpeg\",\n    width: 3823,\n    height: 2538,\n    filename: \"0283_GtxZbYMCiPY.jpeg\",\n    id: 283,\n    author: \"Wojtek Witkowski\",\n    author_url: \"https://unsplash.com/@wojtek\",\n    post_url: \"https://unsplash.com/photos/GtxZbYMCiPY\",\n  },\n  284: {\n    format: \"jpeg\",\n    width: 2048,\n    height: 1365,\n    filename: \"0284_MpSnQAUTgcE.jpeg\",\n    id: 284,\n    author: \"Ariana Prestes\",\n    author_url: \"https://unsplash.com/@arianaprestes\",\n    post_url: \"https://unsplash.com/photos/MpSnQAUTgcE\",\n  },\n  287: {\n    format: \"jpeg\",\n    width: 4288,\n    height: 2848,\n    filename: \"0287_c54ZhWDLEDo.jpeg\",\n    id: 287,\n    author: \"Aleksandra Boguslawska\",\n    author_url: \"https://unsplash.com/@aleksandraboguslawska\",\n    post_url: \"https://unsplash.com/photos/c54ZhWDLEDo\",\n  },\n};\n\nconst validIds = Object.keys(IMAGES);\nconst previews = validIds.map((id) => ({\n  src: `https://picsum.photos/id/${id}/100`,\n  id,\n}));\n\nconst Demo: FC = () => {\n  const [state, setState] = useState({ imageId: 277, visible: false });\n  const show = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    const [index] = event.currentTarget.id.split(\"-\").reverse();\n    if (!validIds.includes(index)) {\n      return;\n    }\n\n    setState({ visible: true, imageId: parseInt(index, 10) });\n  };\n  const hide = (): void => {\n    setState((prevState) => ({ ...prevState, visible: false }));\n  };\n\n  const { visible, imageId } = state;\n  const { filename, height, width } = IMAGES[imageId] || {\n    filename: \"\",\n    height: 0,\n    width: 0,\n  };\n  return (\n    <>\n      {previews.map(({ src, id }, i) => (\n        <MediaContainer key={id}>\n          <Button\n            id={`image-preview-${id}`}\n            onClick={show}\n            aria-label={`Show image ${i + 1}`}\n            className={styles.button}\n          >\n            <img src={src} alt=\"\" />\n          </Button>\n        </MediaContainer>\n      ))}\n      <Dialog\n        id=\"image-preview-dialog\"\n        type=\"full-page\"\n        visible={visible}\n        onRequestClose={hide}\n        aria-labelledby=\"dialog-title\"\n      >\n        <AppBar>\n          <AppBarNav onClick={hide} aria-label=\"Close\">\n            <ArrowBackSVGIcon />\n          </AppBarNav>\n          <AppBarTitle id=\"dialog-title\">\n            {`Preview of ${filename}`}\n          </AppBarTitle>\n        </AppBar>\n        <DialogContent>\n          <MediaContainer className={styles.preview}>\n            <img\n              src={`https://picsum.photos/id/${imageId}/${width}/${height}`}\n              alt=\"\"\n            />\n          </MediaContainer>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/AppBarTitle.tsx": {
    "content": "import React, { ReactElement, ReactNode, useCallback, useState } from \"react\";\nimport {\n  AppBarTitle as RMDAppBarTitle,\n  AppBarTitleProps,\n} from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\n\nimport { useId } from \"./IdProvider\";\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nexport default function AppBarTitle({\n  id,\n  children,\n  ...props\n}: AppBarTitleProps): ReactElement {\n  const [tooltip, setTooltip] = useState<ReactNode>(null);\n  const updateTooltip = useCallback(\n    ({ width, scrollWidth }) => {\n      // the `width` is a `DOMRectReadOnly` object which allows for fractional\n      // values while `scrollWidth` is always `Math.ceil` so to be able to\n      // compare correctly, need to also `Math.ceil` the width or use\n      // `target.offsetWidth`\n      const offsetWidth = Math.ceil(width);\n      const isTruncated = offsetWidth < scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    [tooltip, children]\n  );\n  const [, refHandler] = useResizeObserver(updateTooltip, {\n    disableHeight: true,\n  });\n\n  return (\n    <Tooltipped id={useId(id)} tooltip={tooltip}>\n      <RMDAppBarTitle\n        {...props}\n        ref={refHandler}\n        tabIndex={tooltip ? 0 : undefined}\n      >\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n}\n"
  },
  "src/IdProvider.tsx": {
    "content": "import React, {\n  createContext,\n  useContext,\n  useMemo,\n  ReactNode,\n  ReactElement,\n} from \"react\";\nimport createIdGenerator from \"./createIdGenerator\";\n\ntype IdGenerator = ReturnType<typeof createIdGenerator>;\n\nconst context = createContext<IdGenerator>(createIdGenerator(\"autoid\"));\nconst { Provider } = context;\n\nexport function useId(id?: string): string {\n  const generator = useContext(context);\n\n  return useMemo(() => {\n    if (id) {\n      return id;\n    }\n\n    return generator();\n  }, [id, generator]);\n}\n\nexport interface IdProviderProps {\n  prefix?: string;\n  children: ReactNode;\n}\n\nexport function IdProvider({\n  children,\n  prefix = \"autoid\",\n}: IdProviderProps): ReactElement {\n  const value = useMemo(() => createIdGenerator(prefix), [prefix]);\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return (): string => generator.next().value;\n}\n"
  },
  "src/FullPageExample.module.scss": {
    "content": "@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/transition/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n.button {\n  @include rmd-utils-keyboard-only(true) {\n    $start-shadow: none;\n    $end-shadow: inset 0 0 0 2px $rmd-black-base;\n\n    @include rmd-transition-shadow-transition(\n      $start-shadow,\n      $end-shadow,\n      \"&:focus\",\n      false\n    );\n  }\n\n  border-radius: 0;\n  margin: 1rem;\n  overflow: hidden;\n  padding: 0;\n\n  &:focus,\n  &:hover {\n    img {\n      transform: scale(1.25);\n    }\n  }\n\n  img {\n    @include rmd-transition(standard);\n\n    transition: transform 0.15s;\n  }\n}\n\n.preview {\n  @include rmd-app-bar-theme(margin-top, height);\n\n  max-height: calc(100% - #{rmd-app-bar-theme-var(height)});\n}\n"
  }
}

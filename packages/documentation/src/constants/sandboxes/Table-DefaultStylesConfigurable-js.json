{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Table Example - Default Styles Configurable</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n@import \"~@react-md/table/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Table Example - Default Styles Configurable",
      "description": "Example from https://react-md.dev/packages/table/demos#default-styles-configurable",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/states": "latest",
        "@react-md/table": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "import React from \"react\";\n\nimport { Provider, useStylesState } from \"./context\";\nimport StyledTable from \"./StyledTable\";\nimport TableConfiguration from \"./TableConfiguration\";\n\nconst Demo = () => {\n  const value = useStylesState();\n\n  return (\n    <Provider value={value}>\n      <TableConfiguration />\n      <StyledTable />\n    </Provider>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/DefaultStylesConfigurable/context.js": {
    "content": "import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\n\nimport { useAppSize } from \"@react-md/utils\";\n\nconst defaultState = {\n  cols: 3,\n  rows: 5,\n  dense: false,\n  fullWidth: false,\n  container: false,\n  disableHover: false,\n  disableBorders: false,\n  hAlign: \"left\",\n  vAlign: \"middle\",\n  lineWrap: false,\n  row2DisableHover: false,\n  row2DisableBorders: false,\n  col2Grow: false,\n  cellHAlign: \"left\",\n  cellVAlign: \"middle\",\n  cellLineWrap: false,\n};\n\n/**\n * You should probably define forms in a much better way, so I wouldn't\n * recommend following this pattern at all. I mostly wanted to separate\n * the configuration state/logic from the Table components to keep the\n * example simple at first glance and show what different props accomplish.\n */\nexport function useStylesState() {\n  const { isPhone } = useAppSize();\n  const [state, setState] = useState({\n    ...defaultState,\n    // need to force the container on mobile so that Google doesn't complain\n    // that my website isn't mobile friendly with horizontal scrolling\n    container: !isPhone,\n  });\n\n  useEffect(() => {\n    if (isPhone) {\n      setState((prevState) => {\n        if (prevState.container) {\n          return prevState;\n        }\n\n        return { ...prevState, container: true };\n      });\n    }\n  }, [isPhone]);\n\n  /* eslint-disable no-console */\n  const onInputChange = useCallback((event) => {\n    const { name, checked } = event.currentTarget;\n    setState((prevState) => {\n      if (name in prevState) {\n        return {\n          ...prevState,\n          [name]: checked,\n        };\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        console.log(`Unknown form input with name: \"${name}\"`);\n      }\n\n      return prevState;\n    });\n  }, []);\n\n  const onNumberChange = useCallback((event) => {\n    const { name, value } = event.currentTarget;\n    const min = parseInt(event.currentTarget.min, 10);\n    const max = parseInt(event.currentTarget.max, 10);\n    setState((prevState) => {\n      if (name in prevState) {\n        const number = parseInt(value, 10);\n        // happens if the user types a letter instead of a number\n        if (Number.isNaN(number)) {\n          return prevState;\n        }\n\n        return {\n          ...prevState,\n          [name]: Math.min(max, Math.max(min, number)),\n        };\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        console.log(`Unknown form input with name: \"${name}\"`);\n      }\n\n      return prevState;\n    });\n  }, []);\n\n  const onSelectChange = useCallback((nextValue, _option, listbox) => {\n    const { name = \"\" } = listbox;\n    setState((prevState) => {\n      if (name in prevState) {\n        let value = nextValue;\n        if (/linewrap/i.test(name)) {\n          /* eslint-disable no-nested-ternary */\n          value =\n            nextValue === \"true\"\n              ? true\n              : nextValue === \"false\"\n              ? false\n              : nextValue;\n        }\n\n        return {\n          ...prevState,\n          [name]: value,\n        };\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        console.log(`Unknown form input with name: \"${name}\"`);\n      }\n\n      return prevState;\n    });\n  }, []);\n\n  return useMemo(\n    () => ({\n      ...state,\n      onInputChange,\n      onNumberChange,\n      onSelectChange,\n    }),\n    [state, onInputChange, onNumberChange, onSelectChange]\n  );\n}\n\nconst context = createContext({\n  ...defaultState,\n  onInputChange() {\n    throw new Error(\"Provider not mounted\");\n  },\n  onNumberChange() {\n    throw new Error(\"Provider not mounted\");\n  },\n  onSelectChange() {\n    throw new Error(\"Provider not mounted\");\n  },\n});\n\nexport const { Provider } = context;\n\nexport const useDefaultStylesContext = () => useContext(context);\n"
  },
  "src/DefaultStylesConfigurable/StyledTable.jsx": {
    "content": "import React from \"react\";\nimport {\n  Caption,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHeader,\n  TableRow,\n} from \"@react-md/table\";\n\nimport { useDefaultStylesContext } from \"./context\";\nimport styles from \"./StyledTable.module.scss\";\n\nconst Container = ({ container, children }) => {\n  if (!container) {\n    return children;\n  }\n\n  return (\n    <TableContainer className={styles.container}>{children}</TableContainer>\n  );\n};\n\nconst StyledTable = () => {\n  const {\n    rows,\n    cols,\n    container,\n    row2DisableHover,\n    row2DisableBorders,\n    col2Grow,\n    cellHAlign,\n    cellVAlign,\n    cellLineWrap,\n    onInputChange: _onInputChange,\n    onNumberChange: _onNumberChange,\n    onSelectChange: _onSelectChange,\n    ...props\n  } = useDefaultStylesContext();\n\n  const getRowProps = (rowIndex) => {\n    if (rowIndex !== 1) {\n      return undefined;\n    }\n\n    return {\n      disableHover: row2DisableHover,\n      disableBorders: row2DisableBorders,\n    };\n  };\n\n  const getCellProps = (rowIndex, colIndex) => {\n    if (rowIndex !== 0 || colIndex !== 1) {\n      return undefined;\n    }\n\n    return {\n      hAlign: cellHAlign,\n      vAlign: cellVAlign,\n      lineWrap: cellLineWrap,\n    };\n  };\n\n  return (\n    <Container container={container}>\n      <Table {...props} className={styles.table}>\n        <Caption>Configured Table</Caption>\n        <TableHeader>\n          <TableRow>\n            {Array.from({ length: cols }, (_, colIndex) => (\n              <TableCell key={colIndex} grow={col2Grow && colIndex === 1}>\n                {`Header ${colIndex + 1}`}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {Array.from({ length: rows }, (_, rowIndex) => (\n            <TableRow key={rowIndex} {...getRowProps(rowIndex)}>\n              {Array.from({ length: cols }, (_, colIndex) => (\n                <TableCell\n                  key={colIndex}\n                  className={styles.cell}\n                  {...getCellProps(rowIndex, colIndex)}\n                >\n                  {`Cell ${rowIndex + 1}-${colIndex + 1}`}\n                  {colIndex === 1 && \" - This is some additional text.\"}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default StyledTable;\n"
  },
  "src/DefaultStylesConfigurable/StyledTable.module.scss": {
    "content": ".container {\n  max-height: 30rem;\n}\n\n.table {\n  margin-top: 2rem;\n}\n\n.cell:nth-child(2) {\n  max-width: 10rem;\n}\n"
  },
  "src/DefaultStylesConfigurable/TableConfiguration.jsx": {
    "content": "import React from \"react\";\nimport { Checkbox, Fieldset, Select, TextField } from \"@react-md/form\";\n\nimport { Grid } from \"@react-md/utils\";\n\nimport { useDefaultStylesContext } from \"./context\";\nimport styles from \"./TableConfiguration.module.scss\";\n\nconst horizontals = [\"left\", \"center\", \"right\"];\nconst verticals = [\"top\", \"middle\", \"bottom\"];\nconst lineWrapping = [\"true\", \"false\", \"padded\"];\n\nconst TableConfiguration = () => {\n  const {\n    cols,\n    rows,\n    dense,\n    fullWidth,\n    container,\n    lineWrap,\n    disableHover,\n    disableBorders,\n    hAlign,\n    vAlign,\n    row2DisableHover,\n    row2DisableBorders,\n    col2Grow,\n    cellHAlign,\n    cellVAlign,\n    cellLineWrap,\n    onInputChange,\n    onNumberChange,\n    onSelectChange,\n  } = useDefaultStylesContext();\n\n  return (\n    <Grid columns={1} largeDesktopColumns={2}>\n      <Fieldset legend=\"Root Table Options\">\n        <Checkbox\n          id=\"table-grow-col-2\"\n          name=\"col2Grow\"\n          label=\"Apply grow to column 2\"\n          checked={col2Grow}\n          onChange={onInputChange}\n        />\n        <Checkbox\n          id=\"table-dense\"\n          name=\"dense\"\n          label=\"Dense\"\n          checked={dense}\n          onChange={onInputChange}\n        />\n        <Checkbox\n          id=\"table-full-width\"\n          name=\"fullWidth\"\n          label=\"Full Width\"\n          checked={fullWidth}\n          onChange={onInputChange}\n        />\n        <Checkbox\n          id=\"table-container\"\n          name=\"container\"\n          label=\"Use Container\"\n          checked={container}\n          onChange={onInputChange}\n        />\n        <Checkbox\n          id=\"table-disable-hover\"\n          name=\"disableHover\"\n          label=\"Disable Row Hover\"\n          checked={disableHover}\n          onChange={onInputChange}\n        />\n        <Checkbox\n          id=\"table-disable-borders\"\n          name=\"disableBorders\"\n          label=\"Disable Row Borders\"\n          checked={disableBorders}\n          onChange={onInputChange}\n        />\n      </Fieldset>\n      <Grid columns={2} phoneColumns={1} padding={0} className={styles.right}>\n        <TextField\n          id=\"table-cols\"\n          name=\"cols\"\n          type=\"number\"\n          label=\"Columns\"\n          theme=\"underline\"\n          min={2}\n          max={20}\n          value={`${cols}`}\n          onChange={onNumberChange}\n        />\n        <TextField\n          id=\"table-rows\"\n          name=\"rows\"\n          type=\"number\"\n          label=\"Rows\"\n          theme=\"underline\"\n          min={3}\n          max={30}\n          value={`${rows}`}\n          onChange={onNumberChange}\n        />\n        <Select\n          id=\"table-h-align\"\n          name=\"hAlign\"\n          label=\"Horizontal alignment\"\n          options={horizontals}\n          value={hAlign}\n          onChange={onSelectChange}\n        />\n        <Select\n          id=\"table-v-align\"\n          name=\"vAlign\"\n          label=\"Vertical alignment\"\n          options={verticals}\n          value={vAlign}\n          onChange={onSelectChange}\n        />\n        <Select\n          id=\"table-line-wrap\"\n          name=\"lineWrap\"\n          label=\"Line wrap\"\n          options={lineWrapping}\n          value={`${lineWrap}`}\n          onChange={onSelectChange}\n        />\n      </Grid>\n      <Fieldset legend=\"Row 2 Options\">\n        <Checkbox\n          id=\"table-row-2-disable-hover\"\n          name=\"row2DisableHover\"\n          label=\"Disable Hover\"\n          checked={row2DisableHover}\n          onChange={onInputChange}\n        />\n        <Checkbox\n          id=\"table-row-2-disable-borders\"\n          name=\"row2DisableBorders\"\n          label=\"Disable Borders\"\n          checked={row2DisableBorders}\n          onChange={onInputChange}\n        />\n      </Fieldset>\n      <Fieldset legend=\"Cell 1-2 Options\">\n        <Grid columns={2} phoneColumns={1} padding={0} className={styles.right}>\n          <Select\n            id=\"table-cell-h-align\"\n            name=\"cellHAlign\"\n            label=\"Horizontal alignment\"\n            options={horizontals}\n            value={cellHAlign}\n            onChange={onSelectChange}\n          />\n          <Select\n            id=\"table-cell-v-align\"\n            name=\"cellVAlign\"\n            label=\"Vertical alignment\"\n            options={verticals}\n            value={cellVAlign}\n            onChange={onSelectChange}\n          />\n          <Select\n            id=\"table-cell-line-wrap\"\n            name=\"cellLineWrap\"\n            label=\"Line wrap\"\n            options={lineWrapping}\n            value={`${cellLineWrap}`}\n            onChange={onSelectChange}\n          />\n        </Grid>\n      </Fieldset>\n    </Grid>\n  );\n};\n\nexport default TableConfiguration;\n"
  },
  "src/DefaultStylesConfigurable/TableConfiguration.module.scss": {
    "content": ".right {\n  align-self: flex-start;\n  margin-top: 2rem;\n}\n"
  }
}

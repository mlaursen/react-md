{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Form Example - File Input Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/divider/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Form Example - File Input Example",
      "description": "Example from https://react-md.dev/packages/form/demos#file-input-example",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/divider": "latest",
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "import React, { useCallback, useState } from \"react\";\n\nimport { Divider } from \"@react-md/divider\";\nimport {\n  Checkbox,\n  Fieldset,\n  FileInput,\n  Form,\n  Radio,\n  useChecked,\n  useChoice,\n} from \"@react-md/form\";\nimport { SrOnly, Text } from \"@react-md/typography\";\n\nimport styles from \"./FileInputExample.module.scss\";\n\nconst themes = [\"primary\", \"secondary\", \"warning\", \"error\", \"clear\"];\n\nconst themeTypes = [\"flat\", \"outline\", \"contained\"];\n\nconst SimpleFileInputs = () => {\n  const [file, setFile] = useState(\"\");\n  const onChange = useCallback((event) => {\n    const [file] = Array.from(event.currentTarget.files || [null]);\n    if (file) {\n      setFile(file.name);\n    }\n  }, []);\n\n  const [theme, handleThemeChange] = useChoice(\"clear\");\n  const [themeType, handleTypeChange] = useChoice(\"flat\");\n  const [isIcon, handleIconChange] = useChecked(false);\n\n  return (\n    <>\n      <Text type=\"subtitle-1\" margin=\"none\">\n        Last selected file:\n      </Text>\n      <pre>\n        <code>{file || \"None\"}</code>\n      </pre>\n      <Form className={styles.container}>\n        <Fieldset legend=\"Theme\">\n          {themes.map((t) => (\n            <Radio\n              id={`text-theme-${t}`}\n              key={t}\n              name=\"theme\"\n              onChange={handleThemeChange}\n              value={t}\n              checked={theme === t}\n              label={t}\n            />\n          ))}\n        </Fieldset>\n        <Fieldset legend=\"Theme type\">\n          {themeTypes.map((type) => (\n            <Radio\n              id={`text-theme-${type}`}\n              key={type}\n              name=\"type\"\n              onChange={handleTypeChange}\n              value={type}\n              checked={themeType === type}\n              label={type}\n            />\n          ))}\n        </Fieldset>\n        <Checkbox\n          id=\"file-input-icon\"\n          label=\"Icon Button\"\n          name=\"iconButton\"\n          checked={isIcon}\n          onChange={handleIconChange}\n        />\n        <Divider />\n        <FileInput\n          id=\"configurable-file-input\"\n          onChange={onChange}\n          theme={theme}\n          themeType={themeType}\n          buttonType={isIcon ? \"icon\" : \"text\"}\n          disableIconSpacing={isIcon}\n        >\n          {/* the SrOnly for icon buttons is actually the defaultProp value for children */}\n          {isIcon ? <SrOnly>Upload</SrOnly> : \"Upload\"}\n        </FileInput>\n      </Form>\n    </>\n  );\n};\n\nexport default SimpleFileInputs;\n"
  },
  "src/FileInputExample.module.scss": {
    "content": ".container {\n  align-items: flex-start;\n  display: flex;\n  flex-wrap: wrap;\n\n  fieldset {\n    margin: 1rem;\n  }\n}\n"
  }
}

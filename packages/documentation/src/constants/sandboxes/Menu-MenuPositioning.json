{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Menu Example - Menu Positioning</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n@import \"~@react-md/menu/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Menu Example - Menu Positioning",
      "description": "Example from https://react-md.dev/packages/menu/demos#menu-positioning",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/form": "latest",
        "@react-md/icon": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/menu": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "lodash": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, useState } from \"react\";\nimport { upperFirst } from \"lodash\";\nimport { Checkbox, Select, useChecked } from \"@react-md/form\";\nimport { ArrowDropDownSVGIcon } from \"@react-md/material-icons\";\nimport { DropdownMenu } from \"@react-md/menu\";\nimport {\n  ABOVE_CENTER_ANCHOR,\n  ABOVE_INNER_LEFT_ANCHOR,\n  ABOVE_INNER_RIGHT_ANCHOR,\n  ABOVE_LEFT_ANCHOR,\n  ABOVE_RIGHT_ANCHOR,\n  BELOW_CENTER_ANCHOR,\n  BELOW_INNER_LEFT_ANCHOR,\n  BELOW_INNER_RIGHT_ANCHOR,\n  BELOW_LEFT_ANCHOR,\n  BELOW_RIGHT_ANCHOR,\n  BOTTOM_CENTER_ANCHOR,\n  BOTTOM_INNER_LEFT_ANCHOR,\n  BOTTOM_INNER_RIGHT_ANCHOR,\n  BOTTOM_LEFT_ANCHOR,\n  BOTTOM_RIGHT_ANCHOR,\n  CENTER_CENTER_ANCHOR,\n  CENTER_INNER_LEFT_ANCHOR,\n  CENTER_INNER_RIGHT_ANCHOR,\n  CENTER_LEFT_ANCHOR,\n  CENTER_RIGHT_ANCHOR,\n  PositionAnchor,\n  TOP_CENTER_ANCHOR,\n  TOP_INNER_LEFT_ANCHOR,\n  TOP_INNER_RIGHT_ANCHOR,\n  TOP_LEFT_ANCHOR,\n  TOP_RIGHT_ANCHOR,\n} from \"@react-md/utils\";\n\nimport styles from \"./MenuPositioning.module.scss\";\n\nconst anchors = [\n  ABOVE_LEFT_ANCHOR,\n  ABOVE_INNER_LEFT_ANCHOR,\n  ABOVE_CENTER_ANCHOR,\n  ABOVE_INNER_RIGHT_ANCHOR,\n  ABOVE_RIGHT_ANCHOR,\n  TOP_LEFT_ANCHOR,\n  TOP_INNER_LEFT_ANCHOR,\n  TOP_CENTER_ANCHOR,\n  TOP_INNER_RIGHT_ANCHOR,\n  TOP_RIGHT_ANCHOR,\n  CENTER_LEFT_ANCHOR,\n  CENTER_INNER_LEFT_ANCHOR,\n  CENTER_CENTER_ANCHOR,\n  CENTER_INNER_RIGHT_ANCHOR,\n  CENTER_RIGHT_ANCHOR,\n  BOTTOM_LEFT_ANCHOR,\n  BOTTOM_INNER_LEFT_ANCHOR,\n  BOTTOM_CENTER_ANCHOR,\n  BOTTOM_INNER_RIGHT_ANCHOR,\n  BOTTOM_RIGHT_ANCHOR,\n  BELOW_LEFT_ANCHOR,\n  BELOW_INNER_LEFT_ANCHOR,\n  BELOW_CENTER_ANCHOR,\n  BELOW_INNER_RIGHT_ANCHOR,\n  BELOW_RIGHT_ANCHOR,\n];\n\nfunction getLabel({ x, y }: PositionAnchor): string {\n  return `${upperFirst(y)} ${upperFirst(x)} anchor`;\n}\n\nconst options = anchors.map((anchor, index) => ({\n  label: getLabel(anchor),\n  value: `${index}`,\n}));\n\n// don't include all items to better show how the position affects the menu\nconst items = options.slice(0, 5).map(({ label }) => label);\n\nconst Demo: FC = () => {\n  const [anchorIndex, setAnchorIndex] = useState(() =>\n    anchors.findIndex((a) => a === CENTER_CENTER_ANCHOR)\n  );\n  const [equalWidth, handleChange, setEqualWidth] = useChecked(false);\n  const anchor = anchors[anchorIndex];\n  if (anchor.x !== \"center\" && equalWidth) {\n    setEqualWidth(false);\n  }\n\n  return (\n    <>\n      <Select\n        id=\"menu-anchor-select\"\n        label=\"Menu Anchor\"\n        options={options}\n        value={`${anchorIndex}`}\n        onChange={(value) => {\n          const i = parseInt(value, 10);\n          if (!Number.isNaN(i) && i >= 0 && i <= options.length) {\n            setAnchorIndex(i);\n          }\n        }}\n      />\n      <Checkbox\n        id=\"menu-anchor-equal-width\"\n        label=\"Equal Width?\"\n        checked={equalWidth}\n        onChange={handleChange}\n        disabled={anchor.x !== \"center\"}\n      />\n      <DropdownMenu\n        id=\"menu-anchor\"\n        anchor={anchor}\n        items={items}\n        menuLabel=\"Menu\"\n        theme=\"secondary\"\n        themeType=\"contained\"\n        dropdownIcon={<ArrowDropDownSVGIcon className={styles.icon} />}\n        className={styles.button}\n        positionOptions={{ width: equalWidth ? \"equal\" : \"auto\" }}\n      >\n        <span className={styles.text}>Menu</span>\n      </DropdownMenu>\n    </>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/MenuPositioning.module.scss": {
    "content": "@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n.container {\n  display: flex;\n  justify-content: center;\n}\n\n.group {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n}\n\n.button {\n  margin: 1rem auto;\n}\n\n.text {\n  // since the icon is aligned to the end with margin, the default icon spacing can't\n  // be applied as it relies on margin as well. If you apply padding to an icon, the sizing\n  // gets messed up so it's easier to apply it to the text element here. now we have the same\n  // text spacing as before for the largest button.\n  @include rmd-icon-text-spacing($property: padding-right);\n}\n\n.icon {\n  // align the icon to the end since equal width buttons look bad with centered text/icons\n  @include rmd-utils-rtl-auto(margin-left, auto);\n}\n"
  }
}

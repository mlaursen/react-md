{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Utils Example - Simple Grid List</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Utils Example - Simple Grid List",
      "description": "Example from https://react-md.dev/packages/utils/demos#simple-grid-list",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/elevation": "latest",
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/classnames": "latest",
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { Checkbox, Fieldset, TextField, useChecked } from \"@react-md/form\";\nimport { Grid, GridList, GridListCell } from \"@react-md/utils\";\n\nimport useNumberField from \"./useNumberField\";\n\nimport gridStyles from \"./Grid.module.scss\";\nimport styles from \"./SimpleGridList.module.scss\";\n\nconst Demo: FC = () => {\n  const [cells, cellsProps] = useNumberField({\n    defaultValue: 20,\n    min: 0,\n    max: 120,\n  });\n  const [maxCellSize, maxCellSizeProps] = useNumberField({\n    defaultValue: 150,\n    min: 120,\n    max: 300,\n  });\n  const [cellMargin, cellMarginProps] = useNumberField({\n    defaultValue: 8,\n    min: 0,\n    max: 48,\n  });\n\n  const [containerPadding, containerPaddingProps] = useNumberField({\n    defaultValue: 16,\n    min: 0,\n    max: 48,\n  });\n\n  const [restricted, handleRestrictedChange] = useChecked(true);\n\n  return (\n    <>\n      <Fieldset legend=\"GridList options\">\n        <Grid minCellWidth=\"9rem\">\n          <TextField\n            id=\"simple-grid-list-cell-count\"\n            label=\"Number of cells\"\n            {...cellsProps}\n          />\n          <TextField\n            id=\"simple-grid-list-cell-size\"\n            label=\"Max cell width (px)\"\n            {...maxCellSizeProps}\n          />\n          <TextField\n            id=\"simple-grid-list-cell-margin\"\n            label=\"Cell margin (px)\"\n            {...cellMarginProps}\n          />\n          <TextField\n            id=\"simple-grid-list-grid-padding\"\n            label=\"Grid padding (px)\"\n            {...containerPaddingProps}\n          />\n        </Grid>\n        <Checkbox\n          id=\"simple-grid-list-disable-height\"\n          name=\"disableHeight\"\n          label=\"Restrict height\"\n          checked={restricted}\n          onChange={handleRestrictedChange}\n        />\n      </Fieldset>\n      <div\n        className={cn(\n          styles.container,\n          {\n            [styles.restricted]: restricted,\n          },\n          gridStyles.grid\n        )}\n      >\n        <GridList\n          style={{\n            padding: containerPadding > 0 ? containerPadding / 2 : 0,\n          }}\n          cellMargin={`${cellMargin}px`}\n          maxCellSize={maxCellSize}\n          containerPadding={containerPadding}\n        >\n          {Array.from({ length: cells }, (_, i) => (\n            <GridListCell key={i} square className={gridStyles.item}>\n              {`Cell ${i + 1}`}\n            </GridListCell>\n          ))}\n        </GridList>\n      </div>\n    </>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/useNumberField.ts": {
    "content": "import React, { useState, useCallback, useEffect } from \"react\";\n\ntype ChangeEventHandler = React.ChangeEventHandler<HTMLInputElement>;\ninterface Options {\n  defaultValue?: number;\n  onChange?: ChangeEventHandler;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\ntype CurrentValue = number;\n\nexport interface NumberFieldProps {\n  onChange: ChangeEventHandler;\n  value: string;\n  min?: number;\n  max?: number;\n  step?: number;\n  type: \"number\";\n}\n\ntype ReturnValue = [CurrentValue, NumberFieldProps];\n\nfunction withinRange(\n  value: number,\n  min: number | undefined,\n  max: number | undefined\n): number {\n  let nextValue = value;\n  if (typeof min === \"number\") {\n    nextValue = Math.max(min, nextValue);\n  }\n\n  if (typeof max === \"number\") {\n    nextValue = Math.min(max, nextValue);\n  }\n\n  return nextValue;\n}\n\nexport default function useNumberField({\n  defaultValue = 0,\n  onChange,\n  min,\n  max,\n  step,\n}: Options): ReturnValue {\n  const [value, setValue] = useState(() => withinRange(defaultValue, min, max));\n\n  useEffect(() => {\n    const nextValue = withinRange(value, min, max);\n    if (nextValue !== value) {\n      setValue(nextValue);\n    }\n\n    // only want to trigger on min or max changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [min, max]);\n\n  const handleChange = useCallback<ChangeEventHandler>(\n    (event) => {\n      if (onChange) {\n        onChange(event);\n      }\n\n      const currentValue = event.currentTarget.value;\n      let nextValue =\n        typeof step === \"number\" && parseInt(`${step}`, 10) === step\n          ? parseFloat(currentValue)\n          : parseInt(currentValue, 10);\n      if (Number.isNaN(nextValue)) {\n        nextValue = min === 0 || min ? min : value;\n      }\n\n      setValue(withinRange(nextValue, min, max));\n    },\n    [onChange, min, max, step, value]\n  );\n\n  return [\n    value,\n    { onChange: handleChange, value: `${value}`, min, max, type: \"number\" },\n  ];\n}\n"
  },
  "src/Grid.module.scss": {
    "content": "// sass-lint:disable class-name-format\n$rmd-theme-dark-elevation: true;\n\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n.grid {\n  background-color: $rmd-theme-light-background;\n\n  + .grid {\n    margin-top: 1rem;\n  }\n\n  @include rmd-utils-optional-css-modules($rmd-theme-dark-class, true) {\n    background-color: $rmd-theme-dark-background;\n  }\n}\n\n.item {\n  @include rmd-elevation(2);\n  @include rmd-theme-dark-elevation(2, true);\n  @include rmd-theme(background-color, surface);\n  @include rmd-theme(color, text-primary-on-background);\n\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  min-height: 10rem;\n  text-align: center;\n}\n\n.smallGrid {\n  .item {\n    min-height: 3rem;\n  }\n}\n"
  },
  "src/SimpleGridList.module.scss": {
    "content": "@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n\n.container {\n  margin-top: 1rem;\n}\n\n// Why did we wrap the `GridList` component in another div that applies the static height\n// along with scroll functionality instead of just on the `GridList` component itself?\n//\n// If it was on the `GridList` component itself, the grid cells would have additional\n// vertical spacing between each row until the height is reached which looks weird.\n.restricted {\n  @include rmd-utils-scroll;\n\n  height: 20rem;\n}\n"
  }
}

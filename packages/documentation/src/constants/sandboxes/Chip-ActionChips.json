{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Chip Example - Action Chips</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/card/dist/mixins\";\n@import \"~@react-md/divider/dist/mixins\";\n@import \"~@react-md/media/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/sheet/dist/mixins\";\n@import \"~@react-md/chip/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/progress/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/transition/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Chip Example - Action Chips",
      "description": "Example from https://react-md.dev/packages/chip/demos#action-chips",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/card": "latest",
        "@react-md/chip": "latest",
        "@react-md/divider": "latest",
        "@react-md/elevation": "latest",
        "@react-md/icon": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/media": "latest",
        "@react-md/progress": "latest",
        "@react-md/sheet": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/transition": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest",
        "react-transition-group/CSSTransition": "latest"
      },
      "devDependencies": {
        "@types/classnames": "latest",
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardSubtitle,\n  CardTitle,\n} from \"@react-md/card\";\nimport { Divider } from \"@react-md/divider\";\nimport { MediaContainer } from \"@react-md/media\";\n\nimport ActionChipAlarm from \"./ActionChipAlarm\";\nimport ActionChipBlinds from \"./ActionChipBlinds\";\nimport ActionChipLights from \"./ActionChipLights\";\nimport Blinds from \"./Blinds\";\n\nimport styles from \"./ActionChips.module.scss\";\n\nconst width = 240;\nconst height = width * 0.75;\n\nconst Demo: FC = () => {\n  const [blinds, setBlinds] = useState(false);\n  return (\n    <Card id=\"action-chips-card\" className={styles.container}>\n      <MediaContainer fullWidth>\n        <Blinds visible={blinds} />\n        <img src={`https://picsum.photos/id/218/${width}/${height}`} alt=\"\" />\n      </MediaContainer>\n      <CardHeader>\n        <CardTitle noWrap>Welcome Home Person Name!</CardTitle>\n        <CardSubtitle noWrap>Monday 12:30 PM, Mostly Sunny</CardSubtitle>\n      </CardHeader>\n      <Divider />\n      <CardContent className={styles.content} disableExtraPadding>\n        <ActionChipLights />\n        <ActionChipAlarm />\n        <ActionChipBlinds\n          visible={blinds}\n          onClick={() => setBlinds((prevBlinds) => !prevBlinds)}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/ActionChips/ActionChipAlarm.tsx": {
    "content": "import React, { FC, useState } from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { AlarmSVGIcon, CloseSVGIcon } from \"@react-md/material-icons\";\nimport { Sheet } from \"@react-md/sheet\";\n\nimport ActionChip from \"./ActionChip\";\nimport styles from \"./ActionChipAlarm.module.scss\";\n\nconst ActionChipAlarm: FC = () => {\n  const [visible, setVisible] = useState(false);\n  const hide = (): void => setVisible(false);\n\n  return (\n    <>\n      <ActionChip\n        id=\"action-chip-alarm\"\n        leftIcon={<AlarmSVGIcon />}\n        onClick={() => setVisible(true)}\n      >\n        Set Alarm\n      </ActionChip>\n      <Sheet\n        id=\"action-chip-alarm-sheet\"\n        aria-label=\"Alarm\"\n        className={styles.absolute}\n        overlayClassName={styles.absolute}\n        position=\"bottom\"\n        visible={visible}\n        onRequestClose={hide}\n        portalIntoId=\"action-chips-card\"\n        disableScrollLock\n      >\n        <Button\n          id=\"action-chip-alarm-close\"\n          aria-label=\"Close\"\n          buttonType=\"icon\"\n          onClick={hide}\n        >\n          <CloseSVGIcon />\n        </Button>\n      </Sheet>\n    </>\n  );\n};\n\nexport default ActionChipAlarm;\n"
  },
  "src/ActionChips/ActionChip.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { Chip, ChipProps } from \"@react-md/chip\";\n\nimport styles from \"./ActionChip.module.scss\";\n\ninterface ActionChipProps extends ChipProps {\n  yellow?: boolean;\n}\n\nconst ActionChip: FC<ActionChipProps> = ({\n  children,\n  className,\n  theme = \"outline\",\n  yellow = false,\n  ...props\n}) => (\n  <Chip\n    {...props}\n    theme={theme}\n    className={cn(\n      styles.chip,\n      {\n        [styles.yellow]: yellow,\n      },\n      className\n    )}\n  >\n    {children}\n  </Chip>\n);\n\nexport default ActionChip;\n"
  },
  "src/ActionChips/ActionChip.module.scss": {
    "content": "@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/theme/dist/color-palette\";\n\n.chip {\n  margin: 0.25rem;\n}\n\n.yellow {\n  @include rmd-icon-theme-update-var(color, $rmd-yellow-300);\n}\n"
  },
  "src/ActionChips/ActionChipAlarm.module.scss": {
    "content": ".absolute {\n  position: absolute;\n}\n"
  },
  "src/ActionChips/ActionChipBlinds.tsx": {
    "content": "import React, { FC, MouseEventHandler } from \"react\";\nimport { ClearAllSVGIcon } from \"@react-md/material-icons\";\nimport ActionChip from \"./ActionChip\";\n\nexport interface ActionChipBlindsProps {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  visible: boolean;\n}\n\nconst ActionChipBlinds: FC<ActionChipBlindsProps> = ({ onClick, visible }) => (\n  <ActionChip\n    selected={visible}\n    onClick={onClick}\n    leftIcon={<ClearAllSVGIcon />}\n  >\n    Close blinds\n  </ActionChip>\n);\n\nexport default ActionChipBlinds;\n"
  },
  "src/ActionChips/ActionChipLights.tsx": {
    "content": "import React, { FC, useEffect, useState } from \"react\";\nimport {\n  BrightnessHighSVGIcon,\n  BrightnessLowSVGIcon,\n} from \"@react-md/material-icons\";\nimport { CircularProgress, getProgressA11y } from \"@react-md/progress\";\n\nimport { randomInt } from \"../random\";\n\nimport ActionChip from \"./ActionChip\";\n\nconst id = \"action-chip-lights\";\nconst progressId = `${id}-progress`;\n\nconst ActionChipLights: FC = () => {\n  const [enabled, setEnabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!loading) {\n      return;\n    }\n\n    const timeout = window.setTimeout(() => {\n      setLoading(false);\n      setEnabled((prevEnabled) => !prevEnabled);\n    }, randomInt({ min: 3, max: 5 }) * 1000);\n\n    return () => {\n      window.clearTimeout(timeout);\n    };\n  }, [loading]);\n\n  let leftIcon = enabled ? <BrightnessHighSVGIcon /> : <BrightnessLowSVGIcon />;\n  if (loading) {\n    leftIcon = <CircularProgress id={progressId} centered={false} />;\n  }\n\n  return (\n    <ActionChip\n      id={id}\n      {...getProgressA11y(progressId, loading)}\n      leftIcon={leftIcon}\n      selected={enabled}\n      onClick={() => {\n        if (loading) {\n          return;\n        }\n\n        setLoading(!loading);\n      }}\n      yellow={enabled}\n    >\n      Turn on lights\n    </ActionChip>\n  );\n};\n\nexport default ActionChipLights;\n"
  },
  "src/random.ts": {
    "content": "/* eslint-disable import/prefer-default-export */\ninterface RandomInt {\n  min?: number;\n  max?: number;\n}\n\n/**\n * Generates a random integer between a min and max value. Defaults\n * to 0-10.\n */\nexport function randomInt({ min = 0, max = 10 }: RandomInt = {}): number {\n  return Math.floor(Math.random() * max) + min;\n}\n"
  },
  "src/ActionChips/Blinds.tsx": {
    "content": "import React, { FC, useState, useRef } from \"react\";\nimport cn from \"classnames\";\nimport CSSTransition, {\n  CSSTransitionClassNames,\n} from \"react-transition-group/CSSTransition\";\n\nimport Blind from \"./Blind\";\nimport styles from \"./Blinds.module.scss\";\n\ninterface BlindsProps {\n  visible: boolean;\n}\n\nconst CLASSNAMES: CSSTransitionClassNames = {\n  enter: styles.enter,\n  enterActive: cn(styles.entering, styles.animate),\n  exit: styles.exit,\n  exitActive: cn(styles.exiting, styles.animate),\n};\n\nconst Blinds: FC<BlindsProps> = ({ visible }) => {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [exited, setExited] = useState(true);\n  if (visible && exited) {\n    setExited(false);\n  }\n\n  const hide = (): void => setExited(true);\n\n  const isVisible = visible || !exited;\n\n  return (\n    <CSSTransition\n      in={isVisible}\n      nodeRef={ref}\n      mountOnEnter\n      unmountOnExit\n      timeout={1500}\n      classNames={CLASSNAMES}\n    >\n      {(state) => (\n        <div ref={ref} className={styles.blinds}>\n          {Array.from({ length: 11 }, (_, i) => (\n            <Blind\n              key={i}\n              visible={visible && state === \"entered\"}\n              onExited={i === 10 ? hide : undefined}\n            />\n          ))}\n        </div>\n      )}\n    </CSSTransition>\n  );\n};\n\nexport default Blinds;\n"
  },
  "src/ActionChips/Blind.tsx": {
    "content": "import React, { FC, useRef } from \"react\";\nimport cn from \"classnames\";\nimport CSSTransition, {\n  CSSTransitionClassNames,\n} from \"react-transition-group/CSSTransition\";\n\nimport styles from \"./Blind.module.scss\";\n\nexport interface BlindProps {\n  visible: boolean;\n  onExited?(): void;\n}\n\nconst CLASSNAMES: CSSTransitionClassNames = {\n  enter: styles.enter,\n  enterActive: cn(styles.entering, styles.animate),\n  enterDone: styles.done,\n  exit: styles.exit,\n  exitActive: cn(styles.exiting, styles.animate),\n};\n\nconst Blind: FC<BlindProps> = ({ visible, onExited }) => {\n  const ref = useRef<HTMLSpanElement | null>(null);\n\n  return (\n    <CSSTransition\n      nodeRef={ref}\n      timeout={2500}\n      classNames={CLASSNAMES}\n      in={visible}\n      onExited={onExited}\n    >\n      <span ref={ref} className={styles.blind} />\n    </CSSTransition>\n  );\n};\n\nexport default Blind;\n"
  },
  "src/ActionChips/Blind.module.scss": {
    "content": "@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n$blind-height: 1.5rem;\n$blind-margin: 2px;\n$blind-margin-extra: 8px;\n$blind-rotation: 12deg;\n$blind-rotation-extra: 24deg;\n\n.blind {\n  @include rmd-elevation(8);\n\n  background-color: rgba($rmd-white-base, 0.94);\n  flex-shrink: 0;\n  height: $blind-height;\n  margin-bottom: $blind-margin-extra;\n  transform: skewX($blind-rotation-extra);\n  width: 100%;\n}\n\n.animate {\n  @include rmd-transition(standard);\n  $duration: 2s;\n\n  transition: margin-bottom $duration, transform $duration;\n}\n\n.enter {\n  margin-bottom: $blind-margin-extra;\n  transition-delay: 0.5s;\n}\n\n.entering {\n  margin-bottom: $blind-margin;\n  transform: skewX($blind-rotation);\n}\n\n.done {\n  margin-bottom: $blind-margin;\n  transform: skewX($blind-rotation);\n}\n\n.exit {\n  margin-bottom: $blind-margin;\n  transform: skewX($blind-rotation);\n}\n\n.exiting {\n  margin-bottom: $blind-margin-extra;\n  transform: skewX($blind-rotation-extra);\n}\n"
  },
  "src/ActionChips/Blinds.module.scss": {
    "content": "@import \"~@react-md/transition/dist/mixins\";\n\n.blinds {\n  @include rmd-transition(deceleration);\n\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n  position: absolute;\n  transform-origin: top;\n  width: 100%;\n}\n\n.animate {\n  @include rmd-transition(deceleration);\n\n  transition: transform 1.5s;\n}\n\n.enter {\n  transform: scaleY(0);\n}\n\n.entering {\n  transform: scaleY(1);\n}\n\n.exit {\n  transform: scaleY(1);\n}\n\n.exiting {\n  transform: scaleY(0);\n}\n"
  },
  "src/ActionChips/ActionChips.module.scss": {
    "content": "@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n$blind-height: 1.5rem;\n$blind-margin: 2px;\n$blind-margin-extra: 8px;\n$blind-rotation: 12deg;\n$blind-rotation-extra: 24deg;\n\n.container {\n  @include rmd-utils-block-centered;\n  @media screen and (min-width: 23.4375em) {\n    width: 19rem;\n  }\n\n  overflow: hidden;\n  position: relative;\n  width: 15rem;\n}\n\n.content {\n  @include rmd-utils-scroll(x);\n\n  display: flex;\n}\n"
  }
}

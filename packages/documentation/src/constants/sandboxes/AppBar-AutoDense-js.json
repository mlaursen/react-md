{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>AppBar Example - Auto Dense</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "AppBar Example - Auto Dense",
      "description": "Example from https://react-md.dev/packages/app-bar/demos#auto-dense",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/app-bar": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "import React from \"react\";\nimport { AppBar, AppBarNav } from \"@react-md/app-bar\";\nimport { MenuSVGIcon } from \"@react-md/material-icons\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nimport Container from \"./Container\";\nimport styles from \"./AutoDense.module.scss\";\n\nconst Demo = () => (\n  <Container className={styles.container}>\n    <AppBar id=\"auto-dense-app-bar\">\n      <AppBarNav id=\"auto-dense-app-bar-nav\" aria-label=\"Navigation\">\n        <MenuSVGIcon />\n      </AppBarNav>\n      <AppBarTitle>Auto Dense</AppBarTitle>\n    </AppBar>\n    <AppBar\n      id=\"auto-prominent-dense-app-bar\"\n      className={styles.prominent}\n      height=\"prominent\"\n    >\n      <AppBar>\n        <AppBarNav\n          id=\"auto-prominent-dense-app-bar-nav\"\n          aria-label=\"Navigation\"\n        >\n          <MenuSVGIcon />\n        </AppBarNav>\n        <AppBarTitle>Auto Dense and prominent</AppBarTitle>\n      </AppBar>\n    </AppBar>\n  </Container>\n);\n\nexport default Demo;\n"
  },
  "src/AppBarTitle.jsx": {
    "content": "import React, { useCallback, useState } from \"react\";\nimport { AppBarTitle as RMDAppBarTitle } from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\n\nimport { useId } from \"./IdProvider\";\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nexport default function AppBarTitle({ id, children, ...props }) {\n  const [tooltip, setTooltip] = useState(null);\n  const updateTooltip = useCallback(\n    ({ width, scrollWidth }) => {\n      // the `width` is a `DOMRectReadOnly` object which allows for fractional\n      // values while `scrollWidth` is always `Math.ceil` so to be able to\n      // compare correctly, need to also `Math.ceil` the width or use\n      // `target.offsetWidth`\n      const offsetWidth = Math.ceil(width);\n      const isTruncated = offsetWidth < scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    [tooltip, children]\n  );\n\n  const [, refHandler] = useResizeObserver(updateTooltip, {\n    disableHeight: true,\n  });\n\n  return (\n    <Tooltipped id={useId(id)} tooltip={tooltip}>\n      <RMDAppBarTitle\n        {...props}\n        ref={refHandler}\n        tabIndex={tooltip ? 0 : undefined}\n      >\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n}\n"
  },
  "src/IdProvider.jsx": {
    "content": "import React, { createContext, useContext, useMemo } from \"react\";\nimport createIdGenerator from \"./createIdGenerator\";\n\nconst context = createContext(createIdGenerator(\"autoid\"));\nconst { Provider } = context;\n\nexport function useId(id) {\n  const generator = useContext(context);\n\n  return useMemo(() => {\n    if (id) {\n      return id;\n    }\n\n    return generator();\n  }, [id, generator]);\n}\n\nexport function IdProvider({ children, prefix = \"autoid\" }) {\n  const value = useMemo(() => createIdGenerator(prefix), [prefix]);\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"
  },
  "src/createIdGenerator.js": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix) {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return () => generator.next().value;\n}\n"
  },
  "src/Container.jsx": {
    "content": "import React from \"react\";\nimport { Grid } from \"@react-md/utils\";\n\nconst Container = ({ children, ...props }) => (\n  <Grid {...props} clone padding={0} columns={1}>\n    {children}\n  </Grid>\n);\n\nexport default Container;\n"
  },
  "src/AutoDense.module.scss": {
    "content": "@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n.container {\n  @include rmd-utils-desktop-media {\n    @include rmd-app-bar-theme-update-var(\n      height,\n      rmd-app-bar-theme-var(dense-height)\n    );\n\n    .prominent {\n      @include rmd-app-bar-theme-update-var(\n        prominent-height,\n        rmd-app-bar-theme-var(prominent-dense-height)\n      );\n    }\n  }\n}\n\n.prominent {\n  @include rmd-app-bar-theme-update-var(\n    prominent-height,\n    rmd-app-bar-theme-var(prominent-dense-height)\n  );\n\n  // just because I don't want to create 2 rows of data for this example\n  align-items: flex-start;\n}\n"
  }
}

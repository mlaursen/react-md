{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>AppBar Example - Different Sizes</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "AppBar Example - Different Sizes",
      "description": "Example from https://react-md.dev/packages/app-bar/demos#different-sizes",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "latest",
        "@react-md/icon": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBar, AppBarAction, AppBarNav } from \"@react-md/app-bar\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport {\n  ArrowDropDownSVGIcon,\n  MenuSVGIcon,\n  MoreVertSVGIcon,\n  SearchSVGIcon,\n} from \"@react-md/material-icons\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nimport Container from \"./Container\";\n\nconst DenseAppBar: FC = () => (\n  <AppBar height=\"dense\">\n    <AppBarNav aria-label=\"Navigation\" id=\"dense-nav\">\n      <MenuSVGIcon />\n    </AppBarNav>\n    <AppBarTitle>Dense</AppBarTitle>\n    <AppBarAction first aria-label=\"Search\" id=\"dense-search\">\n      <SearchSVGIcon />\n    </AppBarAction>\n    <AppBarAction last aria-label=\"Actions\" id=\"dense-actions\">\n      <MoreVertSVGIcon />\n    </AppBarAction>\n  </AppBar>\n);\n\nconst NormalAppBar: FC = () => (\n  // or add height=\"normal\"\n  <AppBar>\n    <AppBarNav aria-label=\"Navigation\" id=\"normal-nav\">\n      <MenuSVGIcon />\n    </AppBarNav>\n    <AppBarTitle>Dense Prominent</AppBarTitle>\n    <AppBarAction first aria-label=\"Search\" id=\"normal-search\">\n      <SearchSVGIcon />\n    </AppBarAction>\n    <AppBarAction last aria-label=\"Actions\" id=\"normal-actions\">\n      <MoreVertSVGIcon />\n    </AppBarAction>\n  </AppBar>\n);\n\nconst DenseProminentAppBar: FC = () => (\n  <AppBar height=\"prominent-dense\">\n    <AppBar height=\"dense\">\n      <AppBarNav aria-label=\"Navigation\" id=\"dense-prominent-nav\">\n        <MenuSVGIcon />\n      </AppBarNav>\n      <AppBarTitle>Dense</AppBarTitle>\n      <AppBarAction first aria-label=\"Search\" id=\"dense-prominent-search\">\n        <SearchSVGIcon />\n      </AppBarAction>\n      <AppBarAction last aria-label=\"Actions\" id=\"dense-prominent-actions\">\n        <MoreVertSVGIcon />\n      </AppBarAction>\n    </AppBar>\n    <AppBar height=\"dense\">\n      <AppBarTitle keyline>And Prominent!</AppBarTitle>\n      <AppBarAction first buttonType=\"text\" id=\"dense-prominent-new\">\n        <TextIconSpacing icon={<ArrowDropDownSVGIcon />} iconAfter>\n          New...\n        </TextIconSpacing>\n      </AppBarAction>\n    </AppBar>\n  </AppBar>\n);\n\nconst ProminentAppBar: FC = () => (\n  <AppBar height=\"prominent\">\n    <AppBar>\n      <AppBarNav aria-label=\"Navigation\">\n        <MenuSVGIcon />\n      </AppBarNav>\n      <AppBarAction first aria-label=\"Search\">\n        <SearchSVGIcon />\n      </AppBarAction>\n      <AppBarAction last aria-label=\"Actions\" id=\"prominent-actions\">\n        <MoreVertSVGIcon />\n      </AppBarAction>\n    </AppBar>\n    <AppBar>\n      <AppBarTitle keyline>Only Prominent</AppBarTitle>\n      <AppBarAction first buttonType=\"text\" id=\"prominent-new\">\n        <TextIconSpacing icon={<ArrowDropDownSVGIcon />} iconAfter>\n          New...\n        </TextIconSpacing>\n      </AppBarAction>\n    </AppBar>\n  </AppBar>\n);\n\nconst Demo: FC = () => (\n  <Container>\n    <DenseAppBar />\n    <NormalAppBar />\n    <DenseProminentAppBar />\n    <ProminentAppBar />\n  </Container>\n);\n\nexport default Demo;\n"
  },
  "src/AppBarTitle.tsx": {
    "content": "import React, { ReactElement, ReactNode, useCallback, useState } from \"react\";\nimport {\n  AppBarTitle as RMDAppBarTitle,\n  AppBarTitleProps,\n} from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\n\nimport { useId } from \"./IdProvider\";\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nexport default function AppBarTitle({\n  id,\n  children,\n  ...props\n}: AppBarTitleProps): ReactElement {\n  const [tooltip, setTooltip] = useState<ReactNode>(null);\n  const updateTooltip = useCallback(\n    ({ width, scrollWidth }) => {\n      // the `width` is a `DOMRectReadOnly` object which allows for fractional\n      // values while `scrollWidth` is always `Math.ceil` so to be able to\n      // compare correctly, need to also `Math.ceil` the width or use\n      // `target.offsetWidth`\n      const offsetWidth = Math.ceil(width);\n      const isTruncated = offsetWidth < scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    [tooltip, children]\n  );\n  const [, refHandler] = useResizeObserver(updateTooltip, {\n    disableHeight: true,\n  });\n\n  return (\n    <Tooltipped id={useId(id)} tooltip={tooltip}>\n      <RMDAppBarTitle\n        {...props}\n        ref={refHandler}\n        tabIndex={tooltip ? 0 : undefined}\n      >\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n}\n"
  },
  "src/IdProvider.tsx": {
    "content": "import React, {\n  createContext,\n  useContext,\n  useMemo,\n  ReactNode,\n  ReactElement,\n} from \"react\";\nimport createIdGenerator from \"./createIdGenerator\";\n\ntype IdGenerator = ReturnType<typeof createIdGenerator>;\n\nconst context = createContext<IdGenerator>(createIdGenerator(\"autoid\"));\nconst { Provider } = context;\n\nexport function useId(id?: string): string {\n  const generator = useContext(context);\n\n  return useMemo(() => {\n    if (id) {\n      return id;\n    }\n\n    return generator();\n  }, [id, generator]);\n}\n\nexport interface IdProviderProps {\n  prefix?: string;\n  children: ReactNode;\n}\n\nexport function IdProvider({\n  children,\n  prefix = \"autoid\",\n}: IdProviderProps): ReactElement {\n  const value = useMemo(() => createIdGenerator(prefix), [prefix]);\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return (): string => generator.next().value;\n}\n"
  },
  "src/Container.tsx": {
    "content": "import React, { FC, HTMLAttributes } from \"react\";\nimport { Grid } from \"@react-md/utils\";\n\nconst Container: FC<HTMLAttributes<HTMLDivElement>> = ({\n  children,\n  ...props\n}) => (\n  <Grid {...props} clone padding={0} columns={1}>\n    {children}\n  </Grid>\n);\n\nexport default Container;\n"
  }
}

{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Form Example - Text Field Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Form Example - Text Field Example",
      "description": "Example from https://react-md.dev/packages/form/demos#text-field-example",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { TextField } from \"@react-md/form\";\n\nimport TextFieldThemeConfig from \"./TextFieldThemeConfig\";\n\nconst Demo: FC = () => (\n  <TextFieldThemeConfig\n    idPrefix=\"text-field\"\n    renderField={(props) => (\n      <TextField id=\"configurable-text-field\" {...props} />\n    )}\n  />\n);\n\nexport default Demo;\n"
  },
  "src/TextFieldThemeConfig.tsx": {
    "content": "import React, { FC, ReactNode } from \"react\";\nimport {\n  Checkbox,\n  Fieldset,\n  Form,\n  Radio,\n  TextFieldProps,\n  FormTheme,\n  FormThemeProvider,\n  FormUnderlineDirection,\n  useChecked,\n  useChoice,\n  Select,\n  useSelectState,\n} from \"@react-md/form\";\nimport { FavoriteSVGIcon, LocationOnSVGIcon } from \"@react-md/material-icons\";\n\nimport styles from \"./TextFieldThemeConfig.module.scss\";\n\nconst themes: FormTheme[] = [\"none\", \"underline\", \"filled\", \"outline\"];\n\ntype Config = Pick<\n  TextFieldProps,\n  | \"leftChildren\"\n  | \"rightChildren\"\n  | \"dense\"\n  | \"label\"\n  | \"error\"\n  | \"inline\"\n  | \"placeholder\"\n  | \"readOnly\"\n  | \"disabled\"\n>;\n\nexport interface TextFieldThemeProps {\n  idPrefix: string;\n  renderField: (config: Config) => ReactNode;\n  children?: ReactNode;\n  disableDense?: boolean;\n  disableRightIcon?: boolean;\n}\n\n/**\n * This is a small higher-order-component that will provide the themeable props\n * to either a `TextField` or `TextArea` for the two configurable examples.\n */\nconst TextFieldThemeConfig: FC<TextFieldThemeProps> = ({\n  idPrefix,\n  children,\n  renderField,\n  disableDense,\n  disableRightIcon,\n}) => {\n  const [useLeft, handleLeftChange, setLeftIcon] = useChecked(false);\n  const [useRight, handleRightChange, setRightIcon] = useChecked(false);\n  const [dense, handleDenseChange, setDense] = useChecked(false);\n  const [label, handleLabelChange, setLabel] = useChecked(true);\n  const [inline, handleInlineChange] = useChecked(false);\n  const [readOnly, handleReadOnlyChange, setReadOnly] = useChecked(false);\n  const [error, handleErrorChange, setError] = useChecked(false);\n  const [disabled, handleDisabledChange] = useChecked(false);\n  const [underlineDirection, setUnderlineDirection] = useSelectState<\n    FormUnderlineDirection\n  >(\"left\");\n  const [currentTheme, handleThemeChange] = useChoice<FormTheme>(\n    \"outline\",\n    (event) => {\n      // the \"unstyled\" state does not support icons and a label out of the box\n      // and requires additional styling instead\n      if (event.currentTarget.value === \"none\") {\n        setLeftIcon(false);\n        setRightIcon(false);\n        setLabel(false);\n      } else if (!label) {\n        setLabel(true);\n      }\n    }\n  );\n  const isUnstyled = currentTheme === \"none\";\n  if (disabled && error) {\n    setError(false);\n  }\n\n  if (disabled && readOnly) {\n    setReadOnly(false);\n  }\n\n  if (disableDense && dense) {\n    setDense(false);\n  }\n\n  if (disableRightIcon && useRight) {\n    setRightIcon(false);\n  }\n\n  return (\n    <Form className={styles.container}>\n      <Fieldset legend=\"Text field theme\">\n        {themes.map((theme, i) => (\n          <Radio\n            id={`${idPrefix}-theme-${i}`}\n            key={theme}\n            name=\"theme\"\n            onChange={handleThemeChange}\n            value={theme}\n            checked={currentTheme === theme}\n            label={theme}\n          />\n        ))}\n      </Fieldset>\n      <Fieldset legend=\"Text field options\">\n        <Checkbox\n          id={`${idPrefix}-left-icon`}\n          name=\"leftIcon\"\n          label=\"Use left icon\"\n          disabled={isUnstyled}\n          checked={useLeft}\n          onChange={handleLeftChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-right-icon`}\n          name=\"rightIcon\"\n          label=\"Use right icon\"\n          disabled={isUnstyled || disableRightIcon}\n          checked={useRight}\n          onChange={handleRightChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-dense`}\n          name=\"dense\"\n          label=\"Use dense spec\"\n          checked={dense}\n          disabled={disableDense}\n          onChange={handleDenseChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-inline`}\n          name=\"inline\"\n          label=\"Display inline\"\n          checked={inline}\n          onChange={handleInlineChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-label`}\n          name=\"label\"\n          label=\"Use label\"\n          disabled={isUnstyled}\n          checked={label}\n          onChange={handleLabelChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-read-only`}\n          name=\"readOnly\"\n          label=\"Read Only\"\n          checked={readOnly}\n          disabled={disabled}\n          onChange={handleReadOnlyChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-disabled`}\n          name=\"disabled\"\n          label=\"Disabled\"\n          checked={disabled}\n          onChange={handleDisabledChange}\n        />\n        <Checkbox\n          id={`${idPrefix}-error`}\n          name=\"error\"\n          label=\"Error\"\n          disabled={disabled}\n          checked={error}\n          onChange={handleErrorChange}\n        />\n      </Fieldset>\n      <Select\n        id={`${idPrefix}-underline-direction`}\n        label=\"Underline Direction\"\n        name=\"underlineDirection\"\n        value={underlineDirection}\n        onChange={setUnderlineDirection}\n        options={[\"left\", \"center\", \"right\"]}\n        disabled={currentTheme !== \"underline\" && currentTheme !== \"filled\"}\n        className={styles.select}\n      />\n      {children}\n      <div className={styles.demo}>\n        <FormThemeProvider\n          theme={currentTheme}\n          underlineDirection={underlineDirection}\n        >\n          {renderField({\n            label: label && \"Label\",\n            placeholder: \"Placeholder\",\n            dense,\n            inline,\n            readOnly,\n            disabled,\n            error,\n            leftChildren: useLeft && <FavoriteSVGIcon />,\n            rightChildren: useRight && <LocationOnSVGIcon />,\n          })}\n        </FormThemeProvider>\n      </div>\n    </Form>\n  );\n};\n\nexport default TextFieldThemeConfig;\n"
  },
  "src/TextFieldThemeConfig.module.scss": {
    "content": ".container {\n  display: flex;\n  flex-wrap: wrap;\n\n  fieldset {\n    margin: 1rem;\n  }\n}\n\n.select {\n  margin: 1rem;\n  min-width: 11rem;\n}\n\n.demo {\n  margin-top: 4rem;\n  width: 100%;\n}\n"
  }
}

{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>AppBar Example - Fixed With Offset</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "AppBar Example - Fixed With Offset",
      "description": "Example from https://react-md.dev/packages/app-bar/demos#fixed-with-offset",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "latest",
        "@react-md/elevation": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/classnames": "latest",
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport {\n  AppBar,\n  AppBarAction,\n  AppBarNav,\n  APP_BAR_OFFSET_CLASSNAME,\n  APP_BAR_OFFSET_DENSE_CLASSNAME,\n  APP_BAR_OFFSET_PROMINENT_CLASSNAME,\n  APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME,\n  AppBarHeight,\n} from \"@react-md/app-bar\";\nimport {\n  MenuSVGIcon,\n  MoreVertSVGIcon,\n  SearchSVGIcon,\n} from \"@react-md/material-icons\";\nimport { Text, TextContainer } from \"@react-md/typography\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nimport styles from \"./FixedWithOffset.module.scss\";\n\ninterface ExampleProps {\n  height?: AppBarHeight;\n}\n\nconst Example: FC<ExampleProps> = ({ height }) => {\n  const dense = height === \"dense\" || height === \"prominent-dense\";\n  const prominent = height === \"prominent\" || height === \"prominent-dense\";\n  const id = `fixed-with-offset${dense ? \"-dense\" : \"\"}${\n    prominent ? \"-prominent\" : \"\"\n  }`;\n\n  let title = !dense && !prominent ? \"Normal\" : \"\";\n  if (dense) {\n    title = \"Dense\";\n  }\n\n  if (prominent) {\n    title = `${title ? `${title} and ` : \"\"} Prominent`;\n  }\n\n  return (\n    <div id={id} className={styles.container}>\n      <AppBar id={`${id}-bar`} fixed height={height}>\n        <AppBarNav id={`${id}-nav`} aria-label=\"Navigation\">\n          <MenuSVGIcon />\n        </AppBarNav>\n        <AppBarTitle className={styles.title}>{title}</AppBarTitle>\n        <AppBarAction id={`${id}-search`} first aria-label=\"Search\">\n          <SearchSVGIcon />\n        </AppBarAction>\n        <AppBarAction id={`${id}-action`} last aria-label=\"Actions\">\n          <MoreVertSVGIcon />\n        </AppBarAction>\n      </AppBar>\n      <div\n        className={cn(styles.content, {\n          [APP_BAR_OFFSET_CLASSNAME]: !dense && !prominent,\n          [APP_BAR_OFFSET_DENSE_CLASSNAME]: dense && !prominent,\n          [APP_BAR_OFFSET_PROMINENT_CLASSNAME]: !dense && prominent,\n          [APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME]: dense && prominent,\n        })}\n      >\n        <TextContainer size=\"mobile\">\n          <Text type=\"headline-4\">Content!</Text>\n          <Text>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas\n            accumsan, mi eget rutrum ornare, turpis lacus congue dolor, vitae\n            rhoncus orci augue vitae mauris. Curabitur consequat dui nisi.\n            Vestibulum at arcu at leo rhoncus commodo. Sed vel quam non ligula\n            blandit maximus id a nisi. In convallis nulla vitae tincidunt\n            vestibulum. Sed tincidunt vestibulum elit, eu dapibus velit interdum\n            eu. Nullam scelerisque velit in velit commodo, id eleifend urna\n            mollis. Orci varius natoque penatibus et magnis dis parturient\n            montes, nascetur ridiculus mus.\n          </Text>\n          <Text>\n            Duis hendrerit felis ut ante varius, eu faucibus neque maximus.\n            Suspendisse nunc nibh, suscipit non molestie vulputate, vestibulum\n            non lectus. Proin eget purus sollicitudin nunc tristique semper.\n            Mauris sit amet tempus turpis, nec blandit augue. Vestibulum rhoncus\n            dolor vel ex laoreet vulputate. In consequat metus id velit\n            ullamcorper, eget tempor nisi vestibulum. Curabitur egestas\n            ultricies tincidunt.\n          </Text>\n          <Text>\n            Phasellus et mauris tristique, dictum sapien vel, consectetur enim.\n            Maecenas volutpat mi eros, ultrices ultrices est placerat sit amet.\n            Nullam rutrum ipsum a nisi maximus ullamcorper ac eu massa. In\n            finibus mauris at leo porttitor consectetur. Phasellus quam ex,\n            egestas eu diam non, ullamcorper dignissim lorem. Ut cursus nunc nec\n            massa eleifend dignissim. Nullam lorem turpis, dapibus sit amet\n            scelerisque id, volutpat et ipsum. Nulla tristique, lectus vehicula\n            bibendum auctor, sapien ipsum rutrum diam, a tempor quam ligula ac\n            nisi. Nam scelerisque venenatis facilisis. Donec congue porttitor\n            felis vel finibus. Donec eget est metus. Donec vehicula sem elit,\n            sed pharetra nisl eleifend ac. Vestibulum eget dolor in est\n            condimentum consequat.\n          </Text>\n        </TextContainer>\n      </div>\n    </div>\n  );\n};\n\nconst Demo: FC = () => (\n  <>\n    <Example />\n    <Example height=\"dense\" />\n    <Example height=\"prominent\" />\n    <Example height=\"prominent-dense\" />\n  </>\n);\n\nexport default Demo;\n"
  },
  "src/AppBarTitle.tsx": {
    "content": "import React, { ReactElement, ReactNode, useCallback, useState } from \"react\";\nimport {\n  AppBarTitle as RMDAppBarTitle,\n  AppBarTitleProps,\n} from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\n\nimport { useId } from \"./IdProvider\";\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nexport default function AppBarTitle({\n  id,\n  children,\n  ...props\n}: AppBarTitleProps): ReactElement {\n  const [tooltip, setTooltip] = useState<ReactNode>(null);\n  const updateTooltip = useCallback(\n    ({ width, scrollWidth }) => {\n      // the `width` is a `DOMRectReadOnly` object which allows for fractional\n      // values while `scrollWidth` is always `Math.ceil` so to be able to\n      // compare correctly, need to also `Math.ceil` the width or use\n      // `target.offsetWidth`\n      const offsetWidth = Math.ceil(width);\n      const isTruncated = offsetWidth < scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    [tooltip, children]\n  );\n  const [, refHandler] = useResizeObserver(updateTooltip, {\n    disableHeight: true,\n  });\n\n  return (\n    <Tooltipped id={useId(id)} tooltip={tooltip}>\n      <RMDAppBarTitle\n        {...props}\n        ref={refHandler}\n        tabIndex={tooltip ? 0 : undefined}\n      >\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n}\n"
  },
  "src/IdProvider.tsx": {
    "content": "import React, {\n  createContext,\n  useContext,\n  useMemo,\n  ReactNode,\n  ReactElement,\n} from \"react\";\nimport createIdGenerator from \"./createIdGenerator\";\n\ntype IdGenerator = ReturnType<typeof createIdGenerator>;\n\nconst context = createContext<IdGenerator>(createIdGenerator(\"autoid\"));\nconst { Provider } = context;\n\nexport function useId(id?: string): string {\n  const generator = useContext(context);\n\n  return useMemo(() => {\n    if (id) {\n      return id;\n    }\n\n    return generator();\n  }, [id, generator]);\n}\n\nexport interface IdProviderProps {\n  prefix?: string;\n  children: ReactNode;\n}\n\nexport function IdProvider({\n  children,\n  prefix = \"autoid\",\n}: IdProviderProps): ReactElement {\n  const value = useMemo(() => createIdGenerator(prefix), [prefix]);\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return (): string => generator.next().value;\n}\n"
  },
  "src/FixedWithOffset.module.scss": {
    "content": "@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n\n.container {\n  @include rmd-elevation(6);\n  @include rmd-utils-block-centered;\n  @include rmd-utils-phone-media {\n    margin: 2rem 0.5rem;\n    max-width: none;\n  }\n\n  max-width: 20rem;\n  position: relative;\n\n  // this is only required for the demo size if we keep it as `fixed`,\n  // it'll cover the main app bar of this app\n  :global .rmd-app-bar--fixed {\n    position: absolute;\n    z-index: $rmd-app-bar-z-index - 1;\n  }\n\n  // you'd normally wrap these examples in another AppBar to get correct\n  // styling\n  :global .rmd-app-bar--wrap {\n    @include rmd-app-bar-theme(padding-bottom, height);\n  }\n\n  + .container {\n    margin-top: 3rem;\n  }\n}\n\n.title {\n  @include rmd-typography-text-overflow-ellipsis;\n\n  // just a reminder that you don't need to use the `rmd-PACKAGE-theme-var` stuff if\n  // you will have mostly static variables. You can instead use the corresponding\n  // SCSS variable instead. I'm just using them since the documentation site can be\n  // fully configured\n  $offset: $rmd-app-bar-title-keyline + $rmd-app-bar-lr-margin * 2;\n  width: calc(100% - #{$offset} - #{rmd-button-theme-var(icon-size)} * 2);\n}\n\n.content {\n  @include rmd-utils-scroll;\n\n  height: 35rem;\n}\n"
  }
}

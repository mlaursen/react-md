{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Form Example - With React Hook Form</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/dialog/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n@import \"~@react-md/progress/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Form Example - With React Hook Form",
      "description": "Example from https://react-md.dev/packages/form/demos#with-react-hook-form",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/dialog": "latest",
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/progress": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest",
        "react-hook-form": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { ReactElement, useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { Button } from \"@react-md/button\";\nimport { DialogFooter } from \"@react-md/dialog\";\nimport {\n  Checkbox,\n  Fieldset,\n  Form,\n  FormMessage,\n  Radio,\n  Select,\n  Switch,\n  TextField,\n} from \"@react-md/form\";\nimport { CircularProgress } from \"@react-md/progress\";\nimport { useTimeout } from \"@react-md/utils\";\n\ninterface FormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  title: string;\n  developer: \"yes\" | \"no\" | \"\";\n  cool: \"yes\" | \"\";\n  save: \"yes\" | \"\";\n}\n\ninterface State {\n  loading: boolean;\n  data: FormData | null;\n}\n\nconst EMAIL_PATTERN = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\nconst titles = [\"Mr\", \"Mrs\", \"Miss\", \"Dr\", \"Other\"];\n\n/**\n * The entire form is in this single file to keep the example simple, but it is\n * recommended to separate these components or other recommendations from the\n * main react-hook-form documentation: https://react-hook-form.com/\n *\n * Since all of the `react-md` components forward the `ref` prop automatically,\n * all that's required for most form components is using the `Controller`\n * component from `react-hook-form` and initializing the\n * `defaulValue`/`defaultChecked`. The only components that do not follow this\n * pattern are the `Radio` and `Select` components where you'll want to use the\n * `render` prop from the `Controller` instead.\n *\n * The `Radio` component uses the `render` prop since the `error` state doesn't\n * seem to work correctly (might just be because I haven't used this library\n * outside of this demo).\n *\n * The `Select` compoent uses the `render` prop just because of a `Typescript`\n * error that the `value` and `onChange` props are required. Both of those props\n * are injected by the `Controller` component, but using the `render` fixes this\n * compiler error.\n */\nexport default function WithReactHookForm(): ReactElement {\n  const {\n    control,\n    reset,\n    handleSubmit,\n    errors: { firstName, lastName, email, phone, title, developer },\n  } = useForm<FormData>({ mode: \"onChange\" });\n\n  const [{ data, loading }, setState] = useState<State>({\n    loading: false,\n    data: null,\n  });\n\n  const [start] = useTimeout(() => {\n    setState((prevState) => ({ loading: false, data: prevState.data }));\n  }, 10000);\n  useEffect(() => {\n    if (loading) {\n      start();\n    }\n  }, [loading, start]);\n\n  return (\n    <>\n      <Form\n        onReset={() => {\n          setState({ loading: false, data: null });\n          reset({\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            phone: \"\",\n            title: \"\",\n            developer: \"\",\n            cool: \"\",\n            save: \"\",\n          });\n        }}\n        onSubmit={handleSubmit((data) => setState({ data, loading: true }))}\n      >\n        <Controller\n          as={TextField}\n          control={control}\n          rules={{\n            required: \"Required\",\n            maxLength: {\n              value: 10,\n              message: \"Max length is 10\",\n            },\n          }}\n          id=\"rhf-first-name\"\n          aria-describedby=\"rhf-first-name-error\"\n          name=\"firstName\"\n          label=\"First Name\"\n          placeholder=\"John\"\n          defaultValue=\"\"\n          error={!!firstName}\n        />\n        <FormMessage id=\"rh-first-name-error\" error>\n          {firstName?.message}\n        </FormMessage>\n        <Controller\n          as={TextField}\n          control={control}\n          id=\"rhf-last-name\"\n          aria-describedby=\"rhf-last-name-error\"\n          name=\"lastName\"\n          label=\"Last Name\"\n          placeholder=\"Doe\"\n          defaultValue=\"\"\n          error={!!lastName}\n          rules={{\n            required: \"Required\",\n            minLength: {\n              value: 2,\n              message: \"Min length is 2\",\n            },\n          }}\n        />\n        <FormMessage id=\"rh-last-name-error\" error>\n          {lastName?.message}\n        </FormMessage>\n        <Controller\n          as={TextField}\n          control={control}\n          id=\"rhf-email\"\n          aria-describedby=\"rhf-email-error\"\n          name=\"email\"\n          type=\"email\"\n          label=\"Email\"\n          defaultValue=\"\"\n          placeholder=\"john.doe@email.com\"\n          error={!!email}\n          rules={{\n            required: \"Required\",\n            pattern: {\n              value: EMAIL_PATTERN,\n              message: \"Invalid email address\",\n            },\n          }}\n          pattern={EMAIL_PATTERN.source}\n        />\n        <FormMessage id=\"rh-email-error\" error>\n          {email?.message}\n        </FormMessage>\n        <Controller\n          as={TextField}\n          control={control}\n          id=\"rhf-phone\"\n          aria-describedby=\"rhf-phone-error\"\n          name=\"phone\"\n          type=\"tel\"\n          label=\"Mobile Phone\"\n          defaultValue=\"\"\n          placeholder=\"123 4567\"\n          error={!!phone}\n          rules={{\n            required: \"Required\",\n            minLength: {\n              value: 7,\n              message: \"At least 7 characters\",\n            },\n            maxLength: {\n              value: 11,\n              message: \"No more than 11 characters\",\n            },\n          }}\n        />\n        <FormMessage id=\"rh-phone-error\" error>\n          {phone?.message}\n        </FormMessage>\n        <Controller\n          control={control}\n          name=\"title\"\n          defaultValue=\"\"\n          rules={{ required: \"Cannot be blank\" }}\n          render={(props) => (\n            <Select\n              id=\"rhf-title\"\n              aria-describedby=\"rhf-title-error\"\n              {...props}\n              label=\"Title\"\n              placeholder=\"Title\"\n              options={titles}\n              error={!!title}\n            />\n          )}\n        />\n        <FormMessage id=\"rh-title-error\" error>\n          {title?.message}\n        </FormMessage>\n        <Fieldset legend=\"Are you a developer?\">\n          <Controller\n            control={control}\n            name=\"developer\"\n            rules={{ required: \"Required\" }}\n            defaultValue=\"\"\n            defaultChecked={false}\n            render={(props) => (\n              <Radio\n                {...props}\n                id=\"rhf-developer-yes\"\n                label=\"Yes\"\n                error={!!developer}\n                value=\"yes\"\n              />\n            )}\n          />\n          <Controller\n            control={control}\n            name=\"developer\"\n            rules={{ required: \"Required\" }}\n            defaultValue=\"\"\n            defaultChecked={false}\n            render={(props) => (\n              <Radio\n                {...props}\n                id=\"rhf-developer-no\"\n                label=\"No\"\n                error={!!developer}\n                value=\"no\"\n              />\n            )}\n          />\n        </Fieldset>\n        <Controller\n          as={Checkbox}\n          control={control}\n          id=\"rhf-cool\"\n          name=\"cool\"\n          label=\"Are you cool?\"\n          defaultValue=\"\"\n          defaultChecked={false}\n        />\n        <Controller\n          as={Switch}\n          control={control}\n          id=\"rhf-save\"\n          name=\"save\"\n          label=\"Save?\"\n          defaultValue=\"\"\n          defaultChecked\n        />\n        <DialogFooter align=\"end\">\n          <Button\n            id=\"rhf-reset\"\n            type=\"reset\"\n            theme=\"secondary\"\n            themeType=\"outline\"\n          >\n            Reset\n          </Button>\n          <Button\n            id=\"rhf-submit\"\n            type={loading ? \"button\" : \"submit\"}\n            theme={loading ? \"disabled\" : \"primary\"}\n            themeType=\"outline\"\n            aria-label={loading ? \"Submitting\" : undefined}\n          >\n            {loading ? (\n              <CircularProgress id=\"rhf-submit-progress\" centered={false} />\n            ) : (\n              \"Submit\"\n            )}\n          </Button>\n        </DialogFooter>\n      </Form>\n      {data && (\n        <pre>\n          <code>{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      )}\n    </>\n  );\n}\n"
  }
}

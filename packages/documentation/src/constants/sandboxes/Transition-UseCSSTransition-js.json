{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Transition Example - Use C S S Transition</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/transition/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Transition Example - Use C S S Transition",
      "description": "Example from https://react-md.dev/packages/transition/demos#use-c-s-s-transition",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/layout": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/transition": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "import React, { useState } from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { useCSSTransition } from \"@react-md/transition\";\n\nimport Page1 from \"./Page1\";\nimport styles from \"./UseCSSTransition.module.scss\";\n\nconst Demo = () => {\n  const [transitionIn, setTransitionIn] = useState(false);\n  const [rendered, transitionProps] = useCSSTransition({\n    // changing this value causes the transition behavior to change\n    transitionIn,\n    // 5 seconds just for demo purposes... can also be an object\n    timeout: 5000,\n    // can also use a string that gets BEM-ified instead\n    classNames: {\n      enter: styles.enter,\n      enterActive: styles.entering,\n      exit: styles.exit,\n      exitActive: styles.exiting,\n    },\n    // can also trigger the css transition on initial mount\n    // appear: false,\n    // changes the `rendered` value to be false while not transitioning and\n    // `transitionIn` is false\n    temporary: true,\n\n    // an optional className to merge with the transition classNames\n    // className: \"\",\n  });\n\n  return (\n    <>\n      <Button onClick={() => setTransitionIn(!transitionIn)}>Toggle</Button>\n      {rendered && <Page1 {...transitionProps} />}\n    </>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/Page1.jsx": {
    "content": "import React, { forwardRef } from \"react\";\nimport { Text } from \"@react-md/typography\";\n\nexport default forwardRef((props, ref) => (\n  <div {...props} ref={ref}>\n    <Text type=\"headline-4\">Page 1</Text>\n    <Text>\n      Nunc dapibus nec neque vitae aliquam. Phasellus eu luctus tortor. Morbi et\n      massa lectus. Nam nec posuere urna, nec tincidunt ligula. Vestibulum in\n      urna dapibus, rutrum nisi eu, convallis leo. Morbi maximus ultricies metus\n      at venenatis. Nulla tincidunt in enim ac semper. Maecenas at felis eget\n      dui malesuada placerat eu a dui. Vestibulum vel quam egestas turpis\n      commodo euismod ac quis purus.\n    </Text>\n  </div>\n));\n"
  },
  "src/UseCSSTransition.module.scss": {
    "content": "@import \"~@react-md/transition/dist/mixins\";\n\n// just to make it really visible...\n$duration: 5s;\n\n.enter {\n  opacity: 0;\n}\n\n.entering {\n  opacity: 1;\n  transition: opacity $duration;\n}\n\n.exit {\n  opacity: 1;\n}\n\n.exiting {\n  @include rmd-transition(standard);\n\n  opacity: 0;\n  transition: opacity $duration;\n}\n"
  }
}

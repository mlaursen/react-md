{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Table Example - Sortable Columns</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/table/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Table Example - Sortable Columns",
      "description": "Example from https://react-md.dev/packages/table/demos#sortable-columns",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/layout": "latest",
        "@react-md/states": "latest",
        "@react-md/table": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "lodash": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, useState } from \"react\";\nimport { upperFirst } from \"lodash\";\nimport {\n  TableContainer,\n  Table,\n  TableHeader,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@react-md/table\";\nimport desserts, { Dessert } from \"./desserts\";\n\ntype DessertKey = keyof Dessert;\ntype SortOrder = \"ascending\" | \"descending\";\n\ninterface SortState {\n  data: readonly Dessert[];\n  sortKey: DessertKey;\n  sortOrder: SortOrder;\n}\n\nconst columns = Object.keys(desserts[0]) as DessertKey[];\n\n/**\n * A custom sort function for the list of desserts.\n */\nconst sort = (key: DessertKey, ascending: boolean): readonly Dessert[] => {\n  const sorted = desserts.slice();\n  sorted.sort((a, b) => {\n    const aValue = a[key];\n    const bValue = b[key];\n\n    const value =\n      typeof aValue === \"number\"\n        ? aValue - (bValue as number)\n        : aValue.localeCompare(bValue as string);\n\n    return value * (ascending ? 1 : -1);\n  });\n\n  return sorted;\n};\n\nconst Demo: FC = () => {\n  const [state, setState] = useState<SortState>(() => ({\n    data: sort(\"name\", true),\n    sortKey: \"name\",\n    sortOrder: \"ascending\",\n  }));\n\n  const update = (sortKey: DessertKey): void => {\n    setState((prevState) => {\n      const prevSortKey = prevState.sortKey;\n      const prevSortOrder = prevState.sortOrder;\n\n      let sortOrder: SortOrder;\n      if (sortKey === prevSortKey) {\n        // it's the same column, so toggle the sort order\n        sortOrder = prevSortOrder === \"ascending\" ? \"descending\" : \"ascending\";\n      } else {\n        // it's a new column to sort by, so default to ascending for the name column\n        // but descending for all the rest.\n        sortOrder = sortKey === \"name\" ? \"ascending\" : \"descending\";\n      }\n\n      return {\n        data: sort(sortKey, sortOrder === \"ascending\"),\n        sortKey,\n        sortOrder,\n      };\n    });\n  };\n\n  const { data, sortKey, sortOrder } = state;\n  return (\n    <TableContainer>\n      <Table fullWidth>\n        <TableHeader>\n          <TableRow>\n            {columns.map((name) => (\n              <TableCell\n                key={name}\n                aria-sort={name === sortKey ? sortOrder : \"none\"}\n                onClick={() => update(name)}\n              >\n                {upperFirst(name)}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {data.map((dessert) => (\n            <TableRow key={dessert.name}>\n              {columns.map((key) => (\n                <TableCell\n                  key={key}\n                  grow={key === \"name\"}\n                  hAlign={\n                    typeof dessert[key] === \"number\" ? \"right\" : undefined\n                  }\n                >\n                  {dessert[key]}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/desserts.ts": {
    "content": "export interface Dessert {\n  name: string;\n  calories: number;\n  fat: number;\n  carbs: number;\n  protein: number;\n  sodium: number;\n  calcium: number;\n  iron: number;\n  type: \"Ice cream\" | \"Pastry\" | \"Other\";\n}\n\nconst desserts: readonly Dessert[] = [\n  {\n    name: \"Frozen yogurt\",\n    type: \"Ice cream\",\n    calories: 159,\n    fat: 6.0,\n    carbs: 24,\n    protein: 4.0,\n    sodium: 87,\n    calcium: 14,\n    iron: 1,\n  },\n  {\n    name: \"Ice cream sandwhich\",\n    type: \"Ice cream\",\n    calories: 237,\n    fat: 9.0,\n    carbs: 37,\n    protein: 4.3,\n    sodium: 129,\n    calcium: 8,\n    iron: 1,\n  },\n  {\n    name: \"Eclair\",\n    type: \"Pastry\",\n    calories: 262,\n    fat: 16.0,\n    carbs: 37,\n    protein: 6.0,\n    sodium: 337,\n    calcium: 6,\n    iron: 7,\n  },\n  {\n    name: \"Cupcake\",\n    type: \"Pastry\",\n    calories: 305,\n    fat: 3.7,\n    carbs: 67,\n    protein: 4.3,\n    sodium: 413,\n    calcium: 3,\n    iron: 8,\n  },\n  {\n    name: \"Gingerbread\",\n    type: \"Pastry\",\n    calories: 356,\n    fat: 16.0,\n    carbs: 49,\n    protein: 3.9,\n    sodium: 327,\n    calcium: 7,\n    iron: 16,\n  },\n  {\n    name: \"Jelly bean\",\n    type: \"Other\",\n    calories: 375,\n    fat: 0.0,\n    carbs: 94,\n    protein: 0.0,\n    sodium: 50,\n    calcium: 0,\n    iron: 0,\n  },\n  {\n    name: \"Lollipop\",\n    type: \"Other\",\n    calories: 392,\n    fat: 0.2,\n    carbs: 98,\n    protein: 0.0,\n    sodium: 38,\n    calcium: 0,\n    iron: 2,\n  },\n  {\n    name: \"Honeycomb\",\n    type: \"Other\",\n    calories: 408,\n    fat: 3.2,\n    carbs: 87,\n    protein: 6.5,\n    sodium: 562,\n    calcium: 0,\n    iron: 45,\n  },\n  {\n    name: \"Donut\",\n    type: \"Pastry\",\n    calories: 52,\n    fat: 25.0,\n    carbs: 51,\n    protein: 4.9,\n    sodium: 326,\n    calcium: 2,\n    iron: 22,\n  },\n  {\n    name: \"KitKat\",\n    type: \"Other\",\n    calories: 16,\n    fat: 6.0,\n    carbs: 65,\n    protein: 7.0,\n    sodium: 54,\n    calcium: 12,\n    iron: 6,\n  },\n];\n\nexport default desserts;\n"
  }
}

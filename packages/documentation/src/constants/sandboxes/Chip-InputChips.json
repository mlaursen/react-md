{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Chip Example - Input Chips</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/divider/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/dialog/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/sheet/dist/mixins\";\n@import \"~@react-md/avatar/dist/mixins\";\n@import \"~@react-md/chip/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Chip Example - Input Chips",
      "description": "Example from https://react-md.dev/packages/chip/demos#input-chips",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "latest",
        "@react-md/autocomplete": "latest",
        "@react-md/avatar": "latest",
        "@react-md/button": "latest",
        "@react-md/chip": "latest",
        "@react-md/dialog": "latest",
        "@react-md/divider": "latest",
        "@react-md/elevation": "latest",
        "@react-md/form": "latest",
        "@react-md/icon": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/sheet": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/classnames": "latest",
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { Divider } from \"@react-md/divider\";\nimport { TextArea, TextField, FormThemeProvider } from \"@react-md/form\";\nimport { useIsUserInteractionMode } from \"@react-md/utils\";\n\nimport Phone from \"./Phone\";\n\nimport styles from \"./InputChips.module.scss\";\n\nimport To from \"./To\";\n\nconst Demo: FC = () => {\n  const isTouch = useIsUserInteractionMode(\"touch\");\n  return (\n    <FormThemeProvider theme=\"none\">\n      <Phone\n        id=\"input-chips\"\n        statusBar\n        contentClassName={styles.container}\n        disableFocusOnMount={isTouch}\n      >\n        <To />\n        <Divider />\n        <TextField\n          id=\"input-chips-subject\"\n          name=\"subject\"\n          inputClassName={styles.padded}\n          placeholder=\"Subject\"\n          defaultValue=\"Re: Vacation Request\"\n        />\n        <Divider />\n        <TextArea\n          id=\"input-chips-message\"\n          placeholder=\"Message\"\n          className={styles.message}\n          areaClassName={styles.padded}\n          resize=\"none\"\n        />\n      </Phone>\n    </FormThemeProvider>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/Phone/Phone.tsx": {
    "content": "import React, { FC, ReactNode, useMemo, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport {\n  APP_BAR_OFFSET_DENSE_CLASSNAME,\n  APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME,\n} from \"@react-md/app-bar\";\nimport { useAppSize, useToggle, PhoneOnly } from \"@react-md/utils\";\n\nimport ConditionalFullPageDialog, {\n  ConditionalFullPageDialogProps,\n} from \"../ConditionalFullPageDialog\";\n\nimport { PhoneContext } from \"./context\";\nimport DefaultAppBar from \"./DefaultAppBar\";\nimport StatusBar from \"./StatusBar\";\nimport ClosePhone from \"./ClosePhone\";\n\nimport styles from \"./Phone.module.scss\";\n\nexport interface PhoneConfiguration {\n  /**\n   * An optional app bar to use within the phone. This should normally contain the `ClosePhone`\n   * component so that it can be hidden on mobile devices when the full page dialog is used.\n   */\n  appBar?: ReactNode;\n\n  /**\n   * The title to use for the phone. This will be passed down into the phone context so it can\n   * be grabbed anywhere.\n   */\n  title?: ReactNode;\n\n  /**\n   * A class name to apply to the fake phone's content element.\n   */\n  contentClassName?: string;\n\n  /**\n   * Boolean if the phone's content should gain the stacked styles which update\n   * the content to be display flex and flex-direction column. THis is great\n   * when creating a custom app bar that isn't fixed to the top with position\n   * fixed.\n   */\n  contentStacked?: boolean;\n\n  /**\n   * Boolean if the phone's app bar should be prominent. This is used to add the\n   * required offset class names to the content element.\n   */\n  prominent?: boolean;\n\n  /**\n   * Boolean if the `children` should always be forced to have the fab offset\n   * class even when not being emulated\n   */\n  fabOffset?: boolean;\n}\n\nexport interface PhoneProps\n  extends PhoneConfiguration,\n    Pick<\n      ConditionalFullPageDialogProps,\n      \"disableAppBar\" | \"disableContent\" | \"disableFocusOnMount\"\n    > {\n  /**\n   * An id for the phone. This is required for accessibility and quickly linking\n   * to things.\n   */\n  id: string;\n\n  /**\n   * The content to display. This will conditionally render in a full page\n   * dialog.\n   */\n  children: ReactNode;\n\n  /**\n   * A class name to apply to the fake phone's container element.\n   */\n  className?: string;\n\n  /**\n   * An optional function to call when the dialog is closed. This is useful if\n   * the demo should be reset when the full page dialog is closed.\n   */\n  onPhoneClose?: () => void;\n\n  /**\n   * Boolean if the `appBar` should only render a status bar.\n   */\n  statusBar?: boolean;\n}\n\nconst DEFAULT_APP_BAR = <DefaultAppBar />;\n\nconst Phone: FC<PhoneProps> = ({\n  id,\n  title = \"Example\",\n  children,\n  appBar = DEFAULT_APP_BAR,\n  className,\n  contentClassName,\n  contentStacked: stacked = false,\n  prominent,\n  disableAppBar = false,\n  disableContent = false,\n  disableFocusOnMount = false,\n  onPhoneClose,\n  statusBar = false,\n}) => {\n  const { isPhone } = useAppSize();\n  const [visible, enable, disable] = useToggle(false);\n  const closePhone = useCallback(() => {\n    disable();\n    if (onPhoneClose) {\n      onPhoneClose();\n    }\n  }, [onPhoneClose, disable]);\n\n  if (visible && !isPhone) {\n    closePhone();\n  }\n\n  const value = useMemo(\n    () => ({\n      id,\n      title,\n      closePhone,\n    }),\n    [id, title, closePhone]\n  );\n\n  return (\n    <PhoneContext.Provider value={value}>\n      <ConditionalFullPageDialog\n        id={id}\n        disabled={!isPhone}\n        enable={enable}\n        disable={closePhone}\n        visible={visible}\n        disableAppBar={disableAppBar || statusBar}\n        disableContent={disableContent}\n        disableFocusOnMount={disableFocusOnMount}\n      >\n        <div\n          id={`${id}-phone`}\n          className={cn(\n            styles.phone,\n            styles.fabOffset,\n            {\n              [styles.emulated]: !isPhone,\n            },\n            className\n          )}\n        >\n          {(statusBar && <StatusBar id={id} isPhone={isPhone} />) || appBar}\n          <div\n            id={`${id}-content`}\n            className={cn(\n              styles.content,\n              {\n                [styles.flexColumn]: stacked,\n                [APP_BAR_OFFSET_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone,\n                [APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone && prominent,\n              },\n              contentClassName\n            )}\n          >\n            {children}\n            {statusBar && (\n              <PhoneOnly>\n                <ClosePhone floating />\n              </PhoneOnly>\n            )}\n          </div>\n        </div>\n      </ConditionalFullPageDialog>\n    </PhoneContext.Provider>\n  );\n};\n\nexport default Phone;\n"
  },
  "src/ConditionalFullPageDialog.tsx": {
    "content": "import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { AppBar, AppBarAction } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport { Dialog, DialogContent, DialogProps } from \"@react-md/dialog\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { CloseSVGIcon, LaunchSVGIcon } from \"@react-md/material-icons\";\nimport { Text } from \"@react-md/typography\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\ntype AllowedDialogProps = Omit<\n  DialogProps,\n  \"aria-label\" | \"aria-labelledby\" | \"onRequestClose\" | \"title\"\n>;\n\nexport interface ConditionalFullPageDialogProps extends AllowedDialogProps {\n  title?: ReactNode;\n  children: ReactElement;\n  enable: () => void;\n  disable: () => void;\n  disabled?: boolean;\n  disableAppBar?: boolean;\n  disableContent?: boolean;\n  disableFocusOnMount?: boolean;\n}\n\nconst ConditionalFullPageDialog: FC<ConditionalFullPageDialogProps> = ({\n  id,\n  title = \"Full Page Demo\",\n  children,\n  enable,\n  disable,\n  visible,\n  disabled = false,\n  disableAppBar = false,\n  disableContent = false,\n  disableFocusOnMount = false,\n  ...props\n}) => {\n  if (disabled) {\n    return children;\n  }\n\n  return (\n    <>\n      <Text type=\"headline-6\">\n        This example requires a more screen real estate than what is available\n        so you will need to open it in a full page dialog.\n      </Text>\n      <Button\n        id={`${id}-dialog-toggle`}\n        themeType=\"contained\"\n        onClick={enable}\n        theme=\"primary\"\n      >\n        <TextIconSpacing icon={<LaunchSVGIcon />}>Launch</TextIconSpacing>\n      </Button>\n      <Dialog\n        {...props}\n        id={`${id}-dialog`}\n        aria-labelledby={`${id}-dialog-title`}\n        visible={visible}\n        onRequestClose={disable}\n        type=\"full-page\"\n        disableFocusContainer={disableFocusOnMount}\n      >\n        {!disableAppBar && (\n          <AppBar>\n            <AppBarTitle keyline id={`${id}-dialog-title`}>\n              {title}\n            </AppBarTitle>\n            <AppBarAction first aria-label=\"Close\" onClick={disable}>\n              <CloseSVGIcon />\n            </AppBarAction>\n          </AppBar>\n        )}\n        {disableContent ? (\n          children\n        ) : (\n          <DialogContent disablePadding>{children}</DialogContent>\n        )}\n      </Dialog>\n    </>\n  );\n};\n\nexport default ConditionalFullPageDialog;\n"
  },
  "src/AppBarTitle.tsx": {
    "content": "import React, { ReactElement, ReactNode, useCallback, useState } from \"react\";\nimport {\n  AppBarTitle as RMDAppBarTitle,\n  AppBarTitleProps,\n} from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\n\nimport { useId } from \"./IdProvider\";\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nexport default function AppBarTitle({\n  id,\n  children,\n  ...props\n}: AppBarTitleProps): ReactElement {\n  const [tooltip, setTooltip] = useState<ReactNode>(null);\n  const updateTooltip = useCallback(\n    ({ width, scrollWidth }) => {\n      // the `width` is a `DOMRectReadOnly` object which allows for fractional\n      // values while `scrollWidth` is always `Math.ceil` so to be able to\n      // compare correctly, need to also `Math.ceil` the width or use\n      // `target.offsetWidth`\n      const offsetWidth = Math.ceil(width);\n      const isTruncated = offsetWidth < scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    [tooltip, children]\n  );\n  const [, refHandler] = useResizeObserver(updateTooltip, {\n    disableHeight: true,\n  });\n\n  return (\n    <Tooltipped id={useId(id)} tooltip={tooltip}>\n      <RMDAppBarTitle\n        {...props}\n        ref={refHandler}\n        tabIndex={tooltip ? 0 : undefined}\n      >\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n}\n"
  },
  "src/IdProvider.tsx": {
    "content": "import React, {\n  createContext,\n  useContext,\n  useMemo,\n  ReactNode,\n  ReactElement,\n} from \"react\";\nimport createIdGenerator from \"./createIdGenerator\";\n\ntype IdGenerator = ReturnType<typeof createIdGenerator>;\n\nconst context = createContext<IdGenerator>(createIdGenerator(\"autoid\"));\nconst { Provider } = context;\n\nexport function useId(id?: string): string {\n  const generator = useContext(context);\n\n  return useMemo(() => {\n    if (id) {\n      return id;\n    }\n\n    return generator();\n  }, [id, generator]);\n}\n\nexport interface IdProviderProps {\n  prefix?: string;\n  children: ReactNode;\n}\n\nexport function IdProvider({\n  children,\n  prefix = \"autoid\",\n}: IdProviderProps): ReactElement {\n  const value = useMemo(() => createIdGenerator(prefix), [prefix]);\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return (): string => generator.next().value;\n}\n"
  },
  "src/Phone/context.ts": {
    "content": "import { createContext, ReactNode, useContext } from \"react\";\n\ninterface PhoneContextType {\n  id: string;\n  title: ReactNode;\n  closePhone: () => void;\n}\n\nexport const PhoneContext = createContext<PhoneContextType>({\n  id: \"\",\n  title: \"Example\",\n  closePhone: () => {},\n});\n\nexport function usePhoneContext(): PhoneContextType {\n  return useContext(PhoneContext);\n}\n"
  },
  "src/Phone/DefaultAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\n\nimport AppBarTitle from \"../AppBarTitle\";\n\nimport ClosePhone from \"./ClosePhone\";\nimport { usePhoneContext } from \"./context\";\nimport OptionsAction from \"./OptionsAction\";\nimport PhoneAppBar from \"./PhoneAppBar\";\nimport SearchAction from \"./SearchAction\";\n\nconst DefaultPhoneAppBar: FC = () => {\n  const { title } = usePhoneContext();\n  return (\n    <PhoneAppBar>\n      <AppBar component=\"div\" theme=\"clear\">\n        <ClosePhone />\n        <AppBarTitle>{title}</AppBarTitle>\n        <SearchAction />\n        <OptionsAction />\n      </AppBar>\n    </PhoneAppBar>\n  );\n};\n\nexport default DefaultPhoneAppBar;\n"
  },
  "src/Phone/ClosePhone.tsx": {
    "content": "import React, { FC, useCallback } from \"react\";\nimport { AppBarNav, AppBarNavProps } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport {\n  KeyboardArrowLeftSVGIcon,\n  CloseSVGIcon,\n} from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\ninterface Props extends Omit<AppBarNavProps, \"floating\"> {\n  floating?: boolean;\n}\n\nconst ClosePhone: FC<Props> = ({\n  id,\n  children,\n  onClick,\n  floating,\n  ...props\n}) => {\n  const { id: phoneId, closePhone } = usePhoneContext();\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      closePhone();\n    },\n    [onClick, closePhone]\n  );\n\n  const sharedProps = {\n    ...props,\n    id: id ?? `${phoneId ?? \"demo\"}-close`,\n    onClick: handleClick,\n    children: floating ? <CloseSVGIcon /> : children,\n  };\n\n  if (floating) {\n    return <Button {...sharedProps} floating=\"bottom-right\" />;\n  }\n\n  return <AppBarNav {...sharedProps} />;\n};\n\nClosePhone.defaultProps = {\n  \"aria-label\": \"Go back\",\n  children: <KeyboardArrowLeftSVGIcon />,\n  floating: false,\n};\n\nexport default ClosePhone;\n"
  },
  "src/Phone/OptionsAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { MoreVertSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst OptionsAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-options`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nOptionsAction.defaultProps = {\n  \"aria-label\": \"Options\",\n  children: <MoreVertSVGIcon />,\n  last: true,\n};\n\nexport default OptionsAction;\n"
  },
  "src/Phone/PhoneAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { AppBar, AppBarProps } from \"@react-md/app-bar\";\nimport { useAppSize } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\nimport StatusBar from \"./StatusBar\";\n\nimport styles from \"./Phone.module.scss\";\n\nconst PhoneAppBar: FC<AppBarProps> = ({\n  className,\n  children,\n  height: propHeight,\n  ...props\n}) => {\n  const { id } = usePhoneContext();\n  const { isPhone } = useAppSize();\n\n  let height = propHeight ?? (isPhone ? \"normal\" : \"dense\");\n  if (!isPhone && height === \"prominent\") {\n    // I don't have automatic dense spec in css for this since it makes demos\n    // difficult, so have to do it in js\n    height = \"prominent-dense\";\n  }\n\n  return (\n    <AppBar\n      {...props}\n      id={`${id}-app-bar`}\n      className={cn(styles.header, className)}\n      height={height}\n      fixed\n      fixedElevation={false}\n    >\n      <StatusBar id={id} isPhone={isPhone} />\n      {children}\n    </AppBar>\n  );\n};\n\nPhoneAppBar.defaultProps = {\n  theme: \"default\",\n};\n\nexport default PhoneAppBar;\n"
  },
  "src/Phone/StatusBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport cn from \"classnames\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport {\n  NetworkWifiSVGIcon,\n  NetworkCellSVGIcon,\n  BatteryFullSVGIcon,\n} from \"@react-md/material-icons\";\n\nimport styles from \"./StatusBar.module.scss\";\n\nexport interface StatusBarProps {\n  id: string;\n  isPhone: boolean;\n}\n\nconst StatusBar: FC<StatusBarProps> = ({ id, isPhone }) => {\n  if (isPhone) {\n    return null;\n  }\n\n  return (\n    <AppBar\n      id={`${id}-status-bar`}\n      className={styles.container}\n      height=\"dense\"\n      theme=\"clear\"\n      component=\"div\"\n    >\n      <NetworkWifiSVGIcon\n        role=\"presentation\"\n        className={cn(styles.icon, styles.first)}\n      />\n      <NetworkCellSVGIcon role=\"presentation\" className={styles.icon} />\n      <BatteryFullSVGIcon role=\"presentation\" className={styles.icon} />\n    </AppBar>\n  );\n};\n\nexport default StatusBar;\n"
  },
  "src/Phone/StatusBar.module.scss": {
    "content": "@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n\n.container {\n  @include rmd-app-bar-theme-update-var(dense-height, rmd-icon-theme-var(size));\n  background-color: rgba($rmd-black-base, 0.12);\n\n  width: 100%;\n}\n\n.icon {\n  @include rmd-icon-dense-theme;\n\n  margin: 0 $rmd-app-bar-lr-margin;\n}\n\n.first {\n  @include rmd-utils-rtl-auto(margin-left, auto, $rmd-app-bar-lr-margin);\n}\n"
  },
  "src/Phone/Phone.module.scss": {
    "content": "// sass-lint:disable class-name-format\n$rmd-theme-dark-elevation: true;\n\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/sheet/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n$phone-height: 35.5rem;\n$phone-width: 20rem;\n\n$fixed-classes: (\n  rmd-app-bar--fixed: 1,\n  rmd-sheet-overlay: 1,\n  rmd-sheet--raised: 2,\n  rmd-fab: 1,\n);\n\n.phone {\n  height: 100%;\n}\n\n.fabOffset {\n  :global .rmd-fab--tl,\n  :global .rmd-fab--tr {\n    top: $rmd-app-bar-height + $rmd-button-floating-margin + $rmd-icon-size;\n  }\n}\n\n.emulated {\n  @include rmd-elevation(4);\n  @include rmd-theme-dark-elevation(4, true);\n  @include rmd-utils-block-centered(1rem);\n  @include rmd-theme(background-color, background);\n  @include rmd-icon-theme-update-var(size, $rmd-icon-size);\n  @include rmd-app-bar-theme-update-var(height, $rmd-app-bar-height);\n  @include rmd-app-bar-theme-update-var(\n    dense-height,\n    $rmd-app-bar-height + $rmd-icon-size\n  );\n  @include rmd-app-bar-theme-update-var(\n    prominent-dense-height,\n    $rmd-app-bar-prominent-height + $rmd-icon-size\n  );\n  @include rmd-sheet-theme-update-var(\n    touch-width,\n    calc(100% - #{$rmd-sheet-touch-margin})\n  );\n  @include rmd-typography-theme-update-var(\n    line-width,\n    $rmd-typography-mobile-max-line-length\n  );\n\n  height: $phone-height;\n  overflow: hidden;\n  position: relative;\n  width: $phone-width;\n\n  @each $fixed-class, $z-index in $fixed-classes {\n    :global .#{$fixed-class} {\n      position: absolute;\n      z-index: $z-index;\n    }\n  }\n\n  .header {\n    // updated the shadow to be bottom only\n    box-shadow: 0 3px 2px -3px rgba($rmd-black-base, 0.2),\n      0 2px 2px -2px rgba($rmd-black-base, 0.14),\n      0 1px 5px -1px rgba($rmd-black-base, 0.12);\n  }\n}\n\n.header {\n  flex-wrap: wrap;\n}\n\n.content {\n  @include rmd-utils-scroll;\n\n  height: 100%;\n}\n\n.flexColumn {\n  display: flex;\n  flex-direction: column;\n}\n"
  },
  "src/Phone/SearchAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { SearchSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst SearchAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-search`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nSearchAction.defaultProps = {\n  \"aria-label\": \"Search\",\n  children: <SearchSVGIcon />,\n  first: true,\n};\n\nexport default SearchAction;\n"
  },
  "src/InputChips/InputChips.module.scss": {
    "content": "$padding: 1rem;\n\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\n.padded {\n  padding: $padding;\n}\n\n.message {\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding: 0;\n}\n"
  },
  "src/InputChips/To.tsx": {
    "content": "import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  AutoComplete,\n  AutoCompleteHandler,\n  AutoCompleteData,\n} from \"@react-md/autocomplete\";\nimport { Avatar } from \"@react-md/avatar\";\nimport { Chip } from \"@react-md/chip\";\nimport { Label } from \"@react-md/form\";\nimport { AddCircleSVGIcon } from \"@react-md/material-icons\";\nimport { BELOW_INNER_LEFT_ANCHOR } from \"@react-md/utils\";\n\nimport contacts, { Contact } from \"./contacts\";\nimport styles from \"./To.module.scss\";\n\nconst To: FC = () => {\n  const [chips, setChips] = useState<Contact[]>([]);\n  const data = useMemo<(AutoCompleteData & { label: string })[]>(\n    () =>\n      contacts\n        .filter(({ id }) => !chips.find((chip) => chip.id === id))\n        .map(({ name, avatar, email }) => ({\n          label: name,\n          leftAddon: (\n            <Avatar>\n              <img src={avatar} alt=\"\" />\n            </Avatar>\n          ),\n          leftAddonType: \"avatar\",\n          secondaryText: email,\n        })),\n    [chips]\n  );\n\n  const onAutoComplete = useCallback<AutoCompleteHandler>((result) => {\n    const item = result.result as typeof data[0];\n    const contact = contacts.find(({ name }) => item.label === name);\n    if (!contact) {\n      throw new Error();\n    }\n    setChips((prevChips) => [...prevChips, contact]);\n  }, []);\n\n  const emailsRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    const div = emailsRef.current;\n    if (div) {\n      div.scrollLeft = div.scrollWidth;\n    }\n  }, [chips]);\n  return (\n    <div className={styles.container}>\n      <Label htmlFor=\"input-chips-email\" className={styles.spacing}>\n        To\n      </Label>\n      <div className={styles.emails} ref={emailsRef}>\n        {chips.map(({ id, name, avatar }) => (\n          <Chip\n            key={id}\n            leftIcon={\n              <Avatar>\n                <img src={avatar} alt=\"\" />\n              </Avatar>\n            }\n            rightIcon={<AddCircleSVGIcon className={styles.rotate} />}\n            className={styles.spacing}\n            onClick={() =>\n              setChips((prevChips) =>\n                prevChips.filter((chip) => chip.id !== id)\n              )\n            }\n          >\n            {name}\n          </Chip>\n        ))}\n        <AutoComplete\n          id=\"input-chips-email\"\n          placeholder=\"Email\"\n          valueKey=\"label\"\n          data={data}\n          listboxWidth=\"auto\"\n          anchor={BELOW_INNER_LEFT_ANCHOR}\n          className={styles.email}\n          inline\n          highlight\n          clearOnAutoComplete\n          onAutoComplete={onAutoComplete}\n          vhMargin={0}\n          vwMargin={0}\n          disableSwapping\n          listboxClassName={styles.listbox}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default To;\n"
  },
  "src/InputChips/contacts.ts": {
    "content": "import people from \"../people\";\nimport createIdGenerator from \"../createIdGenerator\";\n\nconst guid = createIdGenerator(\"input-chips-contact\");\n\nexport interface Contact {\n  id: string;\n  name: string;\n  email: string;\n  avatar: string;\n}\n\nconst contacts: Contact[] = Array.from(people, (name, i) => ({\n  id: guid(),\n  name,\n  email: `${name.toLowerCase().replace(/\\s|-/g, \"\")}@email.com`,\n  avatar: `https://i.pravatar.cc/40?img=${i}`,\n}));\n\nexport default contacts;\n"
  },
  "src/people.ts": {
    "content": "export default [\n  \"Jasmine Robinson\",\n  \"Devonte Craig\",\n  \"Dean Reid\",\n  \"Shaquille Bauer\",\n  \"Vivian Bishop\",\n  \"Braden Mullins\",\n  \"Katlyn Mcdonald\",\n  \"Isabella Marshall\",\n  \"Lee Christensen\",\n  \"Tommy Hogan\",\n  \"Timothy Harvey\",\n  \"Preston Phillips\",\n  \"Marco Sherman\",\n  \"Haley Coleman\",\n  \"Mario Swanson\",\n  \"Xavier Solis\",\n  \"Keaton Cannon\",\n  \"Cassandra Austin\",\n  \"Irene Holland\",\n  \"Gustavo Love\",\n  \"Meghan Stewart\",\n  \"Renee Townsend\",\n  \"Bobby Newman\",\n  \"Keaton Ortiz\",\n  \"Dustin Wells\",\n  \"Jerry Mcgee\",\n  \"Carl Howard\",\n  \"Sabrina Lang\",\n  \"Reed Baker\",\n  \"Kristen Fields\",\n  \"Gavin Carrillo\",\n  \"Claudia Neal\",\n  \"Leonard Schneider\",\n  \"Dominick Boyd\",\n  \"Mary Hampton\",\n  \"Mark Ayala\",\n  \"Kristina Warner\",\n  \"Antonio Walton\",\n  \"Tyson Scott\",\n  \"Harley Moss\",\n] as const;\n"
  },
  "src/InputChips/To.module.scss": {
    "content": "@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n$spacing: 0.5rem;\n$padding: 1rem;\n\n.container {\n  align-items: center;\n  display: flex;\n  padding: 0 $padding;\n  width: 100%;\n}\n\n.emails {\n  @include rmd-utils-scroll(x);\n\n  align-items: center;\n  display: flex;\n  flex: 1 1 auto;\n  justify-content: flex-start;\n}\n\n.spacing {\n  @include rmd-utils-rtl-auto(margin-right, $spacing);\n}\n\n.email {\n  flex-grow: 1;\n  min-width: 5rem;\n}\n\n.rotate {\n  transform: rotate(45deg);\n}\n\n// all the importans are really just required to override the useFixedPositioning styles\n// that aren't configurable right now that have to be changed for the hacky phone \"emulation\"\n// sass-lint:disable no-important\n.listbox {\n  @include rmd-utils-tablet-media {\n    bottom: auto !important;\n    max-height: 30rem;\n    position: absolute !important;\n\n    // status bar height + autocomplete height\n    top: calc(#{rmd-icon-theme-var(size)} + 3.5rem) !important;\n  }\n\n  left: 0 !important;\n  right: 0 !important;\n}\n"
  }
}

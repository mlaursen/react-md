{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@{{RMD_VERSION}}/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Progress Example - Within Buttons</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/card/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/progress/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Progress Example - Within Buttons",
      "description": "Example from https://react-md.dev/packages/progress/demos#within-buttons",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/card": "latest",
        "@react-md/icon": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/progress": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, ReactNode } from \"react\";\nimport { Text } from \"@react-md/typography\";\n\nimport AsyncButton, { AsyncButtonProps } from \"./AsyncButton\";\nimport Container from \"./Container\";\nimport useTemporaryToggle from \"./useTemporaryToggle\";\n\ninterface ExampleProps extends Pick<AsyncButtonProps, \"id\" | \"asyncType\"> {\n  children: ReactNode;\n}\n\nconst Example: FC<ExampleProps> = ({ children, ...props }) => {\n  const { toggled, toggle } = useTemporaryToggle();\n\n  return (\n    <Container>\n      <Text type=\"headline-6\" margin=\"none\">\n        {children}\n      </Text>\n      <AsyncButton {...props} onClick={toggle} loading={toggled} />\n      <AsyncButton\n        {...props}\n        themeType=\"outline\"\n        onClick={toggle}\n        loading={toggled}\n      />\n      <AsyncButton\n        {...props}\n        themeType=\"contained\"\n        onClick={toggle}\n        loading={toggled}\n      />\n    </Container>\n  );\n};\n\nconst Demo: FC = () => (\n  <>\n    <Example id=\"async-button-1\" asyncType=\"icon-before\">\n      Circular Before\n    </Example>\n    <Example id=\"async-button-2\" asyncType=\"icon-after\">\n      Circular After\n    </Example>\n    <Example id=\"async-button-3\" asyncType=\"circular-overlay\">\n      Circular Overlay\n    </Example>\n    <Example id=\"async-button-4\" asyncType=\"linear-overlay\">\n      Linear Overlay\n    </Example>\n  </>\n);\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/AsyncButton.module.scss": {
    "content": "@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/card/dist/variables\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/progress/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n$rmd-theme-dark-elevation: true;\n\n.button {\n  @include rmd-progress-theme-update-var(\n    circular-size,\n    rmd-icon-theme-var(size)\n  );\n\n  // just to make the demos look a bit nicer\n  margin: 1rem;\n  // this makes it so the linear progress doesn't expand past the button bounds\n  overflow: hidden;\n}\n\n.overlay {\n  // you'll really want this to be the `background` value or whatever the current\n  // background is instead. You'll probably also want to add additional styles for\n  // maintaining the \"containted\" styles since the contained button turns into\n  // an \"unstyled\" button when disabled\n  @include rmd-theme(background-color, surface);\n  @include rmd-utils-full-screen(absolute);\n  @include rmd-theme-dark-elevation($rmd-card-elevation, true);\n\n  align-items: center;\n  border-radius: inherit;\n  box-shadow: inherit;\n  display: flex;\n  justify-content: center;\n  z-index: 1;\n}\n\n.linear {\n  top: auto;\n}\n",
    "isBinary": false
  },
  "src/AsyncButton.tsx": {
    "content": "import React, { ReactElement, ReactNode } from \"react\";\nimport cn from \"classnames\";\nimport { Button, ButtonProps } from \"@react-md/button\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { CloudDownloadSVGIcon } from \"@react-md/material-icons\";\nimport {\n  CircularProgress,\n  getProgressA11y,\n  LinearProgress,\n} from \"@react-md/progress\";\n\nimport styles from \"./AsyncButton.module.scss\";\n\nexport interface AsyncButtonProps extends ButtonProps {\n  id: string;\n  loading?: boolean;\n  asyncType:\n    | \"circular-overlay\"\n    | \"linear-overlay\"\n    | \"icon-before\"\n    | \"icon-after\";\n}\n\nexport default function AsyncButton({\n  id,\n  loading = false,\n  asyncType,\n  onClick,\n  ...props\n}: AsyncButtonProps): ReactElement {\n  const progressId = `${id}-progress`;\n  const linear = asyncType === \"linear-overlay\";\n  let children: ReactNode = null;\n  switch (asyncType) {\n    case \"icon-before\":\n    case \"icon-after\":\n      children = (\n        <TextIconSpacing\n          iconAfter={asyncType === \"icon-after\"}\n          icon={\n            loading ? (\n              <CircularProgress id={progressId} centered={false} />\n            ) : (\n              <CloudDownloadSVGIcon />\n            )\n          }\n        >\n          Download\n        </TextIconSpacing>\n      );\n      break;\n    case \"circular-overlay\":\n    case \"linear-overlay\":\n      children = (\n        <>\n          <TextIconSpacing icon={<CloudDownloadSVGIcon />}>\n            {loading ? \"Loading...\" : \"Download\"}\n          </TextIconSpacing>\n          {loading && (\n            <span\n              className={cn(styles.overlay, {\n                [styles.linear]: linear,\n              })}\n            >\n              {linear ? (\n                <LinearProgress id={progressId} />\n              ) : (\n                <CircularProgress id={progressId} />\n              )}\n            </span>\n          )}\n        </>\n      );\n    // no default\n  }\n  return (\n    <Button\n      {...props}\n      id={id}\n      className={styles.button}\n      {...getProgressA11y(progressId, loading)}\n      theme={loading ? \"disabled\" : \"primary\"}\n      onClick={onClick}\n    >\n      {children}\n    </Button>\n  );\n}\n",
    "isBinary": false
  },
  "src/Container.module.scss": {
    "content": ".container {\n  margin: 1rem;\n}\n\n.inline {\n  display: inline-block;\n}\n",
    "isBinary": false
  },
  "src/Container.tsx": {
    "content": "import React, { FC, HTMLAttributes } from \"react\";\nimport cn from \"classnames\";\n\nimport styles from \"./Container.module.scss\";\n\ninterface ContainerProps extends HTMLAttributes<HTMLDivElement> {\n  inline?: boolean;\n}\n\nconst Container: FC<ContainerProps> = ({\n  className,\n  children,\n  inline,\n  ...props\n}) => {\n  return (\n    <div\n      {...props}\n      className={cn(\n        styles.container,\n        {\n          [styles.inline]: inline,\n        },\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Container;\n",
    "isBinary": false
  },
  "src/useTemporaryToggle.ts": {
    "content": "import { useEffect } from \"react\";\nimport { useToggle } from \"@react-md/utils\";\n\nconst TEN_SECONDS = 10000;\n\ninterface ReturnValue {\n  toggle: () => void;\n  toggled: boolean;\n  disable: () => void;\n}\n\nexport default function useTemporaryToggle(\n  duration: number = TEN_SECONDS\n): ReturnValue {\n  const [toggled, , disable, toggle] = useToggle(false);\n  useEffect(() => {\n    let timeout: number | undefined = window.setTimeout(() => {\n      timeout = undefined;\n      disable();\n    }, duration);\n\n    return () => window.clearTimeout(timeout);\n  }, [toggled, disable, duration]);\n\n  return { toggle, toggled, disable };\n}\n",
    "isBinary": false
  }
}

{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Transition Example - Fixed Positioning Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/form/dist/mixins\";\n@import \"~@react-md/overlay/dist/mixins\";\n@import \"~@react-md/transition/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Transition Example - Fixed Positioning Example",
      "description": "Example from https://react-md.dev/packages/transition/demos#fixed-positioning-example",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/button": "latest",
        "@react-md/elevation": "latest",
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/overlay": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/transition": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest",
        "react-transition-group/CSSTransition": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "/* eslint-disable @typescript-eslint/no-non-null-assertion */\n// disabled the no-non-null-assertions since the refs are guarenteed to not be\n// null by the time of running and this will eventually be re-written once I\n// updated the `@react-md/transition` package for the new `nodeRef` API\nimport React, { useCallback, useRef, useState } from \"react\";\nimport CSSTransition from \"react-transition-group/CSSTransition\";\nimport { Button } from \"@react-md/button\";\nimport { Checkbox, Fieldset, Form, Select, useChecked } from \"@react-md/form\";\nimport { ArrowDropDownSVGIcon } from \"@react-md/material-icons\";\nimport { Overlay } from \"@react-md/overlay\";\nimport { useFixedPositioning } from \"@react-md/transition\";\nimport { Text } from \"@react-md/typography\";\nimport { useToggle } from \"@react-md/utils\";\n\nimport styles from \"./FixedPositioningExample.module.scss\";\n\nconst horizontals = [\"left\", \"right\", \"center\", \"inner-left\", \"inner-right\"];\n\nconst verticals = [\"above\", \"below\", \"center\", \"top\", \"bottom\"];\n\nconst widths = [\"auto\", \"equal\", \"min\"];\n\nconst anchors = horizontals.reduce((value, x) => {\n  verticals.forEach((y) => {\n    value[`${x} ${y}`] = { x, y };\n  });\n\n  return value;\n}, {});\n\nconst anchorOptions = Object.entries(anchors).map(([value, anchor]) => ({\n  ...anchor,\n  label: value,\n  value,\n}));\n\nconst CENTERED_ANCHOR = anchorOptions.find(\n  (anchor) => anchor.label === \"center center\"\n);\n\nconst CLASSNAMES = {\n  appear: styles.enter,\n  appearActive: styles.entering,\n  enter: styles.enter,\n  enterActive: styles.entering,\n  exit: styles.exit,\n  exitActive: styles.exiting,\n};\n\nconst Demo = () => {\n  const [visible, show, hide] = useToggle(false);\n  const buttonRef = useRef(null);\n  const divRef = useRef(null);\n  const [disableSwapping, handleSwapCange] = useChecked(false);\n  const [transformOrigin, handleOriginChange] = useChecked(false);\n  const [hideOnScroll, handleScrollChange] = useChecked(true);\n  const [hideOnResize, handleScrollResize] = useChecked(true);\n  const [anchor, setAnchor] = useState(anchorOptions[0]);\n  const handleAnchorChange = useCallback((_value, anchor) => {\n    setAnchor(anchor);\n  }, []);\n\n  const [width, setWidth] = useState(\"auto\");\n  const handleWidthChange = useCallback((nextWidth) => {\n    setAnchor(CENTERED_ANCHOR);\n    setWidth(nextWidth);\n  }, []);\n\n  const {\n    style,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExited,\n  } = useFixedPositioning({\n    fixedTo: buttonRef.current,\n    anchor: { x: anchor.x, y: anchor.y },\n    width,\n    transformOrigin,\n    disableSwapping,\n    onScroll(_event, { fixedTo: button }) {\n      if (hideOnScroll) {\n        hide();\n        return;\n      }\n\n      if (!button) {\n        return;\n      }\n      // hide when the button isn't in the viewport anymore if the\n      // hideOnScroll behavior is disabled\n      const { top } = button.getBoundingClientRect();\n      if (top < 0 || top > window.innerHeight) {\n        hide();\n      }\n    },\n    onResize(_event) {\n      if (hideOnResize) {\n        hide();\n      }\n    },\n  });\n\n  return (\n    <>\n      <Form className={styles.form}>\n        <Fieldset legend=\"Fixed Positioning Options\">\n          <Checkbox\n            id=\"fixed-swap\"\n            name=\"options\"\n            label=\"Disable Swapping\"\n            checked={disableSwapping}\n            onChange={handleSwapCange}\n          />\n          <Checkbox\n            id=\"fixed-origin\"\n            name=\"options\"\n            label=\"Transform Origin\"\n            checked={transformOrigin}\n            onChange={handleOriginChange}\n          />\n          <Checkbox\n            id=\"fixed-hide-on-scroll\"\n            name=\"options\"\n            label=\"Hide on scroll\"\n            checked={hideOnScroll}\n            onChange={handleScrollChange}\n          />\n          <Checkbox\n            id=\"fixed-hide-on-resize\"\n            name=\"options\"\n            label=\"Hide on resize\"\n            checked={hideOnResize}\n            onChange={handleScrollResize}\n          />\n        </Fieldset>\n        <Select\n          id=\"fixed-anchor-type\"\n          label=\"Anchor\"\n          className={styles.select}\n          listboxClassName={styles.listbox}\n          inline\n          options={anchorOptions}\n          value={anchor.value}\n          onChange={handleAnchorChange}\n          rightChildren={<ArrowDropDownSVGIcon />}\n          listboxWidth=\"min\"\n          isOptionDisabled={(option) => {\n            const opt = option;\n            return width !== \"auto\" && !opt.value.startsWith(\"center\");\n          }}\n        />\n        <Select\n          id=\"fixed-anchor-width\"\n          label=\"Fixed element width\"\n          className={styles.select}\n          inline\n          options={widths}\n          value={width}\n          onChange={handleWidthChange}\n          rightChildren={<ArrowDropDownSVGIcon />}\n        />\n        <div className={styles.footer}>\n          <Button\n            id=\"fixed-positioning-button\"\n            ref={buttonRef}\n            onClick={show}\n            theme=\"primary\"\n            themeType=\"contained\"\n            type=\"submit\"\n          >\n            Toggle\n          </Button>\n        </div>\n      </Form>\n      <Overlay\n        id=\"fixed-positioning-overlay\"\n        onRequestClose={hide}\n        hidden\n        visible={visible}\n      />\n      <CSSTransition\n        in={visible}\n        nodeRef={divRef}\n        mountOnEnter\n        unmountOnExit\n        classNames={CLASSNAMES}\n        timeout={{ enter: 200, exit: 150 }}\n        onEnter={(isAppearing) => onEnter(divRef.current, isAppearing)}\n        onEntering={(isAppearing) => onEntering(divRef.current, isAppearing)}\n        onEntered={(isAppearing) => onEntered(divRef.current, isAppearing)}\n        onExited={() => onExited(divRef.current)}\n      >\n        <div\n          id=\"fixed-position-div\"\n          ref={divRef}\n          style={style}\n          className={styles.div}\n        >\n          <Text>This is some amazing text in a fixed element!</Text>\n        </div>\n      </CSSTransition>\n    </>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/FixedPositioningExample.module.scss": {
    "content": "@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/overlay/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/transition/dist/mixins\";\n\n.form {\n  display: flex;\n  flex-wrap: wrap;\n\n  fieldset {\n    margin: 1rem;\n  }\n}\n\n.select {\n  margin: 1rem;\n  width: 10rem;\n}\n\n.listbox {\n  max-height: 25rem;\n}\n\n.footer {\n  display: flex;\n  justify-content: center;\n  margin: 1rem;\n  width: 100%;\n}\n\n.div {\n  @include rmd-elevation(2);\n  @include rmd-theme(background-color, surface);\n\n  padding: 1rem;\n  z-index: $rmd-overlay-z-index + 1;\n}\n\n.enter {\n  transform: scale(0);\n}\n\n.entering {\n  @include rmd-transition(deceleration);\n\n  transform: scale(1);\n  transition: transform 0.2s;\n}\n\n.exit {\n  @include rmd-transition(acceleration);\n\n  opacity: 1;\n  transform: scale(1);\n  transition: transform 0.15s, opacity 0.15s;\n}\n\n.exiting {\n  opacity: 0;\n  transform: scale(0);\n}\n"
  }
}

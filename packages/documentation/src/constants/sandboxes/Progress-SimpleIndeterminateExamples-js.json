{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>Progress Example - Simple Indeterminate Examples</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/progress/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/dialog/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/sheet/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "Progress Example - Simple Indeterminate Examples",
      "description": "Example from https://react-md.dev/packages/progress/demos#simple-indeterminate-examples",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/app-bar": "latest",
        "@react-md/button": "latest",
        "@react-md/dialog": "latest",
        "@react-md/elevation": "latest",
        "@react-md/icon": "latest",
        "@react-md/layout": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/progress": "latest",
        "@react-md/sheet": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "classnames": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/classnames": "latest",
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "import React from \"react\";\nimport { Button } from \"@react-md/button\";\nimport {\n  CircularProgress,\n  getProgressA11y,\n  LinearProgress,\n} from \"@react-md/progress\";\n\nimport Phone from \"./Phone\";\n\nimport useTemporaryToggle from \"./useTemporaryToggle\";\nimport styles from \"./SimpleDeterminateExamples.module.scss\";\n\nconst Demo = () => {\n  const {\n    toggled: linearVisible,\n    toggle: toggleLinear,\n    disable: disableLinear,\n  } = useTemporaryToggle();\n  const {\n    toggled: circularVisible,\n    toggle: toggleCircular,\n    disable: disableCircular,\n  } = useTemporaryToggle();\n\n  return (\n    <>\n      <Phone id=\"simple-linear\" title=\"Linear\" onPhoneClose={disableLinear}>\n        {linearVisible && <LinearProgress id=\"simple-linear-progress\" />}\n        <Button\n          id=\"show-linear-progress\"\n          {...getProgressA11y(\"simple-linear-progress\", circularVisible)}\n          onClick={toggleLinear}\n          theme=\"primary\"\n          themeType=\"contained\"\n          className={styles.button}\n          disabled={linearVisible}\n        >\n          Toggle Progress\n        </Button>\n      </Phone>\n      <Phone\n        id=\"simple-circular\"\n        title=\"Circular\"\n        onPhoneClose={disableCircular}\n      >\n        {circularVisible && <CircularProgress id=\"simple-circular-progress\" />}\n        <Button\n          id=\"show-circular-progress\"\n          {...getProgressA11y(\"simple-circular-progress\", circularVisible)}\n          onClick={toggleCircular}\n          theme=\"primary\"\n          themeType=\"contained\"\n          className={styles.button}\n          disabled={circularVisible}\n        >\n          Toggle Progress\n        </Button>\n      </Phone>\n    </>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/Phone/index.js": {
    "content": "export { default } from \"./Phone\";\nexport { default as DefaultAppBar } from \"./DefaultAppBar\";\nexport { default as PhoneAppBar } from \"./PhoneAppBar\";\nexport { default as ClosePhone } from \"./ClosePhone\";\nexport { default as OptionsAction } from \"./OptionsAction\";\nexport { default as SearchAction } from \"./SearchAction\";\nexport * from \"./context\";\n"
  },
  "src/Phone/Phone.jsx": {
    "content": "import React, { useMemo, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport {\n  APP_BAR_OFFSET_DENSE_CLASSNAME,\n  APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME,\n} from \"@react-md/app-bar\";\nimport { useAppSize, useToggle, PhoneOnly } from \"@react-md/utils\";\n\nimport ConditionalFullPageDialog from \"../ConditionalFullPageDialog\";\n\nimport { PhoneContext } from \"./context\";\nimport DefaultAppBar from \"./DefaultAppBar\";\nimport StatusBar from \"./StatusBar\";\nimport ClosePhone from \"./ClosePhone\";\n\nimport styles from \"./Phone.module.scss\";\n\nconst DEFAULT_APP_BAR = <DefaultAppBar />;\n\nconst Phone = ({\n  id,\n  title = \"Example\",\n  children,\n  appBar = DEFAULT_APP_BAR,\n  className,\n  contentClassName,\n  contentStacked: stacked = false,\n  prominent,\n  disableAppBar = false,\n  disableContent = false,\n  disableFocusOnMount = false,\n  onPhoneClose,\n  statusBar = false,\n}) => {\n  const { isPhone } = useAppSize();\n  const [visible, enable, disable] = useToggle(false);\n  const closePhone = useCallback(() => {\n    disable();\n    if (onPhoneClose) {\n      onPhoneClose();\n    }\n  }, [onPhoneClose, disable]);\n\n  if (visible && !isPhone) {\n    closePhone();\n  }\n\n  const value = useMemo(\n    () => ({\n      id,\n      title,\n      closePhone,\n    }),\n    [id, title, closePhone]\n  );\n\n  return (\n    <PhoneContext.Provider value={value}>\n      <ConditionalFullPageDialog\n        id={id}\n        disabled={!isPhone}\n        enable={enable}\n        disable={closePhone}\n        visible={visible}\n        disableAppBar={disableAppBar || statusBar}\n        disableContent={disableContent}\n        disableFocusOnMount={disableFocusOnMount}\n      >\n        <div\n          id={`${id}-phone`}\n          className={cn(\n            styles.phone,\n            styles.fabOffset,\n            {\n              [styles.emulated]: !isPhone,\n            },\n            className\n          )}\n        >\n          {(statusBar && <StatusBar id={id} isPhone={isPhone} />) || appBar}\n          <div\n            id={`${id}-content`}\n            className={cn(\n              styles.content,\n              {\n                [styles.flexColumn]: stacked,\n                [APP_BAR_OFFSET_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone,\n                [APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone && prominent,\n              },\n              contentClassName\n            )}\n          >\n            {children}\n            {statusBar && (\n              <PhoneOnly>\n                <ClosePhone floating />\n              </PhoneOnly>\n            )}\n          </div>\n        </div>\n      </ConditionalFullPageDialog>\n    </PhoneContext.Provider>\n  );\n};\n\nexport default Phone;\n"
  },
  "src/ConditionalFullPageDialog.jsx": {
    "content": "import React from \"react\";\nimport { AppBar, AppBarAction } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport { Dialog, DialogContent } from \"@react-md/dialog\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { CloseSVGIcon, LaunchSVGIcon } from \"@react-md/material-icons\";\nimport { Text } from \"@react-md/typography\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nconst ConditionalFullPageDialog = ({\n  id,\n  title = \"Full Page Demo\",\n  children,\n  enable,\n  disable,\n  visible,\n  disabled = false,\n  disableAppBar = false,\n  disableContent = false,\n  disableFocusOnMount = false,\n  ...props\n}) => {\n  if (disabled) {\n    return children;\n  }\n\n  return (\n    <>\n      <Text type=\"headline-6\">\n        This example requires a more screen real estate than what is available\n        so you will need to open it in a full page dialog.\n      </Text>\n      <Button\n        id={`${id}-dialog-toggle`}\n        themeType=\"contained\"\n        onClick={enable}\n        theme=\"primary\"\n      >\n        <TextIconSpacing icon={<LaunchSVGIcon />}>Launch</TextIconSpacing>\n      </Button>\n      <Dialog\n        {...props}\n        id={`${id}-dialog`}\n        aria-labelledby={`${id}-dialog-title`}\n        visible={visible}\n        onRequestClose={disable}\n        type=\"full-page\"\n        disableFocusContainer={disableFocusOnMount}\n      >\n        {!disableAppBar && (\n          <AppBar>\n            <AppBarTitle keyline id={`${id}-dialog-title`}>\n              {title}\n            </AppBarTitle>\n            <AppBarAction first aria-label=\"Close\" onClick={disable}>\n              <CloseSVGIcon />\n            </AppBarAction>\n          </AppBar>\n        )}\n\n        {disableContent ? (\n          children\n        ) : (\n          <DialogContent disablePadding>{children}</DialogContent>\n        )}\n      </Dialog>\n    </>\n  );\n};\n\nexport default ConditionalFullPageDialog;\n"
  },
  "src/AppBarTitle.jsx": {
    "content": "import React, { useCallback, useState } from \"react\";\nimport { AppBarTitle as RMDAppBarTitle } from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\n\nimport { useId } from \"./IdProvider\";\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nexport default function AppBarTitle({ id, children, ...props }) {\n  const [tooltip, setTooltip] = useState(null);\n  const updateTooltip = useCallback(\n    ({ width, scrollWidth }) => {\n      // the `width` is a `DOMRectReadOnly` object which allows for fractional\n      // values while `scrollWidth` is always `Math.ceil` so to be able to\n      // compare correctly, need to also `Math.ceil` the width or use\n      // `target.offsetWidth`\n      const offsetWidth = Math.ceil(width);\n      const isTruncated = offsetWidth < scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    [tooltip, children]\n  );\n\n  const [, refHandler] = useResizeObserver(updateTooltip, {\n    disableHeight: true,\n  });\n\n  return (\n    <Tooltipped id={useId(id)} tooltip={tooltip}>\n      <RMDAppBarTitle\n        {...props}\n        ref={refHandler}\n        tabIndex={tooltip ? 0 : undefined}\n      >\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n}\n"
  },
  "src/IdProvider.jsx": {
    "content": "import React, { createContext, useContext, useMemo } from \"react\";\nimport createIdGenerator from \"./createIdGenerator\";\n\nconst context = createContext(createIdGenerator(\"autoid\"));\nconst { Provider } = context;\n\nexport function useId(id) {\n  const generator = useContext(context);\n\n  return useMemo(() => {\n    if (id) {\n      return id;\n    }\n\n    return generator();\n  }, [id, generator]);\n}\n\nexport function IdProvider({ children, prefix = \"autoid\" }) {\n  const value = useMemo(() => createIdGenerator(prefix), [prefix]);\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"
  },
  "src/createIdGenerator.js": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix) {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return () => generator.next().value;\n}\n"
  },
  "src/Phone/context.js": {
    "content": "import { createContext, useContext } from \"react\";\n\nexport const PhoneContext = createContext({\n  id: \"\",\n  title: \"Example\",\n  closePhone: () => {},\n});\n\nexport function usePhoneContext() {\n  return useContext(PhoneContext);\n}\n"
  },
  "src/Phone/DefaultAppBar.jsx": {
    "content": "import React from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\n\nimport AppBarTitle from \"../AppBarTitle\";\n\nimport ClosePhone from \"./ClosePhone\";\nimport { usePhoneContext } from \"./context\";\nimport OptionsAction from \"./OptionsAction\";\nimport PhoneAppBar from \"./PhoneAppBar\";\nimport SearchAction from \"./SearchAction\";\n\nconst DefaultPhoneAppBar = () => {\n  const { title } = usePhoneContext();\n  return (\n    <PhoneAppBar>\n      <AppBar component=\"div\" theme=\"clear\">\n        <ClosePhone />\n        <AppBarTitle>{title}</AppBarTitle>\n        <SearchAction />\n        <OptionsAction />\n      </AppBar>\n    </PhoneAppBar>\n  );\n};\n\nexport default DefaultPhoneAppBar;\n"
  },
  "src/Phone/ClosePhone.jsx": {
    "content": "import React, { useCallback } from \"react\";\nimport { AppBarNav } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport {\n  KeyboardArrowLeftSVGIcon,\n  CloseSVGIcon,\n} from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst ClosePhone = ({ id, children, onClick, floating, ...props }) => {\n  const { id: phoneId, closePhone } = usePhoneContext();\n  const handleClick = useCallback(\n    (event) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      closePhone();\n    },\n    [onClick, closePhone]\n  );\n\n  const sharedProps = {\n    ...props,\n    id: id ?? `${phoneId ?? \"demo\"}-close`,\n    onClick: handleClick,\n    children: floating ? <CloseSVGIcon /> : children,\n  };\n\n  if (floating) {\n    return <Button {...sharedProps} floating=\"bottom-right\" />;\n  }\n\n  return <AppBarNav {...sharedProps} />;\n};\n\nClosePhone.defaultProps = {\n  \"aria-label\": \"Go back\",\n  children: <KeyboardArrowLeftSVGIcon />,\n  floating: false,\n};\n\nexport default ClosePhone;\n"
  },
  "src/Phone/OptionsAction.jsx": {
    "content": "import React from \"react\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { MoreVertSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst OptionsAction = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-options`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nOptionsAction.defaultProps = {\n  \"aria-label\": \"Options\",\n  children: <MoreVertSVGIcon />,\n  last: true,\n};\n\nexport default OptionsAction;\n"
  },
  "src/Phone/PhoneAppBar.jsx": {
    "content": "import React from \"react\";\nimport cn from \"classnames\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport { useAppSize } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\nimport StatusBar from \"./StatusBar\";\n\nimport styles from \"./Phone.module.scss\";\n\nconst PhoneAppBar = ({ className, children, height: propHeight, ...props }) => {\n  const { id } = usePhoneContext();\n  const { isPhone } = useAppSize();\n\n  let height = propHeight ?? (isPhone ? \"normal\" : \"dense\");\n  if (!isPhone && height === \"prominent\") {\n    // I don't have automatic dense spec in css for this since it makes demos\n    // difficult, so have to do it in js\n    height = \"prominent-dense\";\n  }\n\n  return (\n    <AppBar\n      {...props}\n      id={`${id}-app-bar`}\n      className={cn(styles.header, className)}\n      height={height}\n      fixed\n      fixedElevation={false}\n    >\n      <StatusBar id={id} isPhone={isPhone} />\n      {children}\n    </AppBar>\n  );\n};\n\nPhoneAppBar.defaultProps = {\n  theme: \"default\",\n};\n\nexport default PhoneAppBar;\n"
  },
  "src/Phone/StatusBar.jsx": {
    "content": "import React from \"react\";\nimport cn from \"classnames\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport {\n  NetworkWifiSVGIcon,\n  NetworkCellSVGIcon,\n  BatteryFullSVGIcon,\n} from \"@react-md/material-icons\";\n\nimport styles from \"./StatusBar.module.scss\";\n\nconst StatusBar = ({ id, isPhone }) => {\n  if (isPhone) {\n    return null;\n  }\n\n  return (\n    <AppBar\n      id={`${id}-status-bar`}\n      className={styles.container}\n      height=\"dense\"\n      theme=\"clear\"\n      component=\"div\"\n    >\n      <NetworkWifiSVGIcon\n        role=\"presentation\"\n        className={cn(styles.icon, styles.first)}\n      />\n      <NetworkCellSVGIcon role=\"presentation\" className={styles.icon} />\n      <BatteryFullSVGIcon role=\"presentation\" className={styles.icon} />\n    </AppBar>\n  );\n};\n\nexport default StatusBar;\n"
  },
  "src/Phone/StatusBar.module.scss": {
    "content": "@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n\n.container {\n  @include rmd-app-bar-theme-update-var(dense-height, rmd-icon-theme-var(size));\n  background-color: rgba($rmd-black-base, 0.12);\n\n  width: 100%;\n}\n\n.icon {\n  @include rmd-icon-dense-theme;\n\n  margin: 0 $rmd-app-bar-lr-margin;\n}\n\n.first {\n  @include rmd-utils-rtl-auto(margin-left, auto, $rmd-app-bar-lr-margin);\n}\n"
  },
  "src/Phone/Phone.module.scss": {
    "content": "// sass-lint:disable class-name-format\n$rmd-theme-dark-elevation: true;\n\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/icon/dist/mixins\";\n@import \"~@react-md/sheet/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n\n$phone-height: 35.5rem;\n$phone-width: 20rem;\n\n$fixed-classes: (\n  rmd-app-bar--fixed: 1,\n  rmd-sheet-overlay: 1,\n  rmd-sheet--raised: 2,\n  rmd-fab: 1,\n);\n\n.phone {\n  height: 100%;\n}\n\n.fabOffset {\n  :global .rmd-fab--tl,\n  :global .rmd-fab--tr {\n    top: $rmd-app-bar-height + $rmd-button-floating-margin + $rmd-icon-size;\n  }\n}\n\n.emulated {\n  @include rmd-elevation(4);\n  @include rmd-theme-dark-elevation(4, true);\n  @include rmd-utils-block-centered(1rem);\n  @include rmd-theme(background-color, background);\n  @include rmd-icon-theme-update-var(size, $rmd-icon-size);\n  @include rmd-app-bar-theme-update-var(height, $rmd-app-bar-height);\n  @include rmd-app-bar-theme-update-var(\n    dense-height,\n    $rmd-app-bar-height + $rmd-icon-size\n  );\n  @include rmd-app-bar-theme-update-var(\n    prominent-dense-height,\n    $rmd-app-bar-prominent-height + $rmd-icon-size\n  );\n  @include rmd-sheet-theme-update-var(\n    touch-width,\n    calc(100% - #{$rmd-sheet-touch-margin})\n  );\n  @include rmd-typography-theme-update-var(\n    line-width,\n    $rmd-typography-mobile-max-line-length\n  );\n\n  height: $phone-height;\n  overflow: hidden;\n  position: relative;\n  width: $phone-width;\n\n  @each $fixed-class, $z-index in $fixed-classes {\n    :global .#{$fixed-class} {\n      position: absolute;\n      z-index: $z-index;\n    }\n  }\n\n  .header {\n    // updated the shadow to be bottom only\n    box-shadow: 0 3px 2px -3px rgba($rmd-black-base, 0.2),\n      0 2px 2px -2px rgba($rmd-black-base, 0.14),\n      0 1px 5px -1px rgba($rmd-black-base, 0.12);\n  }\n}\n\n.header {\n  flex-wrap: wrap;\n}\n\n.content {\n  @include rmd-utils-scroll;\n\n  height: 100%;\n}\n\n.flexColumn {\n  display: flex;\n  flex-direction: column;\n}\n"
  },
  "src/Phone/SearchAction.jsx": {
    "content": "import React from \"react\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { SearchSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst SearchAction = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-search`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nSearchAction.defaultProps = {\n  \"aria-label\": \"Search\",\n  children: <SearchSVGIcon />,\n  first: true,\n};\n\nexport default SearchAction;\n"
  },
  "src/useTemporaryToggle.js": {
    "content": "import { useEffect } from \"react\";\nimport { useToggle } from \"@react-md/utils\";\n\nconst TEN_SECONDS = 10000;\n\nexport default function useTemporaryToggle(duration = TEN_SECONDS) {\n  const [toggled, , disable, toggle] = useToggle(false);\n  useEffect(() => {\n    let timeout = window.setTimeout(() => {\n      timeout = undefined;\n      disable();\n    }, duration);\n\n    return () => window.clearTimeout(timeout);\n  }, [toggled, disable, duration]);\n\n  return { toggle, toggled, disable };\n}\n"
  },
  "src/SimpleDeterminateExamples.module.scss": {
    "content": "@import \"~@react-md/utils/dist/mixins\";\n\n.container {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  margin: 1rem 0;\n}\n\n.button.button {\n  @include rmd-utils-absolute-centered;\n\n  white-space: nowrap;\n}\n\n.linear {\n  margin: 1rem 0;\n}\n\n.circular {\n  margin-left: 1.5rem;\n}\n"
  }
}

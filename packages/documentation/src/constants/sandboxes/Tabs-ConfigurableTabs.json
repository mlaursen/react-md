{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Tabs Example - Configurable Tabs</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/tabs/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/transition/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Tabs Example - Configurable Tabs",
      "description": "Example from https://react-md.dev/packages/tabs/demos#configurable-tabs",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "next",
        "@react-md/button": "next",
        "@react-md/elevation": "next",
        "@react-md/form": "next",
        "@react-md/icon": "next",
        "@react-md/layout": "next",
        "@react-md/material-icons": "next",
        "@react-md/states": "next",
        "@react-md/tabs": "next",
        "@react-md/theme": "next",
        "@react-md/transition": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "cnbuilder": "^2.3.0",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport { TabPanel, TabPanels, Tabs, TabsManager } from \"@react-md/tabs\";\n\nimport \"./ConfigurableTabs.scss\";\n\nimport ConfigurationForm from \"./ConfigurationForm\";\nimport PanelContent from \"./PanelContent\";\nimport useConfiguration from \"./useConfiguration\";\nimport styles from \"./styles\";\n\nconst Demo: FC = () => {\n  const { tabs, ...configuration } = useConfiguration();\n  const {\n    themed,\n    padded,\n    automatic,\n\n    stacked,\n    iconAfter,\n\n    persistent,\n    customTransition,\n    disableTransition,\n  } = configuration;\n\n  return (\n    <Fragment>\n      <ConfigurationForm {...configuration} />\n      <div className={styles()}>\n        <TabsManager\n          tabsId=\"configurable-tabs\"\n          tabs={tabs}\n          stacked={stacked}\n          iconAfter={iconAfter}\n        >\n          <Tabs\n            automatic={automatic}\n            padded={padded}\n            className={styles(\"tabs\", { themed })}\n          />\n          <TabPanels\n            disableTransition={disableTransition || customTransition}\n            persistent={persistent}\n          >\n            {tabs.map((_, i) => (\n              <TabPanel key={i} className={styles(\"content\")}>\n                <PanelContent i={i} customTransition={customTransition} />\n              </TabPanel>\n            ))}\n          </TabPanels>\n        </TabsManager>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/ConfigurableTabs.scss": {
    "content": "@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/tabs/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n.configurable-tabs {\n  @include rmd-utils-tablet-media {\n    @include rmd-utils-block-centered;\n    @include rmd-elevation(4);\n\n    max-width: 40rem;\n  }\n\n  &__tabs {\n    @include rmd-app-bar-theme(background-color, default-background-color);\n\n    &--themed {\n      @include rmd-theme(background-color, primary);\n      @include rmd-theme(color, on-primary);\n      @include rmd-tabs-theme-update-var(active, inherit);\n      @include rmd-tabs-theme-update-var(inactive, $rmd-theme-secondary-text-on-dark-color);\n      @include rmd-tabs-theme-update-var(indicator-color, rmd-theme-var(secondary));\n    }\n  }\n\n  &__content {\n    padding: 0 3rem 3rem;\n  }\n\n  &__container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n  }\n\n  &__full-width {\n    width: 100%;\n  }\n}\n",
    "isBinary": false
  },
  "src/ConfigurationForm.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { Checkbox, Fieldset, Form, Radio } from \"@react-md/form\";\nimport { Grid } from \"@react-md/utils\";\n\nimport { TabConfiguration } from \"./useConfiguration\";\n\nconst ConfigurationForm: FC<Omit<TabConfiguration, \"tabs\">> = ({\n  // Tabs config\n  themed,\n  handleThemedChange,\n  padded,\n  handlePaddedChange,\n  automatic,\n  handleAutomaticChange,\n\n  // Tab config\n  noIcon,\n  onlyIcon,\n  includeIcon,\n  handleIconChange,\n  stacked,\n  handleStackedChange,\n  iconAfter,\n  handleIconAfterChange,\n\n  // TabPanel config\n  persistent,\n  handlePersistentChange,\n  disableTransition,\n  customTransition,\n  handleTransitionChange,\n}) => (\n  <Form>\n    <Grid clone columns={1} tabletColumns={2} largeDesktopColumns={3}>\n      <Fieldset legend=\"Tabs Options\">\n        <Checkbox\n          id=\"configurable-tabs-theme\"\n          name=\"themed\"\n          label=\"Themed\"\n          checked={themed}\n          onChange={handleThemedChange}\n        />\n        <Checkbox\n          id=\"configurable-tabs-padded\"\n          name=\"padded\"\n          label=\"Padded\"\n          checked={padded}\n          onChange={handlePaddedChange}\n        />\n        <Checkbox\n          id=\"configurable-tabs-automatic\"\n          name=\"automatic\"\n          label=\"Automatic Keyboard Selection\"\n          checked={automatic}\n          onChange={handleAutomaticChange}\n        />\n      </Fieldset>\n      <Fieldset legend=\"Icon Options\">\n        <Radio\n          id=\"configurable-tabs-icons-none\"\n          name=\"icons\"\n          label=\"No Icon\"\n          value=\"none\"\n          checked={noIcon}\n          onChange={handleIconChange}\n        />\n        <Radio\n          id=\"configurable-tabs-icons-include\"\n          name=\"icons\"\n          value=\"include\"\n          label=\"Include\"\n          checked={includeIcon}\n          onChange={handleIconChange}\n        />\n        <Radio\n          id=\"configurable-tabs-icons-only\"\n          name=\"icons\"\n          value=\"only\"\n          label=\"Only Icons\"\n          checked={onlyIcon}\n          onChange={handleIconChange}\n        />\n        <Checkbox\n          id=\"configurable-tabs-stacked\"\n          name=\"stacked\"\n          label=\"Stacked\"\n          checked={stacked}\n          onChange={handleStackedChange}\n          disabled={!includeIcon}\n        />\n        <Checkbox\n          id=\"configurable-tabs-icon-after\"\n          name=\"iconAfter\"\n          label=\"Icon After\"\n          checked={iconAfter}\n          onChange={handleIconAfterChange}\n          disabled={!includeIcon}\n        />\n      </Fieldset>\n      <Fieldset legend=\"Tab Panel Options\">\n        <Checkbox\n          id=\"configurable-tabs-panel-rendering\"\n          name=\"persistent\"\n          label=\"Persistent Tabs\"\n          checked={persistent}\n          onChange={handlePersistentChange}\n        />\n        <Radio\n          id=\"configurable-tabs-transition-enabled\"\n          name=\"transition\"\n          value=\"enabled\"\n          label=\"Transition Enabled\"\n          checked={!disableTransition && !customTransition}\n          onChange={handleTransitionChange}\n        />\n        <Radio\n          id=\"configurable-tabs-transition-disabled\"\n          name=\"transition\"\n          value=\"disabled\"\n          label=\"Transition Disabled\"\n          checked={disableTransition}\n          onChange={handleTransitionChange}\n        />\n        <Radio\n          id=\"configurable-tabs-transition-custom\"\n          name=\"transition\"\n          value=\"custom\"\n          label=\"Custom Transition\"\n          checked={customTransition}\n          onChange={handleTransitionChange}\n          disabled={persistent}\n        />\n      </Fieldset>\n    </Grid>\n  </Form>\n);\n\nexport default ConfigurationForm;\n",
    "isBinary": false
  },
  "src/PanelContent.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport { Button } from \"@react-md/button\";\nimport { CrossFade } from \"@react-md/transition\";\nimport { Text } from \"@react-md/typography\";\n\nimport styles from \"./styles\";\n\nexport interface PanelContentProps {\n  i: number;\n  customTransition: boolean;\n}\n\nconst PanelContent: FC<PanelContentProps> = ({ i, customTransition }) => {\n  const Container = customTransition ? CrossFade : Fragment;\n\n  return (\n    <Container>\n      <div className={styles(\"container\")}>\n        <Text type=\"headline-4\" className={styles(\"full-width\")}>\n          {`Panel ${i + 1}`}\n        </Text>\n        <Button\n          id={`panel-content-button-${i + 1}-1`}\n          themeType=\"contained\"\n          theme=\"primary\"\n        >\n          {`Button ${i + 1}-1`}\n        </Button>\n        <Button\n          id={`panel-content-button-${i + 1}-2`}\n          themeType=\"contained\"\n          theme=\"secondary\"\n        >\n          {`Button ${i + 1}-2`}\n        </Button>\n      </div>\n    </Container>\n  );\n};\n\nexport default PanelContent;\n",
    "isBinary": false
  },
  "src/styles.ts": {
    "content": "import { bem } from \"@react-md/utils\";\n\nexport default bem(\"configurable-tabs\");\n",
    "isBinary": false
  },
  "src/useConfiguration.tsx": {
    "content": "import React, { ChangeEventHandler } from \"react\";\nimport { useCheckboxState, useChoice } from \"@react-md/form\";\nimport {\n  FavoriteSVGIcon,\n  NearMeSVGIcon,\n  WatchLaterSVGIcon,\n  FreeBreakfastSVGIcon,\n  PlaceSVGIcon,\n  MailSVGIcon,\n  AddCircleSVGIcon,\n  StarSVGIcon,\n  PersonSVGIcon,\n} from \"@react-md/material-icons\";\nimport LightbulbSVGIcon from \"./LightbulbSVGIcon\";\nimport { TabConfig } from \"@react-md/tabs\";\n\nconst ICONS = [\n  <WatchLaterSVGIcon />,\n  <NearMeSVGIcon />,\n  <FavoriteSVGIcon />,\n  <FreeBreakfastSVGIcon />,\n  <LightbulbSVGIcon />,\n  <PlaceSVGIcon />,\n  <MailSVGIcon />,\n  <AddCircleSVGIcon />,\n  <StarSVGIcon />,\n  <PersonSVGIcon />,\n];\n\nconst NUMBERS = [\n  \"One\",\n  \"Two\",\n  \"Three\",\n  \"Four\",\n  \"Five\",\n  \"Six\",\n  \"Seven\",\n  \"Eight\",\n  \"Nine\",\n  \"Ten\",\n];\n\ntype IconBehavior = \"none\" | \"include\" | \"only\";\ntype TransitionBehavior = \"enabled\" | \"disabled\" | \"custom\";\ntype Handler = ChangeEventHandler<HTMLInputElement>;\n\nexport interface TabConfiguration {\n  tabs: TabConfig[];\n\n  // Tabs config\n  themed: boolean;\n  handleThemedChange: Handler;\n  padded: boolean;\n  handlePaddedChange: Handler;\n  automatic: boolean;\n  handleAutomaticChange: Handler;\n\n  // Tab config\n  noIcon: boolean;\n  onlyIcon: boolean;\n  includeIcon: boolean;\n  handleIconChange: Handler;\n  stacked: boolean;\n  handleStackedChange: Handler;\n  iconAfter: boolean;\n  handleIconAfterChange: Handler;\n\n  // TabPanel config\n  persistent: boolean;\n  handlePersistentChange: Handler;\n  disableTransition: boolean;\n  customTransition: boolean;\n  handleTransitionChange: Handler;\n}\n\nexport default function useConfiguration(): TabConfiguration {\n  // Tabs config\n  const [themed, handleThemedChange] = useCheckboxState(false);\n  const [padded, handlePaddedChange] = useCheckboxState(false);\n  const [automatic, handleAutomaticChange] = useCheckboxState(false);\n\n  // Tab config\n  const [icons, handleIconChange] = useChoice<IconBehavior>(\"none\");\n  const [stacked, handleStackedChange] = useCheckboxState(false);\n  const [iconAfter, handleIconAfterChange] = useCheckboxState(false);\n\n  // TabPanel config\n  const [persistent, handlePersistentChange] = useCheckboxState(false);\n  const [transition, handleTransitionChange, setTransition] = useChoice<\n    TransitionBehavior\n  >(\"enabled\");\n  const disableTransition = transition === \"disabled\";\n  const customTransition = transition === \"custom\";\n  if (customTransition && persistent) {\n    setTransition(\"enabled\");\n  }\n\n  const noIcon = icons === \"none\";\n  const onlyIcon = icons === \"only\";\n  const includeIcon = icons === \"include\";\n  const tabs = Array.from(new Array(10), (_, i) => {\n    const label = `Tab ${NUMBERS[i]}`;\n    const icon = ICONS[i];\n\n    return {\n      \"aria-label\": onlyIcon ? label : undefined,\n      children: onlyIcon ? icon : label,\n      icon: includeIcon && icon,\n    };\n  });\n\n  return {\n    tabs,\n\n    // Tabs config\n    themed,\n    handleThemedChange,\n    padded,\n    handlePaddedChange,\n    automatic,\n    handleAutomaticChange,\n\n    // Tab config\n    noIcon,\n    onlyIcon,\n    includeIcon,\n    handleIconChange,\n    stacked,\n    handleStackedChange,\n    iconAfter,\n    handleIconAfterChange,\n\n    // TabPanel config\n    persistent,\n    handlePersistentChange,\n    disableTransition,\n    customTransition,\n    handleTransitionChange,\n  };\n}\n",
    "isBinary": false
  },
  "src/LightbulbSVGIcon.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { cnb } from \"cnbuilder\";;\nimport { SVGIconProps } from \"@react-md/icon\";\nimport { Component as LightbulbIcon } from \"./lightbulb.svg\";\n\n// this one isn't included in material icons for some reason?\nconst LightbulbSVGIcon: FC<SVGIconProps> = ({ className, ...props }) => (\n  <LightbulbIcon\n    {...props}\n    className={cnb(\"rmd-icon rmd-icon--svg\", className)}\n  />\n);\n\nLightbulbSVGIcon.defaultProps = {\n  role: \"img\",\n  focusable: \"false\",\n};\n\nexport default LightbulbSVGIcon;\n",
    "isBinary": false
  },
  "src/lightbulb.svg": {
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M9,21c0,0.55,0.45,1,1,1h4c0.55,0,1-0.45,1-1v-1H9V21z M12,2C8.14,2,5,5.14,5,9c0,2.38,1.19,4.47,3,5.74V17 c0,0.55,0.45,1,1,1h6c0.55,0,1-0.45,1-1v-2.26c1.811-1.271,3-3.36,3-5.74C19,5.14,15.859,2,12,2z\" /></svg>\n",
    "isBinary": false
  }
}

{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Menu Example - Custom Renderers</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/avatar/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/list/dist/mixins';\n@import '~@react-md/menu/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Menu Example - Custom Renderers",
      "description": "Example from https://react-md.dev/packages/menu/demos#custom-renderers",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/avatar": "next",
        "@react-md/layout": "next",
        "@react-md/list": "next",
        "@react-md/menu": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "cnbuilder": "^2.3.0",
        "react": "latest",
        "react-dom": "latest",
        "react-virtualized": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport { Avatar } from \"@react-md/avatar\";\nimport scssVariables from \"@react-md/avatar/dist/scssVariables\";\n\nimport VirtualizedMenu from \"./VirtualizedMenu\";\nimport NonVirtualizedMenu from \"./NonVirtualizedMenu\";\n\nconst colors = Object.keys(scssVariables[\"rmd-avatar-colors\"]);\nconst items = Array.from(new Array(1000), (_, i) => ({\n  leftAvatar: <Avatar color={colors[i % colors.length]} />,\n  children: `Item ${i + 1}`,\n}));\n\nconst Demo: FC = () => (\n  <Fragment>\n    <NonVirtualizedMenu items={items} />\n    <VirtualizedMenu items={items} />\n  </Fragment>\n);\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/NonVirtualizedMenu.tsx": {
    "content": "import React, { Fragment, FC, ReactNode, useState, useMemo } from \"react\";\nimport { DropdownMenu } from \"@react-md/menu\";\nimport { Text } from \"@react-md/typography\";\n\n\n\ninterface Item {\n  leftAvatar: ReactNode;\n  children: string;\n}\n\nconst NonVirtualizedMenu: FC<{ items: Item[] }> = ({ items }) => {\n  const [value, setValue] = useState(\"None\");\n  const clickableItems = useMemo(\n    () =>\n      items.map(item => ({\n        ...item,\n        onClick: () => setValue(item.children),\n      })),\n    [items]\n  );\n\n  return (\n    <Fragment>\n      <Text>\n        Last clicked value: <code>{value}<code>\n      </Text>\n      <DropdownMenu\n        id=\"non-virtualized-example\"\n        menuLabel=\"Large Menu\"\n        theme=\"warning\"\n        items={clickableItems}\n      >\n        Non-Virtualized\n      </DropdownMenu>\n    </Fragment>\n  );\n};\n\nexport default NonVirtualizedMenu;\n",
    "isBinary": false
  },
  "src/VirtualizedMenu.tsx": {
    "content": "import React, { FC, Fragment, useState, ReactNode } from \"react\";\nimport { List, ListRowRenderer } from \"react-virtualized\";\nimport { DropdownMenu, Menu, MenuItem, MenuRenderer } from \"@react-md/menu\";\nimport scssVariables from \"@react-md/list/dist/scssVariables\";\nimport { Text } from \"@react-md/typography\";\nimport { unitToNumber, useAppSize } from \"@react-md/utils\";\n\n\n\nconst mobileHeight = unitToNumber(scssVariables[\"rmd-list-item-large-height\"]);\nconst desktopHeight = unitToNumber(\n  scssVariables[\"rmd-list-item-dense-large-height\"]\n);\n\ninterface Item {\n  leftAvatar: ReactNode;\n  children: string;\n}\n\nconst VirtualizedMenu: FC<{ items: Item[] }> = ({ items }) => {\n  const { isDesktop } = useAppSize();\n  const [value, setValue] = useState(\"None\");\n\n  const rowRenderer: ListRowRenderer = ({ key, index, style }) => (\n    <MenuItem\n      key={key}\n      style={style}\n      {...items[index]}\n      aria-setsize={items.length}\n      aria-posinset={index + 1}\n      onClick={() => setValue(items[index].children)}\n    />\n  );\n\n  const menuRenderer: MenuRenderer = (\n    { horizontal: _horizontal, children: _children, ...props },\n    // this is really just added to show that it is provided as the second argument.\n    // it isn't really required for these examples\n    items\n  ) => {\n    const height = isDesktop ? desktopHeight : mobileHeight;\n    return (\n      <Menu {...props}>\n        <List\n          height={height * 5.6}\n          rowCount={items.length}\n          rowRenderer={rowRenderer}\n          rowHeight={height}\n          tabIndex={null}\n          width={200}\n          className=\"rmd-list\"\n        />\n      </Menu>\n    );\n  };\n\n  return (\n    <Fragment>\n      <Text>\n        Last clicked value: <code>{value}<code>\n      </Text>\n      <DropdownMenu\n        id=\"virtualized-example\"\n        items={items}\n        menuRenderer={menuRenderer}\n        theme=\"secondary\"\n      >\n        Virtualized\n      </DropdownMenu>\n    </Fragment>\n  );\n};\n\nexport default VirtualizedMenu;\n",
    "isBinary": false
  }
}

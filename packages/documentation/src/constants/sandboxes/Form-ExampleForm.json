{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/react-md@next/dist/css/react-md.teal-pink-200-light.min.css\"\n    />\n    <title>Form Example - Example Form</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n",
    "isBinary": false
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n",
    "isBinary": false
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/button/dist/mixins';\n@import '~@react-md/dialog/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/sheet/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/tooltip/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n\n@include react-md-utils;\n",
    "isBinary": false
  },
  "src/_variables.scss": {
    "content": "@import '~@react-md/theme/dist/color-palette';\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n",
    "isBinary": false
  },
  "package.json": {
    "content": {
      "title": "Form Example - Example Form",
      "description": "Example from https://react-md.dev/packages/form/demos#example-form",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "next",
        "@react-md/button": "next",
        "@react-md/dialog": "next",
        "@react-md/elevation": "next",
        "@react-md/form": "next",
        "@react-md/icon": "next",
        "@react-md/layout": "next",
        "@react-md/material-icons": "next",
        "@react-md/sheet": "next",
        "@react-md/states": "next",
        "@react-md/theme": "next",
        "@react-md/tooltip": "next",
        "@react-md/typography": "next",
        "@react-md/utils": "next",
        "cnbuilder": "^2.3.0",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    },
    "isBinary": false
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, Fragment } from \"react\";\nimport {\n  Fieldset,\n  Form,\n  NativeSelect,\n  Radio,\n  TextField,\n  TextFieldTheme,\n  useChoice,\n} from \"@react-md/form\";\nimport {\n  EmailSVGIcon,\n  LocationOnSVGIcon,\n  PersonSVGIcon,\n  PhoneSVGIcon,\n} from \"@react-md/material-icons\";\nimport { bem } from \"@react-md/utils\";\n\nimport Phone from \"./Phone\";\nimport states from \"./states\";\n\nimport \"./ExampleForm.scss\";\n\nconst block = bem(\"example-form\");\n\nconst themes: TextFieldTheme[] = [\"none\", \"underline\", \"filled\", \"outline\"];\n\nconst Demo: FC = () => {\n  const [currentTheme, handleChange] = useChoice<TextFieldTheme>(\"outline\");\n  const isUnstyled = currentTheme === \"none\";\n\n  return (\n    <Fragment>\n      <Fieldset legend=\"Theme options\" unstyled={false}>\n        {themes.map(theme => (\n          <Radio\n            id={`form-theme-${theme}`}\n            key={theme}\n            name=\"theme\"\n            onChange={handleChange}\n            value={theme}\n            checked={currentTheme === theme}\n            label={theme}\n          />\n        ))}\n      </Fieldset>\n      <Phone id=\"example-form-phone\">\n        <Form className={block()}>\n          <PersonSVGIcon />\n          <TextField\n            id=\"contact-name\"\n            name=\"name\"\n            label={!isUnstyled && \"Name\"}\n            placeholder=\"John Snow\"\n            theme={currentTheme}\n          />\n          <PhoneSVGIcon />\n          <TextField\n            id=\"contact-phone\"\n            type=\"tel\"\n            name=\"phone\"\n            label={!isUnstyled && \"Phone\"}\n            placeholder=\"123-4567\"\n            pattern=\"\\d{3}-\\d{4}\"\n            maxLength={8}\n            theme={currentTheme}\n          />\n          <LocationOnSVGIcon className={block(\"address-icon\")} />\n          <Fieldset legend=\"Full Address\">\n            <TextField\n              id=\"contact-address\"\n              name=\"address\"\n              label={!isUnstyled && \"Address\"}\n              placeholder=\"Some place street\"\n              theme={currentTheme}\n            />\n            <TextField\n              id=\"contact-city\"\n              name=\"city\"\n              label={!isUnstyled && \"City\"}\n              placeholder=\"Denver\"\n              className={block(\"address-field\")}\n              theme={currentTheme}\n            />\n            <NativeSelect\n              id=\"contact-state\"\n              defaultValue=\"\"\n              name=\"state\"\n              inline\n              label=\"State\"\n              className={block(\"address-field\", { inline: true, first: true })}\n              theme={currentTheme}\n            >\n              <option value=\"\" disabled hidden />\n              {states.map(({ name, abbreviation }) => (\n                <option key={abbreviation} value={abbreviation}>\n                  {name}\n                </option>\n              ))}\n            </NativeSelect>\n            <TextField\n              id=\"contact-zip\"\n              name=\"zip\"\n              label={!isUnstyled && \"Zip\"}\n              placeholder=\"12345\"\n              inline\n              pattern=\"\\d{5}\"\n              maxLength={5}\n              className={block(\"address-field\", { inline: true })}\n              theme={currentTheme}\n            />\n          </Fieldset>\n          <EmailSVGIcon />\n          <TextField\n            id=\"contact-email\"\n            name=\"email\"\n            label={!isUnstyled && \"Email\"}\n            placeholder=\"jsnow@email.com\"\n            theme={currentTheme}\n          />\n        </Form>\n      </Phone>\n    </Fragment>\n  );\n};\n\nexport default Demo;\n",
    "isBinary": false
  },
  "src/AppBarTitle.tsx": {
    "content": "import React, { FC, useRef, useState, ReactNode, useMemo } from \"react\";\nimport {\n  AppBarTitle as RMDAppBarTitle,\n  AppBarTitleProps,\n} from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\nimport createIdGenerator from \"./createIdGenerator\";\n\nconst hackyIds = createIdGenerator(\"dynamic-tooltips\");\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nconst AppBarTitle: FC<AppBarTitleProps> = ({\n  id: propId,\n  children,\n  ...props\n}) => {\n  const [tooltip, setTooltip] = useState<ReactNode>(null);\n  const ref = useRef<HTMLHeadingElement | null>(null);\n  useResizeObserver({\n    disableHeight: true,\n    onResize() {\n      if (!ref.current) {\n        return;\n      }\n\n      const isTruncated = ref.current.offsetWidth < ref.current.scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    target: ref,\n  });\n\n  const id = useMemo(() => {\n    if (propId) {\n      return propId;\n    }\n\n    return hackyIds();\n  }, [propId]);\n\n  return (\n    <Tooltipped id={id} tooltip={tooltip}>\n      <RMDAppBarTitle {...props} ref={ref} tabIndex={tooltip ? 0 : undefined}>\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n};\n\nexport default AppBarTitle;\n",
    "isBinary": false
  },
  "src/ConditionalFullPageDialog.tsx": {
    "content": "import React, { Fragment, FC, ReactElement, ReactNode } from \"react\";\nimport { AppBar, AppBarAction } from \"@react-md/app-bar\";\nimport { Button } from \"@react-md/button\";\nimport { Dialog, DialogContent } from \"@react-md/dialog\";\nimport { TextIconSpacing } from \"@react-md/icon\";\nimport { CloseSVGIcon, LaunchSVGIcon } from \"@react-md/material-icons\";\nimport { Text } from \"@react-md/typography\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nexport interface ConditionalFullPageDialogProps {\n  id: string;\n  title?: ReactNode;\n  children: ReactElement;\n  enable: () => void;\n  disable: () => void;\n  visible: boolean;\n  disabled?: boolean;\n  disableAppBar?: boolean;\n  disableContent?: boolean;\n  disableFocusOnMount?: boolean;\n}\n\ntype DefaultProps = Required<\n  Pick<\n    ConditionalFullPageDialogProps,\n    | \"title\"\n    | \"disabled\"\n    | \"disableAppBar\"\n    | \"disableContent\"\n    | \"disableFocusOnMount\"\n  >\n>;\ntype WithDefaultProps = ConditionalFullPageDialogProps & DefaultProps;\n\nconst ConditionalFullPageDialog: FC<ConditionalFullPageDialogProps> = providedProps => {\n  const {\n    id,\n    title,\n    children,\n    enable,\n    disable,\n    visible,\n    disabled,\n    disableAppBar,\n    disableContent,\n    disableFocusOnMount,\n  } = providedProps as WithDefaultProps;\n  if (disabled) {\n    return children;\n  }\n\n  return (\n    <Fragment>\n      <Text type=\"headline-6\">\n        This example requires a more screen real estate than what is available\n        so you will need to open it in a full page dialog.\n      </Text>\n      <Button\n        id={`${id}-dialog-toggle`}\n        themeType=\"contained\"\n        onClick={enable}\n        theme=\"primary\"\n      >\n        <TextIconSpacing icon={<LaunchSVGIcon />}>Launch</TextIconSpacing>\n      </Button>\n      <Dialog\n        id={`${id}-dialog`}\n        aria-labelledby={`${id}-dialog-title`}\n        visible={visible}\n        onRequestClose={disable}\n        type=\"full-page\"\n        disableFocusContainer={disableFocusOnMount}\n      >\n        {!disableAppBar && (\n          <AppBar>\n            <AppBarTitle keyline id={`${id}-dialog-title`}>\n              {title}\n            </AppBarTitle>\n            <AppBarAction first aria-label=\"Close\" onClick={disable}>\n              <CloseSVGIcon />\n            </AppBarAction>\n          </AppBar>\n        )}\n        {disableContent ? (\n          children\n        ) : (\n          <DialogContent disablePadding>{children}</DialogContent>\n        )}\n      </Dialog>\n    </Fragment>\n  );\n};\n\nconst defaultProps: DefaultProps = {\n  title: \"Full Page Demo\",\n  disabled: false,\n  disableAppBar: false,\n  disableContent: false,\n  disableFocusOnMount: false,\n};\n\nConditionalFullPageDialog.defaultProps = defaultProps;\n\nexport default ConditionalFullPageDialog;\n",
    "isBinary": false
  },
  "src/ExampleForm.scss": {
    "content": "@import '~@react-md/icon/dist/functions';\n\n.example-form {\n  align-items: center;\n  display: grid;\n  grid-row-gap: 1rem;\n  grid-template-columns: calc(#{rmd-icon-theme-var(size)} + 1rem) 1fr;\n  margin: 1rem;\n\n  &__address-icon {\n    align-self: flex-start;\n    margin-top: 1rem;\n  }\n\n  &__address-field {\n    margin-top: 1rem;\n\n    &--first {\n      margin-right: 0.5rem;\n    }\n\n    &--inline {\n      width: calc(50% - 0.5rem);\n\n      &:last-child {\n        margin-left: 0.5rem;\n      }\n    }\n  }\n}\n",
    "isBinary": false
  },
  "src/Phone/ClosePhone.tsx": {
    "content": "import React, { FC, useCallback } from \"react\";\nimport { AppBarNav, AppBarNavProps } from \"@react-md/app-bar\";\nimport {\n  KeyboardArrowLeftSVGIcon,\n  CloseSVGIcon,\n} from \"@react-md/material-icons\";\nimport { bem } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst block = bem(\"phone\");\n\ninterface Props extends AppBarNavProps {\n  floating?: boolean;\n}\n\nconst ClosePhone: FC<Props> = ({\n  children,\n  onClick,\n  floating,\n  className,\n  ...props\n}) => {\n  const { id, closePhone } = usePhoneContext();\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n\n      closePhone();\n    },\n    [onClick, closePhone]\n  );\n\n  const button = (\n    <AppBarNav\n      {...props}\n      id={`${id}-close`}\n      onClick={handleClick}\n      theme={floating ? \"secondary\" : undefined}\n      themeType={floating ? \"contained\" : undefined}\n      className={className}\n    >\n      {floating ? <CloseSVGIcon /> : children}\n    </AppBarNav>\n  );\n  if (!floating) {\n    return button;\n  }\n\n  return <span className={block(\"close-container\")}>{button}</span>;\n};\n\nClosePhone.defaultProps = {\n  \"aria-label\": \"Go back\",\n  children: <KeyboardArrowLeftSVGIcon />,\n  floating: false,\n};\n\nexport default ClosePhone;\n",
    "isBinary": false
  },
  "src/Phone/DefaultAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\n\nimport AppBarTitle from \"./AppBarTitle\";\n\nimport ClosePhone from \"./ClosePhone\";\nimport { usePhoneContext } from \"./context\";\nimport OptionsAction from \"./OptionsAction\";\nimport PhoneAppBar from \"./PhoneAppBar\";\nimport SearchAction from \"./SearchAction\";\n\nconst DefaultPhoneAppBar: FC = () => {\n  const { title } = usePhoneContext();\n  return (\n    <PhoneAppBar>\n      <AppBar component=\"div\" theme=\"clear\">\n        <ClosePhone />\n        <AppBarTitle>{title}</AppBarTitle>\n        <SearchAction />\n        <OptionsAction />\n      </AppBar>\n    </PhoneAppBar>\n  );\n};\n\nexport default DefaultPhoneAppBar;\n",
    "isBinary": false
  },
  "src/Phone/OptionsAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { MoreVertSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst OptionsAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-options`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nOptionsAction.defaultProps = {\n  \"aria-label\": \"Options\",\n  children: <MoreVertSVGIcon />,\n  last: true,\n};\n\nexport default OptionsAction;\n",
    "isBinary": false
  },
  "src/Phone/Phone.scss": {
    "content": "@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n@import '~@react-md/elevation/dist/mixins';\n@import '~@react-md/app-bar/dist/mixins';\n@import '~@react-md/icon/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/sheet/dist/mixins';\n\n$phone-height: 35.5rem;\n$phone-width: 20rem;\n\n$fixed-classes: (\n  rmd-app-bar--fixed: 1,\n  rmd-sheet-overlay: 1,\n  rmd-sheet--raised: 2,\n);\n\n.phone {\n  height: 100%;\n\n  &--emulated {\n    @include rmd-elevation(4);\n    @include rmd-utils-block-centered(1rem);\n    @include rmd-theme(background-color, background);\n    @include rmd-icon-theme-update-var(size, $rmd-icon-size);\n    @include rmd-app-bar-theme-update-var(height, $rmd-app-bar-height);\n    @include rmd-app-bar-theme-update-var(dense-height, $rmd-app-bar-height + $rmd-icon-size);\n    @include rmd-app-bar-theme-update-var(\n      prominent-dense-height,\n      $rmd-app-bar-prominent-height + $rmd-icon-size\n    );\n    @include rmd-sheet-theme-update-var(touch-width, calc(100% - #{$rmd-sheet-touch-margin}));\n    @include rmd-typography-theme-update-var(line-width, $rmd-typography-mobile-max-line-length);\n\n    height: $phone-height;\n    overflow: hidden;\n    position: relative;\n    width: $phone-width;\n\n    @each $fixed-class, $z-index in $fixed-classes {\n      .#{$fixed-class} {\n        position: absolute;\n        z-index: $z-index;\n      }\n    }\n\n    .phone__app-bar {\n      // updated the shadow to be bottom only\n      box-shadow: 0 3px 2px -3px rgba($rmd-black-base, 0.2),\n        0 2px 2px -2px rgba($rmd-black-base, 0.14), 0 1px 5px -1px rgba($rmd-black-base, 0.12);\n    }\n  }\n\n  &__app-bar {\n    flex-wrap: wrap;\n  }\n\n  &__status-bar {\n    @include rmd-app-bar-theme-update-var(dense-height, rmd-icon-theme-var(size));\n    background-color: rgba($rmd-black-base, 0.12);\n\n    width: 100%;\n  }\n\n  &__icon {\n    @include rmd-icon-dense-theme;\n\n    margin: 0 $rmd-app-bar-lr-margin;\n\n    &--first {\n      @include rmd-utils-rtl-auto(margin-left, auto, $rmd-app-bar-lr-margin);\n    }\n  }\n\n  &__content {\n    @include rmd-utils-scroll;\n\n    height: 100%;\n\n    &--stacked {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n\n  &__close-container {\n    bottom: 1rem;\n    margin: 0;\n    position: fixed;\n    right: 1rem;\n    z-index: 100;\n  }\n}\n",
    "isBinary": false
  },
  "src/Phone/Phone.tsx": {
    "content": "import React, { FC, ReactNode, useMemo, useCallback } from \"react\";\nimport { cnb } from \"cnbuilder\";;\nimport {\n  APP_BAR_OFFSET_DENSE_CLASSNAME,\n  APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME,\n} from \"@react-md/app-bar\";\nimport { bem, useAppSize, useToggle, PhoneOnly } from \"@react-md/utils\";\n\nimport ConditionalFullPageDialog, {\n  ConditionalFullPageDialogProps,\n} from \"./ConditionalFullPageDialog\";\n\nimport \"./Phone.scss\";\nimport { PhoneContext } from \"./context\";\nimport DefaultAppBar from \"./DefaultAppBar\";\nimport StatusBar from \"./StatusBar\";\nimport ClosePhone from \"./ClosePhone\";\n\nexport interface PhoneConfiguration {\n  /**\n   * An optional app bar to use within the phone. This should normally contain the `ClosePhone`\n   * component so that it can be hidden on mobile devices when the full page dialog is used.\n   */\n  appBar?: ReactNode;\n\n  /**\n   * The title to use for the phone. This will be passed down into the phone context so it can\n   * be grabbed anywhere.\n   */\n  title?: ReactNode;\n\n  /**\n   * A class name to apply to the fake phone's content element.\n   */\n  contentClassName?: string;\n\n  /**\n   * Boolean if the phone's content should gain the stacked styles which update the content\n   * to be display flex and flex-direction column. THis is great when creating a custom app\n   * bar that isn't fixed to the top with position fixed.\n   */\n  contentStacked?: boolean;\n\n  /**\n   * Boolean if the phone's app bar should be prominent. This is used to add the required offset class names\n   * to the content element.\n   */\n  prominent?: boolean;\n}\n\nexport interface PhoneProps\n  extends PhoneConfiguration,\n    Pick<\n      ConditionalFullPageDialogProps,\n      \"disableAppBar\" | \"disableContent\" | \"disableFocusOnMount\"\n    > {\n  /**\n   * An id for the phone. This is required for accessibility and quickly linking\n   * to things.\n   */\n  id: string;\n\n  /**\n   * The content to display. This will conditionally render in a full page\n   * dialog.\n   */\n  children: ReactNode;\n\n  /**\n   * A class name to apply to the fake phone's container element.\n   */\n  className?: string;\n\n  /**\n   * An optional function to call when the dialog is closed. This is useful if\n   * the demo should be reset when the full page dialog is closed.\n   */\n  onPhoneClose?: () => void;\n\n  /**\n   * Boolean if the `appBar` should only render a status bar.\n   */\n  statusBar?: boolean;\n}\n\nconst block = bem(\"phone\");\n\nconst DEFAULT_APP_BAR = <DefaultAppBar />;\n\nconst Phone: FC<PhoneProps> = ({\n  id,\n  title = \"Example\",\n  children,\n  appBar = DEFAULT_APP_BAR,\n  className,\n  contentClassName,\n  contentStacked: stacked = false,\n  prominent,\n  disableAppBar = false,\n  disableContent = false,\n  disableFocusOnMount = false,\n  onPhoneClose,\n  statusBar = false,\n}) => {\n  const { isPhone } = useAppSize();\n  const [visible, enable, disable] = useToggle(false);\n  const closePhone = useCallback(() => {\n    disable();\n    if (onPhoneClose) {\n      onPhoneClose();\n    }\n  }, [onPhoneClose, disable]);\n\n  if (visible && !isPhone) {\n    closePhone();\n  }\n\n  const value = useMemo(\n    () => ({\n      id,\n      title,\n      closePhone,\n    }),\n    [id, title, closePhone]\n  );\n\n  return (\n    <PhoneContext.Provider value={value}>\n      <ConditionalFullPageDialog\n        id={id}\n        disabled={!isPhone}\n        enable={enable}\n        disable={closePhone}\n        visible={visible}\n        disableAppBar={disableAppBar || statusBar}\n        disableContent={disableContent}\n        disableFocusOnMount={disableFocusOnMount}\n      >\n        <div\n          id={`${id}-phone`}\n          className={cnb(block({ emulated: !isPhone }), className)}\n        >\n          {(statusBar && <StatusBar id={id} isPhone={isPhone} />) || appBar}\n          <div\n            id={`${id}-content`}\n            className={cnb(\n              block(\"content\", { stacked }),\n              {\n                [APP_BAR_OFFSET_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone,\n                [APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME]:\n                  !statusBar && appBar && !isPhone && prominent,\n              },\n              contentClassName\n            )}\n          >\n            {children}\n            {statusBar && (\n              <PhoneOnly>\n                <ClosePhone floating />\n              </PhoneOnly>\n            )}\n          </div>\n        </div>\n      </ConditionalFullPageDialog>\n    </PhoneContext.Provider>\n  );\n};\n\nexport default Phone;\n",
    "isBinary": false
  },
  "src/Phone/PhoneAppBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { cnb } from \"cnbuilder\";;\nimport { AppBar, AppBarProps } from \"@react-md/app-bar\";\nimport { bem, useAppSize } from \"@react-md/utils\";\n\nimport { usePhoneContext } from \"./context\";\nimport StatusBar from \"./StatusBar\";\n\nconst block = bem(\"phone\");\n\nconst PhoneAppBar: FC<AppBarProps> = ({ className, children, ...props }) => {\n  const { id } = usePhoneContext();\n  const { isPhone } = useAppSize();\n\n  return (\n    <AppBar\n      {...props}\n      id={`${id}-app-bar`}\n      className={cnb(block(\"app-bar\"), className)}\n      fixed\n      fixedElevation={false}\n      dense={!isPhone}\n    >\n      <StatusBar id={id} isPhone={isPhone} />\n      {children}\n    </AppBar>\n  );\n};\n\nPhoneAppBar.defaultProps = {\n  theme: \"default\",\n};\n\nexport default PhoneAppBar;\n",
    "isBinary": false
  },
  "src/Phone/SearchAction.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBarAction, AppBarActionProps } from \"@react-md/app-bar\";\nimport { SearchSVGIcon } from \"@react-md/material-icons\";\n\nimport { usePhoneContext } from \"./context\";\n\nconst SearchAction: FC<AppBarActionProps> = ({ children, ...props }) => {\n  const { id } = usePhoneContext();\n  return (\n    <AppBarAction {...props} id={`${id}-search`}>\n      {children}\n    </AppBarAction>\n  );\n};\n\nSearchAction.defaultProps = {\n  \"aria-label\": \"Search\",\n  children: <SearchSVGIcon />,\n  first: true,\n};\n\nexport default SearchAction;\n",
    "isBinary": false
  },
  "src/Phone/StatusBar.tsx": {
    "content": "import React, { FC } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport {\n  NetworkWifiSVGIcon,\n  NetworkCellSVGIcon,\n  BatteryFullSVGIcon,\n} from \"@react-md/material-icons\";\nimport { bem } from \"@react-md/utils\";\n\nexport interface StatusBarProps {\n  id: string;\n  isPhone: boolean;\n}\n\nconst block = bem(\"phone\");\n\nconst StatusBar: FC<StatusBarProps> = ({ id, isPhone }) => {\n  if (isPhone) {\n    return null;\n  }\n\n  return (\n    <AppBar\n      id={`${id}-status-bar`}\n      className={block(\"status-bar\")}\n      dense\n      theme=\"clear\"\n      component=\"div\"\n    >\n      <NetworkWifiSVGIcon\n        role=\"presentation\"\n        className={block(\"icon\", { first: true })}\n      />\n      <NetworkCellSVGIcon role=\"presentation\" className={block(\"icon\")} />\n      <BatteryFullSVGIcon role=\"presentation\" className={block(\"icon\")} />\n    </AppBar>\n  );\n};\n\nexport default StatusBar;\n",
    "isBinary": false
  },
  "src/Phone/context.ts": {
    "content": "import { createContext, ReactNode, useContext } from \"react\";\n\ninterface PhoneContextType {\n  id: string;\n  title: ReactNode;\n  closePhone: () => void;\n}\n\nexport const PhoneContext = createContext<PhoneContextType>({\n  id: \"\",\n  title: \"Example\",\n  closePhone: () => {},\n});\n\nexport function usePhoneContext(): PhoneContextType {\n  return useContext(PhoneContext);\n}\n",
    "isBinary": false
  },
  "src/Phone/index.ts": {
    "content": "import Phone from \"./Phone\";\n\nexport default Phone;\n\nexport { default as DefaultAppBar } from \"./DefaultAppBar\";\nexport { default as PhoneAppBar } from \"./PhoneAppBar\";\nexport { default as ClosePhone } from \"./ClosePhone\";\nexport { default as OptionsAction } from \"./OptionsAction\";\nexport { default as SearchAction } from \"./SearchAction\";\nexport * from \"./context\";\n",
    "isBinary": false
  },
  "src/states.ts": {
    "content": "export default [\n  {\n    name: \"Alabama\",\n    abbreviation: \"AL\",\n  },\n  {\n    name: \"Alaska\",\n    abbreviation: \"AK\",\n  },\n  {\n    name: \"American Samoa\",\n    abbreviation: \"AS\",\n  },\n  {\n    name: \"Arizona\",\n    abbreviation: \"AZ\",\n  },\n  {\n    name: \"Arkansas\",\n    abbreviation: \"AR\",\n  },\n  {\n    name: \"California\",\n    abbreviation: \"CA\",\n  },\n  {\n    name: \"Colorado\",\n    abbreviation: \"CO\",\n  },\n  {\n    name: \"Connecticut\",\n    abbreviation: \"CT\",\n  },\n  {\n    name: \"Delaware\",\n    abbreviation: \"DE\",\n  },\n  {\n    name: \"District Of Columbia\",\n    abbreviation: \"DC\",\n  },\n  {\n    name: \"Federated States Of Micronesia\",\n    abbreviation: \"FM\",\n  },\n  {\n    name: \"Florida\",\n    abbreviation: \"FL\",\n  },\n  {\n    name: \"Georgia\",\n    abbreviation: \"GA\",\n  },\n  {\n    name: \"Guam\",\n    abbreviation: \"GU\",\n  },\n  {\n    name: \"Hawaii\",\n    abbreviation: \"HI\",\n  },\n  {\n    name: \"Idaho\",\n    abbreviation: \"ID\",\n  },\n  {\n    name: \"Illinois\",\n    abbreviation: \"IL\",\n  },\n  {\n    name: \"Indiana\",\n    abbreviation: \"IN\",\n  },\n  {\n    name: \"Iowa\",\n    abbreviation: \"IA\",\n  },\n  {\n    name: \"Kansas\",\n    abbreviation: \"KS\",\n  },\n  {\n    name: \"Kentucky\",\n    abbreviation: \"KY\",\n  },\n  {\n    name: \"Louisiana\",\n    abbreviation: \"LA\",\n  },\n  {\n    name: \"Maine\",\n    abbreviation: \"ME\",\n  },\n  {\n    name: \"Marshall Islands\",\n    abbreviation: \"MH\",\n  },\n  {\n    name: \"Maryland\",\n    abbreviation: \"MD\",\n  },\n  {\n    name: \"Massachusetts\",\n    abbreviation: \"MA\",\n  },\n  {\n    name: \"Michigan\",\n    abbreviation: \"MI\",\n  },\n  {\n    name: \"Minnesota\",\n    abbreviation: \"MN\",\n  },\n  {\n    name: \"Mississippi\",\n    abbreviation: \"MS\",\n  },\n  {\n    name: \"Missouri\",\n    abbreviation: \"MO\",\n  },\n  {\n    name: \"Montana\",\n    abbreviation: \"MT\",\n  },\n  {\n    name: \"Nebraska\",\n    abbreviation: \"NE\",\n  },\n  {\n    name: \"Nevada\",\n    abbreviation: \"NV\",\n  },\n  {\n    name: \"New Hampshire\",\n    abbreviation: \"NH\",\n  },\n  {\n    name: \"New Jersey\",\n    abbreviation: \"NJ\",\n  },\n  {\n    name: \"New Mexico\",\n    abbreviation: \"NM\",\n  },\n  {\n    name: \"New York\",\n    abbreviation: \"NY\",\n  },\n  {\n    name: \"North Carolina\",\n    abbreviation: \"NC\",\n  },\n  {\n    name: \"North Dakota\",\n    abbreviation: \"ND\",\n  },\n  {\n    name: \"Northern Mariana Islands\",\n    abbreviation: \"MP\",\n  },\n  {\n    name: \"Ohio\",\n    abbreviation: \"OH\",\n  },\n  {\n    name: \"Oklahoma\",\n    abbreviation: \"OK\",\n  },\n  {\n    name: \"Oregon\",\n    abbreviation: \"OR\",\n  },\n  {\n    name: \"Palau\",\n    abbreviation: \"PW\",\n  },\n  {\n    name: \"Pennsylvania\",\n    abbreviation: \"PA\",\n  },\n  {\n    name: \"Puerto Rico\",\n    abbreviation: \"PR\",\n  },\n  {\n    name: \"Rhode Island\",\n    abbreviation: \"RI\",\n  },\n  {\n    name: \"South Carolina\",\n    abbreviation: \"SC\",\n  },\n  {\n    name: \"South Dakota\",\n    abbreviation: \"SD\",\n  },\n  {\n    name: \"Tennessee\",\n    abbreviation: \"TN\",\n  },\n  {\n    name: \"Texas\",\n    abbreviation: \"TX\",\n  },\n  {\n    name: \"Utah\",\n    abbreviation: \"UT\",\n  },\n  {\n    name: \"Vermont\",\n    abbreviation: \"VT\",\n  },\n  {\n    name: \"Virgin Islands\",\n    abbreviation: \"VI\",\n  },\n  {\n    name: \"Virginia\",\n    abbreviation: \"VA\",\n  },\n  {\n    name: \"Washington\",\n    abbreviation: \"WA\",\n  },\n  {\n    name: \"West Virginia\",\n    abbreviation: \"WV\",\n  },\n  {\n    name: \"Wisconsin\",\n    abbreviation: \"WI\",\n  },\n  {\n    name: \"Wyoming\",\n    abbreviation: \"WY\",\n  },\n] as const;\n",
    "isBinary": false
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return () => generator.next().value;\n}\n",
    "isBinary": false
  }
}

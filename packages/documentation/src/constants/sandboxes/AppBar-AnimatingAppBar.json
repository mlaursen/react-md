{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>AppBar Example - Animating App Bar</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.tsx": {
    "content": "import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Configuration } from \"@react-md/layout\";\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from \"./Demo\";\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"
  },
  "src/styles.scss": {
    "content": "@import \"variables\";\n@import \"~@react-md/layout/dist/mixins\";\n@import \"~@react-md/states/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/typography/dist/mixins\";\n@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/app-bar/dist/mixins\";\n@import \"~@react-md/avatar/dist/mixins\";\n@import \"~@react-md/list/dist/mixins\";\n@import \"~@react-md/tooltip/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "AppBar Example - Animating App Bar",
      "description": "Example from https://react-md.dev/packages/app-bar/demos#animating-app-bar",
      "main": "src/index.tsx",
      "dependencies": {
        "@react-md/app-bar": "latest",
        "@react-md/avatar": "latest",
        "@react-md/button": "latest",
        "@react-md/elevation": "latest",
        "@react-md/layout": "latest",
        "@react-md/list": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/tooltip": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.tsx": {
    "content": "import React, { FC, useState } from \"react\";\nimport { AppBar, AppBarAction, AppBarNav } from \"@react-md/app-bar\";\nimport { Avatar } from \"@react-md/avatar\";\nimport avatarVariables from \"@react-md/avatar/dist/scssVariables\";\nimport { List, ListItem } from \"@react-md/list\";\nimport { MenuSVGIcon, MoreVertSVGIcon } from \"@react-md/material-icons\";\nimport { useScrollListener } from \"@react-md/utils\";\n\nimport people from \"./people\";\nimport AppBarTitle from \"./AppBarTitle\";\n\nimport styles from \"./AnimatingAppBar.module.scss\";\n\ntype CSSProperties = React.CSSProperties & {\n  \"--offset\": string;\n};\n\nconst COLORS = Object.keys(avatarVariables[\"rmd-avatar-colors\"]);\n\nconst transformedPeople = people.map((name, i) => ({\n  id: name.toLowerCase().replace(/ /g, \"-\"),\n  name,\n  avatar: name.substring(0, 1),\n  color: COLORS[i % COLORS.length],\n}));\n\nconst HEIGHT = 96;\n\n// this is used along with the current `scrollTop` value to make\n// the animation happen a bit slower. The number has no real significance\n// and just looked \"decent\"\nconst SCROLL_MULTIPLIER = 0.314;\n\nconst Demo: FC = () => {\n  const [height, setHeight] = useState(`${HEIGHT}px`);\n\n  const [ref, setRef] = useState<HTMLDivElement | null>(null);\n  useScrollListener({\n    element: ref,\n    onScroll: () => {\n      if (!ref) {\n        return;\n      }\n\n      const { scrollTop } = ref;\n      const remaining = Math.min(\n        Math.max(HEIGHT - scrollTop * SCROLL_MULTIPLIER, 0),\n        HEIGHT\n      );\n      const nextHeight = `${remaining}px`;\n      if (height !== nextHeight) {\n        setHeight(nextHeight);\n      }\n    },\n  });\n\n  const style: CSSProperties = {\n    \"--offset\": height,\n  };\n\n  return (\n    <div style={style} className={styles.container}>\n      <AppBar\n        id=\"animating-app-bar\"\n        className={styles.header}\n        fixed\n        theme=\"clear\"\n      >\n        <AppBarNav id=\"animating-app-bar-nav\" aria-label=\"Navigation\">\n          <MenuSVGIcon />\n        </AppBarNav>\n        <AppBarTitle className={styles.title}>Animating App Bar</AppBarTitle>\n        <AppBarAction id=\"animating-app-bar-kebab\" aria-label=\"Actions\" first>\n          <MoreVertSVGIcon />\n        </AppBarAction>\n      </AppBar>\n      <div className={styles.content} ref={setRef}>\n        <List>\n          {transformedPeople.map(({ id, name, avatar, color }, i) => (\n            <ListItem\n              id={`person-${i}`}\n              key={id}\n              leftAddon={<Avatar color={color}>{avatar}</Avatar>}\n              leftAddonType=\"avatar\"\n            >\n              {name}\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    </div>\n  );\n};\n\nexport default Demo;\n"
  },
  "src/people.ts": {
    "content": "export default [\n  \"Jasmine Robinson\",\n  \"Devonte Craig\",\n  \"Dean Reid\",\n  \"Shaquille Bauer\",\n  \"Vivian Bishop\",\n  \"Braden Mullins\",\n  \"Katlyn Mcdonald\",\n  \"Isabella Marshall\",\n  \"Lee Christensen\",\n  \"Tommy Hogan\",\n  \"Timothy Harvey\",\n  \"Preston Phillips\",\n  \"Marco Sherman\",\n  \"Haley Coleman\",\n  \"Mario Swanson\",\n  \"Xavier Solis\",\n  \"Keaton Cannon\",\n  \"Cassandra Austin\",\n  \"Irene Holland\",\n  \"Gustavo Love\",\n  \"Meghan Stewart\",\n  \"Renee Townsend\",\n  \"Bobby Newman\",\n  \"Keaton Ortiz\",\n  \"Dustin Wells\",\n  \"Jerry Mcgee\",\n  \"Carl Howard\",\n  \"Sabrina Lang\",\n  \"Reed Baker\",\n  \"Kristen Fields\",\n  \"Gavin Carrillo\",\n  \"Claudia Neal\",\n  \"Leonard Schneider\",\n  \"Dominick Boyd\",\n  \"Mary Hampton\",\n  \"Mark Ayala\",\n  \"Kristina Warner\",\n  \"Antonio Walton\",\n  \"Tyson Scott\",\n  \"Harley Moss\",\n] as const;\n"
  },
  "src/AppBarTitle.tsx": {
    "content": "import React, { ReactElement, ReactNode, useCallback, useState } from \"react\";\nimport {\n  AppBarTitle as RMDAppBarTitle,\n  AppBarTitleProps,\n} from \"@react-md/app-bar\";\nimport { Tooltipped } from \"@react-md/tooltip\";\nimport { useResizeObserver } from \"@react-md/utils\";\n\nimport { useId } from \"./IdProvider\";\n\n/**\n * This component is a wrapper for the AppBarTitle component from @react-md/app-bar\n * that will automatically update the title to show a tooltip if the title becomes\n * truncated.\n *\n * This is pretty hacky right so it isn't part of the main lib yet, but a better\n * sultion to \"auto tooltip\" things might be added one day.\n */\nexport default function AppBarTitle({\n  id,\n  children,\n  ...props\n}: AppBarTitleProps): ReactElement {\n  const [tooltip, setTooltip] = useState<ReactNode>(null);\n  const updateTooltip = useCallback(\n    ({ width, scrollWidth }) => {\n      // the `width` is a `DOMRectReadOnly` object which allows for fractional\n      // values while `scrollWidth` is always `Math.ceil` so to be able to\n      // compare correctly, need to also `Math.ceil` the width or use\n      // `target.offsetWidth`\n      const offsetWidth = Math.ceil(width);\n      const isTruncated = offsetWidth < scrollWidth;\n      if (isTruncated && !tooltip) {\n        setTooltip(children);\n      } else if (!isTruncated && tooltip) {\n        setTooltip(null);\n      }\n    },\n    [tooltip, children]\n  );\n  const [, refHandler] = useResizeObserver(updateTooltip, {\n    disableHeight: true,\n  });\n\n  return (\n    <Tooltipped id={useId(id)} tooltip={tooltip}>\n      <RMDAppBarTitle\n        {...props}\n        ref={refHandler}\n        tabIndex={tooltip ? 0 : undefined}\n      >\n        {children}\n      </RMDAppBarTitle>\n    </Tooltipped>\n  );\n}\n"
  },
  "src/IdProvider.tsx": {
    "content": "import React, {\n  createContext,\n  useContext,\n  useMemo,\n  ReactNode,\n  ReactElement,\n} from \"react\";\nimport createIdGenerator from \"./createIdGenerator\";\n\ntype IdGenerator = ReturnType<typeof createIdGenerator>;\n\nconst context = createContext<IdGenerator>(createIdGenerator(\"autoid\"));\nconst { Provider } = context;\n\nexport function useId(id?: string): string {\n  const generator = useContext(context);\n\n  return useMemo(() => {\n    if (id) {\n      return id;\n    }\n\n    return generator();\n  }, [id, generator]);\n}\n\nexport interface IdProviderProps {\n  prefix?: string;\n  children: ReactNode;\n}\n\nexport function IdProvider({\n  children,\n  prefix = \"autoid\",\n}: IdProviderProps): ReactElement {\n  const value = useMemo(() => createIdGenerator(prefix), [prefix]);\n\n  return <Provider value={value}>{children}</Provider>;\n}\n"
  },
  "src/createIdGenerator.ts": {
    "content": "/**\n * An extremely simplified uuid function that is scoped with a speciifc prefix. This\n * will just always increment the total count at the end of the prefix.\n *\n * ```ts\n * const uuid = createIdGenerator(\"my-custom-prefix\");\n *\n * uuid(); // my-custom-prefix-0\n * uuid(); // my-custom-prefix-1\n * uuid(); // my-custom-prefix-2\n * ```\n *\n * @param prefix The string prefix to use\n * @return a function to call to generate a \"uuid\"\n */\nexport default function createIdGenerator(prefix: string): () => string {\n  const generator = (function* idGenerator() {\n    let index = 0;\n    while (true) {\n      yield `${prefix}-${index}`;\n      index += 1;\n    }\n  })();\n\n  return (): string => generator.next().value;\n}\n"
  },
  "src/AnimatingAppBar.module.scss": {
    "content": "@import \"~@react-md/utils/dist/mixins\";\n@import \"~@react-md/theme/dist/mixins\";\n@import \"~@react-md/elevation/dist/mixins\";\n@import \"~@react-md/button/dist/mixins\";\n@import \"~@react-md/app-bar/dist/functions\";\n@import \"~@react-md/app-bar/dist/mixins\";\n\n.container {\n  @include rmd-elevation(6);\n  @include rmd-utils-block-centered;\n\n  max-width: 20rem;\n  position: relative;\n\n  // when it's in the mobile full page view, reset some of the styles again\n  :global .rmd-dialog--full-page :local & {\n    height: 100%;\n    margin: 0;\n    max-width: none;\n    position: static;\n\n    .header {\n      position: fixed;\n    }\n\n    .content {\n      height: 100%;\n    }\n  }\n}\n\n.header {\n  @include rmd-button-theme-update-var(color, $rmd-white-base);\n  @include rmd-theme(color, $rmd-white-base);\n\n  // 20rem\n  $width: 20 * 16;\n  // app-bar-height (3.5rem) + 96 for custom offset\n  $height: (3.5 * 16) + 96;\n\n  // sass-lint:disable next-line no-url-protocols\n  background-image: url(#{'https://picsum.photos/#{$width}/#{$height}?image=811'});\n  height: auto;\n  padding-bottom: var(--offset);\n\n  // this is for the demo only since I don't want to move to\n  // a different page for this demo to have a fixed app bar.\n  // you wouldn't normally need to do this\n  position: absolute;\n  z-index: 3;\n}\n\n.title {\n  transform: translateY(var(--offset));\n}\n\n.content {\n  @include rmd-utils-scroll;\n\n  height: 35rem;\n  padding-top: calc(#{rmd-app-bar-theme-var(height)} + var(--offset));\n}\n"
  }
}

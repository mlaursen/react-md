@import 'mixins/bottom-navigations';
@import 'mixins/cards';
@import 'mixins/navigation-drawers';
@import 'mixins/pickers';
@import 'mixins/progress';
@import 'mixins/sidebars';
@import 'mixins/snackbars';
@import 'mixins/tabs';
@import 'mixins/toolbars';
@import 'mixins/theme';

/// Generates the box shadow for material design
///
/// @example scss - Basic Usage Sass
///   .paper-1 {
///     @include md-box-shadow(1);
///   }
///
///   .paper-5 {
///     @include md-box-shadow(5);
///   }
///
/// @example scss - Basic Usage CSS Output
///   .paper-1 {
///     box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14). 0 1px 5px 0 rgba(0, 0, 0, .12), 0 3px 1px -2px rgba(0, 0, 0, .2);
///   }
///
///   .paper-5 {
///     box-shadow: 0 16px 24px 2px rgba(0, 0, 0, .14), 0 6px 30px 5px rgba(0, 0, 0, .12), 0 8px 10px -5px rgba(0, 0, 0, .4);
///   }
///
/// @link https://elements.polymer-project.org/elements/paper-card?view=demo:demo/index.html&active=paper-card
/// @param {Number} elevation - The material design elevation. This should be a number from 0 - 5.
@mixin md-box-shadow($elevation) {
  @if $elevation < 0 or $elevation > 5 {
    @warn 'The elevation must be a number from 0 - 5. elevation given was `#{$elevation}`';
  } @else {
    $top-shadow-color: rgba($md-black-base, .14);
    $middle-shadow-color: rgba($md-black-base, .12);
    $bottom-shadow-color: rgba($md-black-base, if($elevation == 1, .2, .4));

    @if $elevation == 0 {
      box-shadow: none;
    } @else if $elevation == 1 {
      box-shadow: 0 2px 2px 0 $top-shadow-color, 0 1px 5px 0 $middle-shadow-color, 0 3px 1px -2px $bottom-shadow-color;
    } @else if $elevation == 2 {
      box-shadow: 0 4px 5px 0 $top-shadow-color, 0 1px 10px 0 $middle-shadow-color, 0 2px 4px -1px $bottom-shadow-color;
    } @else if $elevation == 3 {
      box-shadow: 0 6px 10px 0 $top-shadow-color, 0 1px 18px 0 $middle-shadow-color, 0 3px 5px -1px $bottom-shadow-color;
    } @else if $elevation == 4 {
      box-shadow: 0 8px 10px 1px $top-shadow-color, 0 3px 14px 2px $middle-shadow-color, 0 5px 5px -3px $bottom-shadow-color;
    } @else if $elevation == 5 {
      box-shadow: 0 16px 24px 2px $top-shadow-color, 0 6px 30px 5px $middle-shadow-color, 0 8px 10px -5px $bottom-shadow-color;
    }
  }
}


@mixin absolute-center($top: true, $left: false, $additional-transform: null) {
  @if $top {
    top: 50%;
  }

  @if $left {
    left: 50%;
  }

  transform: translate3d(if($left, -50%, 0), if($top, -50%, 0), 0) $additional-transform;
}


/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link https://css-tricks.com/snippets/sass/str-replace-function
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Gets a character at the given index from a string.
/// If the index 0, it gets the last character of the string.
/// @param {String} $string - The string to get a character from
/// @param {String} $i [0] - The index to get a character for
@function char-at($string, $i: 0) {
  $index: if($i == 0, str-length($string), $i);
  @return str-slice($string, $index, $index + 1);
}

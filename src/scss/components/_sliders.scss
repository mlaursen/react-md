////
/// @group sliders
////


/// Boolean if the styles for discrete sliders should be included.
/// @type Boolean
$md-slider-include-discrete: true !default;

/// Boolean if an editable slider's style should be included.
/// @type Boolean
$md-slider-include-editor: true !default;

/// Boolean if the styles for displaying indicators and icons with a slider
/// should be included
/// @type Boolean
$md-slider-include-indicators: true !default;

/// The Side of the Thumb for the Slider.
/// @type Number
/// @access private
$md-slider-thumb-size: 14px !default;

/// The default height for the Slider's container.
/// @type Number
$md-slider-height: $md-height !default;

/// The default height for the Slider's track.
/// @type Number
/// @access private
$md-slider-track-height: 2px !default;

/// The z-index for the Slider's thumb.
/// @type Number
$md-slider-thumb-z-index: 5 !default;

/// The scale to use when the slider is active. This will be applied
/// to the `scale` transform on the thumb.
/// @type Number
$md-slider-thumb-active-scale: 1.5 !default;

/// The scale to use when the slider is disabled. This will be applied
/// to the `scale` transform on the thumb.
/// @type Number
$md-slider-thumb-disabled-scale: .75 !default;


/// The height for a Discrete Slider's tick.
/// @type Number
$md-slider-discrete-tick-height: $md-slider-track-height !default;


/// The transition time to use for the Discrete Slider's ink appearance
/// when the user focuses with the keyboard.
/// @type Number
$md-slider-discrete-ink-transition-time: $md-transition-time * 2 !default;

/// The opacity to use for the Slider's thumb ink. This will appear when the user
/// focuses with the keyboard or touches the slider on a mobile device.
///
/// This opacity will be applied to the `$primary-color`.
/// @type Number
$md-slider-mask-ink-opacity: .15 !default;

/// The opacity to use for the discrete Slider's thumb ink. This will appear when the user
/// focuses with the keyboard.
///
/// This opacity will be applied to the `$primary-color`.
/// @type Number
$md-slider-discrete-mask-ink-opacity: .3 !default;

/// The off color to use for the Slider when using the light theme.
/// @type Color
$md-slider-light-theme-off-color: rgba($md-black-base, .26) !default;

/// The off color to use for the Slider when using the dark theme.
/// @type Color
$md-slider-dark-theme-off-color: rgba($md-white-base, .3) !default;

/// Boolean if the sliders should warn when not using a correct swatch. This warning will
/// only occur when using the dark theme and the primary color does not have a -200 suffix.
/// APPARENTLY this is a requirement for Material Design. Feel free to disable this warning.
/// @type Boolean
/// @see validate-slider-primary-color
$md-slider-warn-md: true !default;


/// This includes the react-md Sliders Component scss.
///
/// @param {Color} $primary-color [$md-primary-color] - The primary color to use for the
///     slider. This will be the non-disabled track's fill color and the non-disabled thumb's
///     color. If you are using the `dark-theme`, This value should be the primary color with
///     a `-200` suffix.
/// @param {Boolean} $light-theme [$md-light-theme] - A boolean if the application using the
///     light theme.
/// @param {Boolean} $include-media [$md-media-included] - Boolean if the media queries should be included.
/// @param {Boolean} $include-discrete [$md-slider-include-discrete] - A boolean if the discrete slider's scss should be included.
/// @param {Boolean} $include-editor [$md-slider-include-editor] - A boolean if the editable slider's scss should be included.
/// @param {Boolean} $include-indicators [$md-slider-include-indicators] - A boolean if the small scss for displaying indicators/icons
///     with the slider should be included.
@mixin react-md-sliders(
  $primary-color: $md-primary-color,
  $light-theme: $md-light-theme,
  $include-media: $md-media-included,
  $include-discrete: $md-slider-include-discrete,
  $include-editor: $md-slider-include-editor,
  $include-indicators: $md-slider-include-indicators
) {
  @if $md-colors-warn-md and $md-slider-warn-md {
    $invalid-color: validate-slider-primary-color($primary-color, $light-theme);
  }

  $md-slider-on-color: $primary-color;
  $md-slider-off-color: if($light-theme, $md-slider-light-theme-off-color, $md-slider-dark-theme-off-color);
  $bg-color: if($light-theme, $md-white-base, $md-dark-theme-background-color);
  $md-slider-mask-ink-color: rgba($primary-color, $md-slider-mask-ink-opacity);

  .md-slider-container {
    display: flex;
    flex-wrap: wrap;
    text-align: left;
  }

  .md-slider-label {
    display: block;
    width: 100%;
  }

  .md-slider-input {
    height: 0;
    position: absolute;
    visibility: hidden;
    width: 0;
  }

  .md-slider-track {
    $center: ($md-slider-height / 2) - ($md-slider-track-height / 2);
    background: $md-slider-off-color;
    content: '';
    display: block;
    flex-grow: 1;
    flex-shrink: 0;
    height: $md-slider-track-height;
    margin-bottom: $center;
    margin-top: $center;
    position: relative;
  }

  .md-slider-track-fill {
    background: $md-slider-on-color;
    border: 0;
    height: $md-slider-track-height;
    left: 0;
    margin: 0;
    position: absolute;
    top: 0;
    transition-duration: $md-transition-time;
    transition-property: width;
  }

  .md-slider-track-fill--dragging {
    transition-property: none;
  }

  .md-slider-thumb {
    border-radius: 50%;
    content: '';
    display: inline-block;
    height: $md-slider-thumb-size;
    position: absolute;
    top: -(($md-slider-thumb-size / 2) - ($md-slider-track-height / 2));
    transition-duration: $md-transition-time;
    transition-property: left, transform, background;
    width: $md-slider-thumb-size;
    z-index: $md-slider-thumb-z-index;

    &:focus {
      outline-style: none;
    }
  }

  .md-slider-thumb--on {
    background: $md-slider-on-color;
  }

  .md-slider-thumb--active {
    transform: scale($md-slider-thumb-active-scale);
    transform-origin: center;
  }

  .md-slider-thumb--dragging {
    transition-property: transform, background;
  }

  .md-slider-thumb--disabled {
    background: $md-slider-off-color;
    transform: scale($md-slider-thumb-disabled-scale);
  }

  .md-slider-thumb--continuous-off {
    background: $bg-color;
    border: 2px solid;
    border-color: $md-slider-off-color;
    position: relative;
  }

  .md-slider-thumb--mask {
    transform: scale(1);
  }

  .md-slider-thumb--mask-inked {
    background: $md-slider-mask-ink-color;
    transform: scale(3.5);
    z-index: $md-slider-thumb-z-index - 1;
  }

  .md-slider-thumb--mask-disabled {
    background: $bg-color;
    border-radius: 0;
    transform: scale(1.1);
    z-index: $md-slider-thumb-z-index - 1;
  }

  @if $include-discrete {
    @include react-md-discrete-slider($primary-color, $light-theme);
  }

  @if $include-editor {
    @include react-md-editable-slider;
  }

  @if $include-indicators {
    @include react-md-slider-indicators($include-media);
  }
}

/// This will include the styles for a discrete Slider.
///
/// @param {Color} $primary-color [$md-primary-color] - The primary color to style the Slider with.
/// @param {Boolean} $light-theme [$md-light-theme] - A boolean if the slider should be styled for
///     the light or dark theme.
@mixin react-md-discrete-slider($primary-color: $md-primary-color, $light-theme: $md-light-theme) {
  @if $md-colors-warn-md and $md-slider-warn-md {
    $invalid-color: validate-slider-primary-color($primary-color, $light-theme);
  }

  $md-slider-on-color: $primary-color;
  $md-slider-off-color: if($light-theme, $md-slider-light-theme-off-color, $md-slider-dark-theme-off-color);
  $bg-color: if($light-theme, $md-white-base, $md-dark-theme-background-color);
  $md-slider-discrete-mask-ink-color: rgba($primary-color, $md-slider-discrete-mask-ink-opacity);

  .md-slider-thumb--discrete {
    &::after {
      border-left: 7px solid transparent;
      border-right: 7px solid transparent;
      border-top: 7px solid transparent;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      content: '';
      height: 0;
      left: 0;
      position: absolute;
      top: 10px;
      transition-duration: $md-transition-time;
      transition-property: border-top-color, transform;
      width: 0;
    }

    &-active {
      top: 0;
      transform: scale(2) translate3d(0, -18px, 0);
    }

    &-on::after {
      border-top-color: $md-slider-on-color;
    }

    &-off {
      background: if($light-theme, $md-black-base, $md-white-base);
    }

    &-active-off {
      background: $md-grey-400;

      &::after {
        border-top-color: $md-grey-400;
      }
    }

    &-mask-inked {
      transform: scale(2.5);
      transition-duration: $md-slider-discrete-ink-transition-time;
    }

    &-mask-leaving {
      background: $md-slider-discrete-mask-ink-color;
      transition-duration: $md-slider-discrete-ink-transition-time;
      z-index: $md-slider-thumb-z-index - 1;
    }
  }

  .md-slider-discrete-value {
    align-items: center;
    color: $md-white-base;
    display: flex;
    font-size: 12px;
    height: $md-slider-thumb-size * 2;
    justify-content: center;
    position: absolute;
    text-align: center;
    transform: translate3d(-7px, -43px, 0);
    transition-duration: $md-transition-time;
    transition-property: left;
    width: $md-slider-thumb-size * 2;
    z-index: $md-slider-thumb-z-index + 1;
  }

  .md-slider-discrete-tick {
    background: if($light-theme, $md-black-base, $md-white-base);
    content: '';
    height: $md-slider-discrete-tick-height;
    position: absolute;
    top: -(($md-slider-discrete-tick-height / 2) - ($md-slider-track-height / 2));
    z-index: $md-slider-thumb-z-index - 1;
  }

  .md-slider-discrete-value--dragging {
    transition-property: none;
  }
}

/// This includes the small scss for displaying an editable slider.
@mixin react-md-editable-slider {
  .md-slider-editor {
    text-align: right;
  }

  .md-slider-container {
    .md-text-field-container {
      margin-left: 4px;
      padding-right: 0;
    }
  }
}

/// This includes the small scss for displaying `.md-icon` or indicators with a Slider.
/// @param {Boolean} include-media [$md-media-included] - Boolean if the media queries
///     should be included.
@mixin react-md-slider-indicators($include-media: $md-media-included) {
  @if $include-media {
    @include react-md-slider-indicators-media;
  }

  .md-slider-container {
    .md-icon {
      $margin: ($md-slider-height - $md-font-icon-size) / 2;

      margin-bottom: $margin;
      margin-top: $margin;
    }
  }

  .md-slider-ind {
    display: block;
    text-align: center;
  }

  .md-slider-track--ind-left {
    margin-left: $md-default-padding;
  }

  .md-slider-track--ind-right {
    margin-right: $md-default-padding;
  }
}

/// Creates the CSS for the slider indicators on mobile devices. This should most likely
/// be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-slider-indicators-mobile;
///   }
/// @group sliders, media-queries
@mixin react-md-slider-indicators-mobile {
  .md-slider-ind {
    font-size: $md-text-field-mobile-font-size;
    margin-top: 14px;
  }
}

/// Creates the CSS for the slider indicators on desktop screens. This should most likely
/// be used within a media query.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-slider-indicators-desktop;
///   }
/// @group sliders, media-queries
@mixin react-md-slider-indicators-desktop {
  .md-slider-ind {
    font-size: $md-text-field-desktop-font-size;
    margin-top: 16px;
  }
}

/// Includes the mobile and desktop media queries for the slider indicators.
///
/// @example scss - Basic Usage SCSS
///   @include react-md-slider-indicators-media;
/// @group sliders, media-queries
@mixin react-md-slider-indicators-media {
  @media #{$md-mobile-media} {
    @include react-md-slider-indicators-mobile;
  }

  @media #{$md-desktop-media} {
    @include react-md-slider-indicators-desktop;
  }
}


/// This will theme the Slider component with an updated `primary-color` and
/// optionally a switch in themes.
///
/// @param {Color} $primary-color [$md-primary-color] - The primary color to use for the
///     slider. This will be the non-disabled track's fill color and the non-disabled thumb's
///     color. If you are using the `dark-theme`, This value should be the primary color with
///     a `-200` suffix.
/// @param {Boolean} $light-theme [$md-light-theme] - A boolean if the application using the
///     light theme.
/// @param {Boolean} $include-discrete [$md-slider-include-discrete] - A boolean if the discrete Slider scss should be
///     themed as well.
/// @group sliders, themes
@mixin react-md-theme-sliders($primary-color: $md-primary-color, $light-theme: $md-light-theme, $include-discrete: $md-slider-include-discrete) {
  @if $md-colors-warn-md and $md-slider-warn-md {
    $invalid-color: validate-slider-primary-color($primary-color, $light-theme);
  }

  $md-slider-on-color: $primary-color;
  $md-slider-off-color: if($light-theme, $md-slider-light-theme-off-color, $md-slider-dark-theme-off-color);
  $bg-color: if($light-theme, $md-white-base, $md-dark-theme-background-color);

  @if $md-slider-on-color != $md-primary-color {
    .md-slider-thumb--on,
    .md-slider-track-fill {
      background: $md-slider-on-color;
    }
  }

  @if $light-theme != $md-light-theme {
    @if not $light-theme {
      .md-background--card {
        .md-slider-thumb--mask-disabled {
          background: get-color('card', false);
        }
      }
    }

    .md-slider-track,
    .md-slider-thumb--disabled {
      background: $md-slider-off-color;
    }

    .md-slider-thumb--continuous-off,
    .md-slider-thumb--disabled-mask {
      background: $bg-color;
    }

    .md-slider-thumb--off {
      border-color: $md-slider-off-color;
    }
  }

  @if $include-discrete {
    @include react-md-theme-discrete-slider($primary-color, $light-theme);
  }
}

/// This will update the discrete Slider with the new `$primary-color`.
///
/// @param {Color} $primary-color [$md-primary-color] - The primary color to
///     theme the discrete Slider with.
/// @param {Boolean} $light-theme [$md-light-theme] - Boolean if the discrete Slider
///     should be themed for the light or dark theme.
/// @group sliders, themes
@mixin react-md-theme-discrete-slider($primary-color: $md-primary-color, $light-theme: $md-light-theme) {
  @if $md-colors-warn-md and $md-slider-warn-md {
    $invalid-color: validate-slider-primary-color($primary-color, $light-theme);
  }

  $md-slider-on-color: $primary-color;

  @if $md-slider-on-color != $md-primary-color {
    .md-slider-thumb--discrete-on {
      &::after {
        border-top-color: $md-slider-on-color;
      }
    }
  }

  @if $light-theme != $md-light-theme and not $light-theme {
    .md-slider-discrete-tick {
      background: get-color('card', true);
    }
  }
}

/// A helper function to validate that a `$primary-color` has a `-200` suffix when
/// using the dark theme. It doesn't actually output anything with sass-loader atm
/// though. :/
///
/// @param {Color} $primary-color - The primary color to validate.
/// @param {Boolean} $light-theme - Boolean if the current theme is the light theme.
/// @return {Boolean} true if the primary color is valid or false if it is invalid.
@function validate-slider-primary-color($primary-color, $light-theme) {
  @if $light-theme {
    @return true;
  }

  $found: false;
  @each $name, $color in $md-color-map {
    @if str-index($name, '-200') != null and str-index($name, '-a-200') == null and $color == $primary-color {
      @return true;
    }
  }

  $msg: "The current primary-color: '#{$primary-color}' is not a valid '-200' suffix for a dark-themed slider.";
  $msg: "#{$msg} This warning can be siabled by setting the '$md-slider-warn-md' or '$md-colors-warn-md' to 'false'.";
  @warn "#{$msg} See https://react-md.mlaursen.com/sassdoc/#sliders-variable-md-slider-warn-md for more information.";

  @return false;
}

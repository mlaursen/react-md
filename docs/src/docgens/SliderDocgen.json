[{"description":"The `Slider` component is used to let users select a value from a continuous\nor discrete range of values by moving the slider thumb.\n\nWhen the user has finished dragging the Slider or increments the value by using\nthe edit field/keyboard arrows, the value will be rounded to the nearest `step`.","methods":[],"props":{"id":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props.label === 'undefined') {\n    return PropTypes.string(props, propName, component, ...others);\n  }\n\n  return isRequiredForA11y(PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]))(props, propName, component, ...others);\n}"},"required":false,"description":"An id to use for the `Slider`. This is required if the `label` prop\nis defined."},"style":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's container."},"className":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the slider's container."},"thumbStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's thumb."},"thumbClassName":{"type":{"name":"string"},"required":false,"description":"An optionl className to apply to the slider's thumb."},"trackStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's track."},"trackClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the slider's track."},"trackFillStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to the slider's track fill."},"trackFillClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to the slider's track fill."},"discreteValueStyle":{"type":{"name":"object"},"required":false,"description":"An optional style to apply to a discrete slider's value."},"discreteValueClassName":{"type":{"name":"string"},"required":false,"description":"An optional className to apply to a discrete slider's value."},"defaultValue":{"type":{"name":"number"},"required":true,"description":"The default value for the slider.","defaultValue":{"value":"0","computed":false}},"min":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  let err = PropTypes.number.isRequired(props, propName, component, ...others);\n  if (!err) {\n    const min = props[propName];\n    let name;\n    if (min > props.value) {\n      name = 'value';\n    } else if (min > props.defaultValue) {\n      name = 'defaultValue';\n    }\n\n    if (name) {\n      err = new Error(\n        `The '${propName}' prop must be less than or equal to the '${name}' prop for the '${component}' but ` +\n        `received: 'min: ${min}' and '${name}: ${props[name]}'`\n      );\n    } else if (min < 0 && props.max > 0) {\n      err = new Error(\n        `The '${component}' is unable to have a range spanning from negative to positive. The range ` +\n        'must either be all negative or all postive.'\n      );\n    }\n  }\n\n  return err;\n}"},"required":false,"description":"The min value for the slider. The min and max values must be on the same\nside of 0. It is currently invalid to have a range from negative to positive.","defaultValue":{"value":"0","computed":false}},"max":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  let err = PropTypes.number.isRequired(props, propName, component, ...others);\n  if (!err) {\n    const max = props[propName];\n    let name;\n    if (max < props.value) {\n      name = 'value';\n    } else if (max < props.defaultValue) {\n      name = 'defaultValue';\n    }\n\n    if (name) {\n      err = new Error(\n        `The '${propName}' prop must be greater than or equal to the '${name}' prop for the '${component}' but ` +\n        `received: '${propName}: ${max}' and '${name}: ${props[name]}'`\n      );\n    }\n  }\n\n  return err;\n}"},"required":false,"description":"The max value for the slider. The max value must be greater than the min value\nand the min and max values must be on the same side of 0. It is currently\ninvalid to have a range from negative to positive.","defaultValue":{"value":"100","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Boolean if the slider is disabled."},"value":{"type":{"name":"number"},"required":false,"description":"An optional value for the slider. This will make the component controlled\nand require the `onChange` function."},"onChange":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => { // eslint-disable-line arrow-body-style\n  return typeof props.value !== 'undefined'\n    ? PropTypes.func.isRequired(props, propName, component, ...others)\n    : PropTypes.func(props, propName, component, ...others);\n}"},"required":false,"description":"This is called when the slider's value gets updated. The value can be updated\nby one of the following:\n\n- Clicking a section of the slider\n- Dragging the slider with the mouse\n- Touching a section of the slider.\n- Dragging the slider with touch\n- Using the text field to update the value either by typing or incrementing\n- Using the left or right arrow keys to increment/decrement the value.\n\nThe callback for this function is as follows:\n\n```js\nonChange(value, event);\n```\n\nwhere the event can either be:\n- a touch start event\n- a touch move event\n- a touch end event\n- a mouse down event\n- a mouse move event\n- a mouse up event\n- a key up event\n- a key down event"},"onDragChange":{"type":{"name":"func"},"required":false,"description":"This is only called when the user is dragging the slider with either\nthe mouse or touch. Probably not really usefull. It just includes the\nnew drag percentage while the `onChange` does not.\n\nThe callback for this function is defined as:\n\n```js\nonDragChange(dragPercentage, value, (touchMove || mouseMove) event);\n```"},"onMouseDown":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the slider's container has\nthe mousedown event."},"onTouchStart":{"type":{"name":"func"},"required":false,"description":"An optional function to call when the slider's container has\nthe touchstart event."},"leftIcon":{"type":{"name":"element"},"required":false,"description":"An optional icon or letter to place to the left of the slider.\nif you want to use a non-font icon or a letter, use the `md-slider-ind`\nclassName on your element."},"rightIcon":{"type":{"name":"element"},"required":false,"description":"An optional icon or letter to place to the right of the slider.\nif you want to use a non-font icon or a letter, use the `md-slider-ind`\nclassName on your element.\n\n> NOTE: This can not be used if the `editable` prop is true."},"label":{"type":{"name":"node"},"required":false,"description":"An optional label to display above the slider. If this prop\nis set, then an `id` must also be given."},"step":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  let err = PropTypes.number.isRequired(props, propName, component, ...others);\n  if (!err) {\n    const step = props[propName];\n    if (step <= 0) {\n      err = new Error(\n        `The '${propName}' for the '${component}' must be a number greater than 0. The ` +\n        `current value is '${step}'.`\n      );\n    } else {\n      let name;\n      if (typeof props.value !== 'undefined' && props.value % step !== 0) {\n        name = 'value';\n      } else if (props.defaultValue % step !== 0) {\n        name = 'defaultValue';\n      }\n\n      if (name) {\n        err = new Error(\n          `The '${name}' prop on '${component}' should be a number divisible by the ` +\n          `'${propName}' prop. The current value is '${props[name]}' and the '${propName}' ` +\n          `is '${step}'.`\n        );\n      }\n    }\n  }\n\n  return err;\n}"},"required":false,"description":"The incremental amount when the user hits left or right with the\nkeyboard arrows, or the user hits the up or down buttons in the\neditable number text field. This number must be a number between\n0 and 1 or a whole number above 1.","defaultValue":{"value":"1","computed":false}},"editable":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props[propName] === 'undefined') {\n    return null;\n  }\n\n  let err = PropTypes.bool.isRequired(props, propName, component, ...others);\n  if (!err && typeof props.rightIcon !== 'undefined') {\n    err = new Error(\n      `The '${component}' is unable to be 'editable' and include a 'rightIcon'.`\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"Boolean if the Slider should be editable. This will place a number text field\nto the right of the slider. If this prop is set to `true`, the `rightIcon`\nprop can not be set."},"inputWidth":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":true,"description":"The width for the number text field when the Slider is editable.","defaultValue":{"value":"40","computed":false}},"discrete":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props[propName] === 'undefined') {\n    return null;\n  }\n\n  let err = PropTypes.bool(props, propName, component, ...others);\n  if (!err && typeof props.editable !== 'undefined') {\n    err = new Error(\n      `The '${component}' cannot be 'discrete' and 'editable'. Please choose one.`\n    );\n  }\n\n  return err;\n}"},"required":false,"description":"Boolean if the slider should be discrete. This will update the slider to include a\n_balloon_ with the current value inside. It will also not allow the `Slider` to be\neditable."},"tickWidth":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":true,"description":"The width of each tick for a discrete slider with ticks. This can either be a number\nwhich gets converted to `px`, or a valid css unit.","defaultValue":{"value":"6","computed":false}},"discreteTicks":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  if (typeof props[propName] === 'undefined') {\n    return null;\n  }\n\n  let err = PropTypes.number(props, propName, component, ...others);\n  if (!err) {\n    const { min, max, step } = props;\n    const range = Math.abs(max - min);\n\n    if ((range / props[propName]) % 1 !== 0) {\n      err = new Error(\n        `The '${propName}' must be a number divisible by the range set by the 'min' and ` +\n        `'max' props. The current range is '${range}' by including the min: '${min}' and ` +\n        `max: '${max}' values. The current value of '${propName}' is '${props[propName]}'.`\n      );\n    } else if (props[propName] % step !== 0) {\n      err = new Error(\n        `The 'step' prop must be a number divisible by the '${propName}'. It is common to have ` +\n        `them as the same value. The current 'step' is '${step}' and the '${propName}' is '${props[propName]}'.`\n      );\n    }\n  }\n\n  return err;\n}"},"required":false,"description":"This is number divisible by the total number of values included in the Slider. Every\nvalue that is divisible by this number will include a tick mark. It is common recommended\nto have this equal to the `step` prop.\n\nThis prop is completely optional."},"discreteInkTransitionTime":{"type":{"name":"number"},"required":true,"description":"The transition time for a discrete Slider's keyboard focus ink. This should match the\n`md-slider-discrete-ink-transition-time` value in your SCSS. This is used because\nthe ink is only visible temporarily for a discrete slider when keyboard focusing.","defaultValue":{"value":"300","computed":false}},"valuePrecision":{"type":{"name":"custom","raw":"(props, propName, component, ...others) => {\n  let err = PropTypes.number.isRequired(props, propName, component, ...others);\n  if (!err) {\n    const precision = props[propName];\n\n    if (precision % 1 !== 0 || precision < 0) {\n      err = new Error(\n        `The '${propName}' must be a positive whole number or 0 on the '${component}'. ` +\n        `The current '${propName}' is '${precision}'`\n      );\n    }\n  }\n\n  return err;\n}"},"required":false,"description":"The precision that the value should be rounded to when the Slider is updated. This\nneeds to be a whole number greater than or equal to 0.","defaultValue":{"value":"0","computed":false}}},"source":"src/js/Sliders/Slider.js","component":"Slider"}]